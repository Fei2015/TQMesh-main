/*
* This file is part of the TQMesh library.  
* This code was written by Florian Setzwein in 2022, 
* and is covered under the MIT License
* Refer to the accompanying documentation for details
* on usage and license.
*/

#include <iostream>
#include <cassert>

#include <TQMeshConfig.h>

#include "run_examples.h"

#include "Vec2.h"
#include "Log.h"

#include "Vertex.h"
#include "Edge.h"
#include "Domain.h"
#include "Mesh.h"
#include "Smoother.h"

using namespace CppUtils;
using namespace TQMesh::TQAlgorithm;

const std::vector<Vec2d> AIRFOIL_1 {
  {0.859847908,	0.075241104},		
  {0.857754856,	0.076029526},		
  {0.855223426,	0.076782768},		
  {0.852465262,	0.077454255},		
  {0.849442939,	0.078098609},		
  {0.846140706,	0.078726466},		
  {0.842545296,	0.079341276},		
  {0.838670197,	0.079941274},		
  {0.834541494,	0.080516186},		
  {0.830196270,	0.081061157},		
  {0.825677911,	0.081567076},		
  {0.821027092,	0.082030331},		
  {0.816277303,	0.082444824},		
  {0.811457423,	0.082808486},		
  {0.806587676,	0.083118671},		
  {0.801683235,	0.083373390},		
  {0.796754213,	0.083571320},		
  {0.791807793,	0.083714949},		
  {0.786845220,	0.083800685},		
  {0.781863343,	0.083830656},		
  {0.776861942,	0.083803175},		
  {0.771838087,	0.083722056},		
  {0.766788406,	0.083587739},		
  {0.761748599,	0.083410982},		
  {0.756773346,	0.083203482},		
  {0.751973859,	0.083015831},		
  {0.747431004,	0.082902589},		
  {0.743042844,	0.082883964},		
  {0.738721565,	0.082944021},		
  {0.734523736,	0.083056494},		
  {0.730526314,	0.083219878},		
  {0.726773123,	0.083428435},		
  {0.723299784,	0.083679215},		
  {0.720118456,	0.083960340},		
  {0.717230604,	0.084269901},		
  {0.714621198,	0.084597867},		
  {0.712270594,	0.084938236},		
  {0.710152844,	0.085289263},		
  {0.708244711,	0.085643704},		
  {0.706519006,	0.086003404},		
  {0.704953152,	0.086366175},		
  {0.703528167,	0.086731075},		
  {0.702225288,	0.087098846},		
  {0.701030590,	0.087467882},		
  {0.699930807,	0.087841635},		
  {0.698917291,	0.088219522},		
  {0.697978021,	0.088601404},		
  {0.697106257,	0.088988162},		
  {0.696298847,	0.089381924},		
  {0.695549048,	0.089783573},		
  {0.694852245,	0.090197143},		
  {0.694208660,	0.090624318},		
  {0.693614699,	0.091063854},		
  {0.693071467,	0.091524181},		
  {0.692592087,	0.092013865},		
  {0.692186753,	0.092545289},		
  {0.691865358,	0.093115443},		
  {0.691619835,	0.093715096},		
  {0.691445489,	0.094334576},		
  {0.691332788,	0.094966557},		
  {0.691270735,	0.095605623},		
  {0.691250461,	0.096249505},		
  {0.691266468,	0.096895495},		
  {0.691320000,	0.097540000},			
  {0.691409812,	0.098186612},		
  {0.691538474,	0.098841854},		
  {0.691704741,	0.099509316},		
  {0.691909636,	0.100183722},		
  {0.692151915,	0.100868664},		
  {0.692436415,	0.101561793},		
  {0.692761450,	0.102263330},		
  {0.693128263,	0.102969684},		
  {0.693540668,	0.103683784},		
  {0.693999909,	0.104402039},		
  {0.694506207,	0.105126133},		
  {0.695060805,	0.105852475},		
  {0.695668761,	0.106580403},		
  {0.696331539,	0.107308011},		
  {0.697049360,	0.108036983},		
  {0.697826840,	0.108763288},		
  {0.698665443,	0.109485017},		
  {0.699570227,	0.110201510},		
  {0.700539284,	0.110911302},		
  {0.701580381,	0.111608231},		
  {0.702693739,	0.112293983},		
  {0.703882066,	0.112963061},		
  {0.705151885,	0.113612896},		
  {0.706502754,	0.114240116},		
  {0.707939067,	0.114839003},		
  {0.709464196,	0.115409115},		
  {0.711080629,	0.115943268},		
  {0.712789831,	0.116439557},		
  {0.714595976,	0.116890575},		
  {0.716498623,	0.117292953},		
  {0.718502166,	0.117640970},		
  {0.720607408,	0.117927665},		
  {0.722818965,	0.118149003},		
  {0.725136173,	0.118299928},		
  {0.727563429,	0.118374721},		
  {0.730098384,	0.118368545},		
  {0.732743967,	0.118277589},		
  {0.735502447,	0.118092982},		
  {0.738376533,	0.117809226},		
  {0.741372746,	0.117423753},		
  {0.744498411,	0.116927031},		
  {0.747761956,	0.116317956},		
  {0.751171147,	0.115590369},		
  {0.754736900,	0.114735981},		
  {0.758480245,	0.113745181},		
  {0.762444346,	0.112607174},		
  {0.766674494,	0.111314314},		
  {0.771185939,	0.109878320},		
  {0.775945050,	0.108317313},		
  {0.780902000,	0.106656676},		
  {0.786009009,	0.104911239},		
  {0.791222775,	0.103103817},		
  {0.796502260,	0.101248355},		
  {0.801816320,	0.099355790},		
  {0.807140996,	0.097439546},		
  {0.812446388,	0.095506968},		
  {0.817708095,	0.093568109},		
  {0.822894972,	0.091633904},		
  {0.827962613,	0.089718742},		
  {0.832860087,	0.087839577},		
  {0.837518806,	0.086022537},		
  {0.841868275,	0.084292283},		
  {0.845846869,	0.082675743},		
  {0.849416702,	0.081184737},		
  {0.852590596,	0.079812443},		
  {0.855355709,	0.078526250},		
  {0.857884456,	0.077241862},		
};



/*********************************************************************
* This example covers the mesh generation for an airfoil  
*********************************************************************/
void run_example_7()
{
  /*------------------------------------------------------------------
  | Define the size function
  ------------------------------------------------------------------*/
  UserSizeFunction f = [](const Vec2d& p) 
  { 
    return 1.0;
  };

  Domain domain   { f };

  /*------------------------------------------------------------------
  | Build the mesh domain boundaries
  ------------------------------------------------------------------*/
  Boundary&  b_ext = domain.add_exterior_boundary();

  Vertex& v0 = domain.add_vertex( 0.6, -0.1, 1.0, 1.0 );
  Vertex& v1 = domain.add_vertex( 1.0, -0.1, 1.0, 1.0 );
  Vertex& v2 = domain.add_vertex( 1.0,  0.3, 1.0, 1.0 );
  Vertex& v3 = domain.add_vertex( 0.6,  0.3, 1.0, 1.0 );

  b_ext.add_edge( v0, v1, 1 );
  b_ext.add_edge( v1, v2, 1 );
  b_ext.add_edge( v2, v3, 1 );
  b_ext.add_edge( v3, v0, 1 );

  
  /*------------------------------------------------------------------
  | Airfoil 1
  ------------------------------------------------------------------*/
  Boundary&  b_af1 = domain.add_interior_boundary();

  std::vector<Vertex*> v_af1 {};

  for ( size_t i = 0; i < AIRFOIL_1.size(); i += 4)
  {
    const Vec2d& p = AIRFOIL_1[i];
    Vertex& v = domain.add_vertex( p.x, p.y, 1.05, 0.2 );
    v_af1.push_back( &v );
  }

  int nv_af1 = static_cast<int>( v_af1.size() );
  
  for ( int i = 0; i < nv_af1; ++i )
  {
    Vertex& v1 = *v_af1[i];
    Vertex& v2 = *v_af1[MOD(i+1,nv_af1)];
    b_af1.add_edge( v1, v2, 2 );
  }

  /*------------------------------------------------------------------
  | Initialize the mesh
  ------------------------------------------------------------------*/
  CONSTANTS.quad_layer_factor( 4.0 );
  CONSTANTS.quad_layer_range( 1.0 );
  CONSTANTS.quad_layer_angle( M_PI );

  Mesh mesh { domain };
  mesh.init_advancing_front();

  /*------------------------------------------------------------------
  |
  ------------------------------------------------------------------*/
  mesh.create_quad_layers(*v_af1[0], *v_af1[0], 6, 0.0007, 1.2);

  /*------------------------------------------------------------------
  |
  ------------------------------------------------------------------*/
  mesh.triangulate();

  /*------------------------------------------------------------------
  | Smooth the mesh for four iterations
  ------------------------------------------------------------------*/
  Smoother smoother {};
  smoother.smooth(domain, mesh, 6);

  /*------------------------------------------------------------------
  | Finally, the mesh is exportet to a file in VTU format.
  ------------------------------------------------------------------*/
  std::string source_dir { TQMESH_SOURCE_DIR };
  std::string file_name 
  { source_dir + "/aux/example_data/Example_7" };

  mesh.write_to_file( file_name, ExportType::txt );

} // run_example_7()
