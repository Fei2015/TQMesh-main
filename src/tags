!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	utils/utils.h	/^static inline T ABS(T a)$/;"	f	namespace:TQMesh::TQUtils
ASSERT	utils/utils.h	22;"	d
BdryType	algorithm/Boundary.h	/^enum class BdryType$/;"	c	namespace:TQMesh::TQAlgorithm
BenchmarkContainer	tests/mesh_test.cpp	/^struct BenchmarkContainer$/;"	s	namespace:MeshTests	file:
Boundary	algorithm/Boundary.h	/^  Boundary(BdryType btype)$/;"	f	class:TQMesh::TQAlgorithm::Boundary
Boundary	algorithm/Boundary.h	/^class Boundary : public EdgeList$/;"	c	namespace:TQMesh::TQAlgorithm
BoundaryTests	tests/boundary_test.cpp	/^namespace BoundaryTests$/;"	n	file:
CCW	utils/geometry.h	/^  CCW,    \/\/ Counter-Clockwise$/;"	m	class:TQMesh::TQUtils::TQGeom::Orientation
CL	utils/geometry.h	/^  CL,     \/\/ Colinear$/;"	m	class:TQMesh::TQUtils::TQGeom::Orientation
CW	utils/geometry.h	/^  CW,     \/\/ Clockwise$/;"	m	class:TQMesh::TQUtils::TQGeom::Orientation
Container	utils/Container.h	/^  Container(Container<T>&& c) $/;"	f	class:TQMesh::TQUtils::Container
Container	utils/Container.h	/^  Container(const Container<T>& c) $/;"	f	class:TQMesh::TQUtils::Container
Container	utils/Container.h	/^  Container(double qtree_scale=TQ_QTREE_SCALE,$/;"	f	class:TQMesh::TQUtils::Container
Container	utils/Container.h	/^class Container$/;"	c	namespace:TQMesh::TQUtils
ContainerTests	tests/container_test.cpp	/^namespace ContainerTests$/;"	n	file:
Container_benchmark	tests/container_test.cpp	/^void Container_benchmark(size_t n)$/;"	f	namespace:ContainerTests
CppUtils	utils/ParaReader.h	/^namespace CppUtils {$/;"	n
DBG_MSG	utils/utils.h	36;"	d
Domain	algorithm/Domain.h	/^  Domain( UserSizeFunction f = [](const Vec2d& p){return 1.0;},$/;"	f	class:TQMesh::TQAlgorithm::Domain
Domain	algorithm/Domain.h	/^class Domain$/;"	c	namespace:TQMesh::TQAlgorithm
EQ	utils/utils.h	/^static inline bool EQ(T a, T b)$/;"	f	namespace:TQMesh::TQUtils
EQ0	utils/utils.h	/^static inline bool EQ0(T a)$/;"	f	namespace:TQMesh::TQUtils
EXTERIOR	algorithm/Boundary.h	/^  EXTERIOR,$/;"	m	class:TQMesh::TQAlgorithm::BdryType
Edge	algorithm/Edge.h	/^  Edge(Vertex& v1, Vertex& v2, EdgeList& edgelist, int m) $/;"	f	class:TQMesh::TQAlgorithm::Edge
Edge	algorithm/Edge.h	/^class Edge$/;"	c	namespace:TQMesh::TQAlgorithm
Edge	tests/container_test.cpp	/^  Edge(Vertex& v1, Vertex& v2) $/;"	f	class:ContainerTests::Edge
Edge	tests/container_test.cpp	/^class Edge$/;"	c	namespace:ContainerTests	file:
EdgeList	algorithm/EdgeList.h	/^  EdgeList( TQGeom::Orientation orient ) : orient_ { orient }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
EdgeList	algorithm/EdgeList.h	/^  EdgeList(EdgeList&& el) $/;"	f	class:TQMesh::TQAlgorithm::EdgeList
EdgeList	algorithm/EdgeList.h	/^  EdgeList(const EdgeList& el) : orient_ { el.orient_ }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
EdgeList	algorithm/EdgeList.h	/^class EdgeList$/;"	c	namespace:TQMesh::TQAlgorithm
EdgeListTests	tests/edgelist_test.cpp	/^namespace EdgeListTests$/;"	n	file:
F	app/exprtk.h	/^      typedef ifunction<T>                                F;$/;"	t	class:exprtk::parser
Facet	algorithm/Facet.h	/^class Facet$/;"	c	namespace:TQMesh::TQAlgorithm
Front	algorithm/Front.h	/^  Front() : EdgeList( TQGeom::Orientation::NONE )$/;"	f	class:TQMesh::TQAlgorithm::Front
Front	algorithm/Front.h	/^class Front : public EdgeList$/;"	c	namespace:TQMesh::TQAlgorithm
FrontTests	tests/front_test.cpp	/^namespace FrontTests$/;"	n	file:
GF	app/exprtk.h	/^      typedef igeneric_function<T>                        GF;$/;"	t	class:exprtk::parser
GeometryTests	tests/geometry_test.cpp	/^namespace GeometryTests$/;"	n	file:
INCLUDE_EXPRTK_HPP	app/exprtk.h	34;"	d
Invalid	utils/ParaReader.h	/^    Invalid(const string& msg){ error_message = msg; }$/;"	f	class:CppUtils::ParaReader::Invalid
Invalid	utils/ParaReader.h	/^  class Invalid$/;"	c	class:CppUtils::ParaReader
Invalid	utils/oldParaReader.h	/^    Invalid(const string& msg){ error_message = msg; }$/;"	f	class:ParaReader::Invalid
Invalid	utils/oldParaReader.h	/^  class Invalid$/;"	c	class:ParaReader
L	tests/mesh_test.cpp	/^  std::vector<double>   L;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
ListParameter	utils/oldParaReader.h	/^  ListParameter(const string& key) $/;"	f	class:ListParameter
ListParameter	utils/oldParaReader.h	/^  ListParameter(const string& start, const string& end) $/;"	f	class:ListParameter
ListParameter	utils/oldParaReader.h	/^class ListParameter$/;"	c
MAX	utils/utils.h	/^static inline T MAX(T a, T b) $/;"	f	namespace:TQMesh::TQUtils
MIN	utils/utils.h	/^static inline T MIN(T a, T b) $/;"	f	namespace:TQMesh::TQUtils
MOD	utils/utils.h	/^static inline T MOD(T n, T M)$/;"	f	namespace:TQMesh::TQUtils
MSG	utils/utils.h	46;"	d
Mesh	algorithm/Mesh.h	/^  Mesh(Domain&   domain,$/;"	f	class:TQMesh::TQAlgorithm::Mesh
Mesh	algorithm/Mesh.h	/^class Mesh$/;"	c	namespace:TQMesh::TQAlgorithm
MeshTests	tests/mesh_test.cpp	/^namespace MeshTests$/;"	n	file:
NOMINMAX	app/exprtk.h	38735;"	d
Orientation	utils/geometry.h	/^enum class Orientation$/;"	c	namespace:TQMesh::TQUtils::TQGeom
ParaReader	utils/ParaReader.h	/^  ParaReader(const string& file_path) $/;"	f	class:CppUtils::ParaReader
ParaReader	utils/ParaReader.h	/^class ParaReader$/;"	c	namespace:CppUtils
ParaReader	utils/oldParaReader.h	/^  ParaReader(const string& file_path) $/;"	f	class:ParaReader
ParaReader	utils/oldParaReader.h	/^class ParaReader$/;"	c
Parameter	utils/ParaReader.h	/^  Parameter(const string& key, size_t n) $/;"	f	class:CppUtils::Parameter
Parameter	utils/ParaReader.h	/^  Parameter(const string& start, const string& end, size_t n) $/;"	f	class:CppUtils::Parameter
Parameter	utils/ParaReader.h	/^class Parameter : public ParameterBase$/;"	c	namespace:CppUtils
ParameterBase	utils/ParaReader.h	/^  ParameterBase(const string& key)$/;"	f	class:CppUtils::ParameterBase
ParameterBase	utils/ParaReader.h	/^  ParameterBase(const string& start, const string& end)$/;"	f	class:CppUtils::ParameterBase
ParameterBase	utils/ParaReader.h	/^class ParameterBase$/;"	c	namespace:CppUtils
ProgressBar	utils/ProgressBar.h	/^  ProgressBar(int w = 70)$/;"	f	class:TQMesh::TQUtils::ProgressBar
ProgressBar	utils/ProgressBar.h	/^class ProgressBar$/;"	c	namespace:TQMesh::TQUtils
QTree	utils/QTree.h	/^  QTree(double          scale, $/;"	f	class:TQMesh::TQUtils::QTree
QTree	utils/QTree.h	/^class QTree$/;"	c	namespace:TQMesh::TQUtils
QTreeTests	tests/qtree_test.cpp	/^namespace QTreeTests$/;"	n	file:
QTree_benchmark	tests/qtree_test.cpp	/^void QTree_benchmark(int n, int r, size_t imax, size_t dmax, $/;"	f	namespace:QTreeTests
Quad	algorithm/Quad.h	/^  Quad(Vertex& v1, Vertex& v2, Vertex& v3, Vertex& v4)$/;"	f	class:TQMesh::TQAlgorithm::Quad
Quad	algorithm/Quad.h	/^class Quad : public Facet$/;"	c	namespace:TQMesh::TQAlgorithm
QuadLayer	algorithm/QuadLayer.h	/^  QuadLayer(Edge* e_start, Edge* e_end, bool is_closed, double height)$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
QuadLayer	algorithm/QuadLayer.h	/^class QuadLayer$/;"	c	namespace:TQMesh::TQAlgorithm
QuadTests	tests/quad_test.cpp	/^namespace QuadTests$/;"	n	file:
RefType	app/exprtk.h	/^         typedef       T& RefType;$/;"	t	struct:exprtk::details::functor_t
RefType	app/exprtk.h	/^         typedef typename details::functor_t<T>::RefType RefType;$/;"	t	struct:exprtk::details::opr_base
RefType	app/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::add_op
RefType	app/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::div_op
RefType	app/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::mod_op
RefType	app/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::mul_op
RefType	app/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::pow_op
RefType	app/exprtk.h	/^         typedef typename opr_base<T>::RefType RefType;$/;"	t	struct:exprtk::details::sub_op
ScalarParameter	utils/oldParaReader.h	/^  ScalarParameter(const string& key) $/;"	f	class:ScalarParameter
ScalarParameter	utils/oldParaReader.h	/^class ScalarParameter$/;"	c
SizeFunctionTests	tests/sizefunction_test.cpp	/^namespace SizeFunctionTests$/;"	n	file:
Smoother	algorithm/Smoother.h	/^class Smoother$/;"	c	namespace:TQMesh::TQAlgorithm
SmootherTests	tests/smoother_test.cpp	/^namespace SmootherTests$/;"	n	file:
SpiralFunction	tests/container_test.cpp	/^  SpiralFunction(double a, double b, double c)$/;"	f	class:ContainerTests::SpiralFunction
SpiralFunction	tests/container_test.cpp	/^class SpiralFunction$/;"	c	namespace:ContainerTests	file:
SpiralFunction	tests/qtree_test.cpp	/^  SpiralFunction(double a, double b, double c)$/;"	f	class:QTreeTests::SpiralFunction
SpiralFunction	tests/qtree_test.cpp	/^class SpiralFunction$/;"	c	namespace:QTreeTests	file:
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T0	app/exprtk.h	/^            typedef typename node_type::T0 T0;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T0	app/exprtk.h	/^         typedef T0_ T0;$/;"	t	class:exprtk::details::exprtk_final
T0oT1	app/exprtk.h	/^         T0oT1(T0 p0, T1 p1, const bfunc_t p2)$/;"	f	class:exprtk::details::exprtk_final
T0oT1	app/exprtk.h	/^         T0oT1(T0oT1<T,T0,T1>&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1_define	app/exprtk.h	/^      struct T0oT1_define$/;"	s	namespace:exprtk::details
T0oT1oT2	app/exprtk.h	/^         T0oT1oT2(T0 p0, T1 p1, T2 p2, const bfunc_t p3, const bfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2	app/exprtk.h	/^         T0oT1oT2(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT20T3process	app/exprtk.h	/^      struct T0oT1oT20T3process$/;"	s	namespace:exprtk::details
T0oT1oT2_base_node	app/exprtk.h	/^      class T0oT1oT2_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
T0oT1oT2_define	app/exprtk.h	/^      struct T0oT1oT2_define$/;"	s	namespace:exprtk::details
T0oT1oT2_sf3	app/exprtk.h	/^         T0oT1oT2_sf3(T0 p0, T1 p1, T2 p2, const tfunc_t p3)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2_sf3	app/exprtk.h	/^         T0oT1oT2_sf3(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2_sf3ext	app/exprtk.h	/^         T0oT1oT2_sf3ext(T0 p0, T1 p1, T2 p2)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2_sf3ext	app/exprtk.h	/^         T0oT1oT2_sf3ext(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3	app/exprtk.h	/^         T0oT1oT2oT3(T0 p0, T1 p1, T2 p2, T3 p3, bfunc_t p4, bfunc_t p5, bfunc_t p6)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3	app/exprtk.h	/^         T0oT1oT2oT3(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_base_node	app/exprtk.h	/^      class T0oT1oT2oT3_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
T0oT1oT2oT3_define	app/exprtk.h	/^      struct T0oT1oT2oT3_define$/;"	s	namespace:exprtk::details
T0oT1oT2oT3_sf4	app/exprtk.h	/^         T0oT1oT2oT3_sf4(T0 p0, T1 p1, T2 p2, T3 p3, const qfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_sf4	app/exprtk.h	/^         T0oT1oT2oT3_sf4(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_sf4ext	app/exprtk.h	/^         T0oT1oT2oT3_sf4ext(T0 p0, T1 p1, T2 p2, T3 p3)$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2oT3_sf4ext	app/exprtk.h	/^         T0oT1oT2oT3_sf4ext(node_type&) {}$/;"	f	class:exprtk::details::exprtk_final
T0oT1oT2process	app/exprtk.h	/^      struct T0oT1oT2process$/;"	s	namespace:exprtk::details
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T1	app/exprtk.h	/^            typedef typename node_type::T1 T1;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T1	app/exprtk.h	/^         typedef T1_ T1;$/;"	t	class:exprtk::details::exprtk_final
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T2	app/exprtk.h	/^            typedef typename node_type::T2 T2;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T2	app/exprtk.h	/^         typedef T2_ T2;$/;"	t	class:exprtk::details::exprtk_final
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
T3	app/exprtk.h	/^            typedef typename node_type::T3 T3;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
T3	app/exprtk.h	/^         typedef T3_ T3;$/;"	t	class:exprtk::details::exprtk_final
TQAlgorithm	algorithm/Boundary.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Domain.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Edge.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/EdgeList.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Facet.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Front.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Mesh.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Quad.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/QuadLayer.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Smoother.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Triangle.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQAlgorithm	algorithm/Vertex.h	/^namespace TQAlgorithm {$/;"	n	namespace:TQMesh
TQGeom	utils/geometry.h	/^namespace TQGeom {$/;"	n	namespace:TQMesh::TQUtils
TQMesh	algorithm/Boundary.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Domain.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Edge.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/EdgeList.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Facet.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Front.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Mesh.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Quad.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/QuadLayer.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Smoother.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Triangle.h	/^namespace TQMesh {$/;"	n
TQMesh	algorithm/Vertex.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/Container.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/ProgressBar.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/QTree.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/Timer.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/Vec2.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/geometry.h	/^namespace TQMesh {$/;"	n
TQMesh	utils/utils.h	/^namespace TQMesh {$/;"	n
TQUtils	utils/Container.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQUtils	utils/ProgressBar.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQUtils	utils/QTree.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQUtils	utils/Timer.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQUtils	utils/Vec2.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQUtils	utils/geometry.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQUtils	utils/utils.h	/^namespace TQUtils {$/;"	n	namespace:TQMesh
TQ_DOMAIN_MIN_ELEMSIZE	utils/utils.h	54;"	d
TQ_DOMAIN_MIN_SCALING	utils/utils.h	53;"	d
TQ_INTR_EDGE_MARKER	utils/utils.h	60;"	d
TQ_MAX	utils/utils.h	/^constexpr double TQ_MAX    = DBL_MAX;$/;"	m	namespace:TQMesh::TQUtils
TQ_MIN	utils/utils.h	/^constexpr double TQ_MIN    = DBL_MIN;$/;"	m	namespace:TQMesh::TQUtils
TQ_QTREE_DEPTH	utils/utils.h	58;"	d
TQ_QTREE_ITEMS	utils/utils.h	57;"	d
TQ_QTREE_SCALE	utils/utils.h	56;"	d
TQ_QUAD_LAYER_ANGLE	utils/utils.h	67;"	d
TQ_QUAD_LAYER_RANGE	utils/utils.h	68;"	d
TQ_QUAD_RANGE_FACTOR	utils/utils.h	65;"	d
TQ_QUAD_WEDGE_ANGLE	utils/utils.h	66;"	d
TQ_RANGE_FACTOR	utils/utils.h	63;"	d
TQ_SMALL	utils/utils.h	/^constexpr double TQ_SMALL  = 1.0E-13; \/\/DBL_EPSILON;$/;"	m	namespace:TQMesh::TQUtils
TQ_WIDE_SEARCH_FACTOR	utils/utils.h	64;"	d
T_	app/exprtk.h	/^            static inline void execute(T_ (&v)[1], const branch_t (&b)[1])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	app/exprtk.h	/^            static inline void execute(T_ (&v)[2], const branch_t (&b)[2])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	app/exprtk.h	/^            static inline void execute(T_ (&v)[3], const branch_t (&b)[3])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	app/exprtk.h	/^            static inline void execute(T_ (&v)[4], const branch_t (&b)[4])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	app/exprtk.h	/^            static inline void execute(T_ (&v)[5], const branch_t (&b)[5])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
T_	app/exprtk.h	/^            static inline void execute(T_ (&v)[BranchCount], const branch_t (&b)[BranchCount])$/;"	m	struct:exprtk::details::exprtk_final::evaluate_branches
Test_Boundary_clear_edges	tests/boundary_test.cpp	/^void Test_Boundary_clear_edges()$/;"	f	namespace:BoundaryTests
Test_Boundary_interior_exterior	tests/boundary_test.cpp	/^void Test_Boundary_interior_exterior()$/;"	f	namespace:BoundaryTests
Test_Boundary_shapes	tests/boundary_test.cpp	/^void Test_Boundary_shapes()$/;"	f	namespace:BoundaryTests
Test_Container_Vertices_Edges	tests/container_test.cpp	/^void Test_Container_Vertices_Edges()$/;"	f	namespace:ContainerTests
Test_Container_insert	tests/container_test.cpp	/^void Test_Container_insert()$/;"	f	namespace:ContainerTests
Test_Container_push_back	tests/container_test.cpp	/^void Test_Container_push_back()$/;"	f	namespace:ContainerTests
Test_Container_remove	tests/container_test.cpp	/^void Test_Container_remove()$/;"	f	namespace:ContainerTests
Test_Container_sort	tests/container_test.cpp	/^void Test_Container_sort()$/;"	f	namespace:ContainerTests
Test_Domain_is_inside	tests/boundary_test.cpp	/^void Test_Domain_is_inside()$/;"	f	namespace:BoundaryTests
Test_EdgeList_add_remove	tests/edgelist_test.cpp	/^void Test_EdgeList_add_remove()$/;"	f	namespace:EdgeListTests
Test_EdgeList_is_inside	tests/edgelist_test.cpp	/^void Test_EdgeList_is_inside()$/;"	f	namespace:EdgeListTests
Test_EdgeList_split_edge	tests/edgelist_test.cpp	/^void Test_EdgeList_split_edge()$/;"	f	namespace:EdgeListTests
Test_Front_initialization	tests/front_test.cpp	/^void Test_Front_initialization(bool export_data)$/;"	f	namespace:FrontTests
Test_Front_sort_edges	tests/front_test.cpp	/^void Test_Front_sort_edges()$/;"	f	namespace:FrontTests
Test_Mesh_add_quad_layer	tests/mesh_test.cpp	/^void Test_Mesh_add_quad_layer(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_add_quad_layer_step	tests/mesh_test.cpp	/^void Test_Mesh_add_quad_layer_step(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_advance_front_quad	tests/mesh_test.cpp	/^void Test_Mesh_advance_front_quad(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_banner	tests/mesh_test.cpp	/^void Test_Mesh_banner(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_benchmark	tests/mesh_test.cpp	/^void Test_Mesh_benchmark(double h, double L, $/;"	f	namespace:MeshTests
Test_Mesh_benchmark_TMesh	tests/mesh_test.cpp	/^void Test_Mesh_benchmark_TMesh(double h, double L, $/;"	f	namespace:MeshTests
Test_Mesh_create_bdry_shape_mesh	tests/mesh_test.cpp	/^void Test_Mesh_create_bdry_shape_mesh(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_create_simple_hex_layers	tests/mesh_test.cpp	/^void Test_Mesh_create_simple_hex_layers(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_initialization	tests/mesh_test.cpp	/^void Test_Mesh_initialization()$/;"	f	namespace:MeshTests
Test_Mesh_multiple_domains	tests/mesh_test.cpp	/^void Test_Mesh_multiple_domains(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_pave	tests/mesh_test.cpp	/^void Test_Mesh_pave(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_refine_to_quads	tests/mesh_test.cpp	/^void Test_Mesh_refine_to_quads(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_triangulate	tests/mesh_test.cpp	/^void Test_Mesh_triangulate(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_vortex_shedding	tests/mesh_test.cpp	/^void Test_Mesh_vortex_shedding(bool export_mesh)$/;"	f	namespace:MeshTests
Test_Mesh_wedge	tests/mesh_test.cpp	/^void Test_Mesh_wedge(bool export_mesh)$/;"	f	namespace:MeshTests
Test_QTree_add	tests/qtree_test.cpp	/^void Test_QTree_add(bool export_qtree=false)$/;"	f	namespace:QTreeTests
Test_QTree_add_remove	tests/qtree_test.cpp	/^void Test_QTree_add_remove(bool export_qtree=false)$/;"	f	namespace:QTreeTests
Test_QTree_constructor	tests/qtree_test.cpp	/^void Test_QTree_constructor()$/;"	f	namespace:QTreeTests
Test_QTree_get_items	tests/qtree_test.cpp	/^void Test_QTree_get_items(bool export_qtree=false)$/;"	f	namespace:QTreeTests
Test_QTree_remove	tests/qtree_test.cpp	/^void Test_QTree_remove(bool export_qtree=false)$/;"	f	namespace:QTreeTests
Test_Quad_initialization	tests/quad_test.cpp	/^void Test_Quad_initialization()$/;"	f	namespace:QuadTests
Test_SizeFunction_evaluation	tests/sizefunction_test.cpp	/^void Test_SizeFunction_evaluation(bool export_sizefun)$/;"	f	namespace:SizeFunctionTests
Test_Smoother_TriMesh	tests/smoother_test.cpp	/^void Test_Smoother_TriMesh(bool export_mesh)$/;"	f	namespace:SmootherTests
Test_TQGeom_in_on_quad	tests/geometry_test.cpp	/^void Test_TQGeom_in_on_quad()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_on_rect	tests/geometry_test.cpp	/^void Test_TQGeom_in_on_rect()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_on_segment	tests/geometry_test.cpp	/^void Test_TQGeom_in_on_segment()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_on_triangle	tests/geometry_test.cpp	/^void Test_TQGeom_in_on_triangle()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_quad	tests/geometry_test.cpp	/^void Test_TQGeom_in_quad()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_rect	tests/geometry_test.cpp	/^void Test_TQGeom_in_rect()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_segment	tests/geometry_test.cpp	/^void Test_TQGeom_in_segment()$/;"	f	namespace:GeometryTests
Test_TQGeom_in_triangle	tests/geometry_test.cpp	/^void Test_TQGeom_in_triangle()$/;"	f	namespace:GeometryTests
Test_TQGeom_is_left	tests/geometry_test.cpp	/^void Test_TQGeom_is_left()$/;"	f	namespace:GeometryTests
Test_TQGeom_is_lefton	tests/geometry_test.cpp	/^void Test_TQGeom_is_lefton()$/;"	f	namespace:GeometryTests
Test_TQGeom_line_line_intersection	tests/geometry_test.cpp	/^void Test_TQGeom_line_line_intersection()$/;"	f	namespace:GeometryTests
Test_TQGeom_line_quad_intersection	tests/geometry_test.cpp	/^void Test_TQGeom_line_quad_intersection()$/;"	f	namespace:GeometryTests
Test_TQGeom_line_tri_intersection	tests/geometry_test.cpp	/^void Test_TQGeom_line_tri_intersection()$/;"	f	namespace:GeometryTests
Test_TQGeom_orientation	tests/geometry_test.cpp	/^void Test_TQGeom_orientation()$/;"	f	namespace:GeometryTests
Test_TQGeom_quad_quad_intersection	tests/geometry_test.cpp	/^void Test_TQGeom_quad_quad_intersection()$/;"	f	namespace:GeometryTests
Test_TQGeom_rect_overlap	tests/geometry_test.cpp	/^void Test_TQGeom_rect_overlap()$/;"	f	namespace:GeometryTests
Test_TQGeom_tri_quad_intersection	tests/geometry_test.cpp	/^void Test_TQGeom_tri_quad_intersection()$/;"	f	namespace:GeometryTests
Test_TQGeom_tri_tri_intersection	tests/geometry_test.cpp	/^void Test_TQGeom_tri_tri_intersection()$/;"	f	namespace:GeometryTests
Test_Triangle_initialization	tests/triangle_test.cpp	/^void Test_Triangle_initialization()$/;"	f	namespace:TriangleTests
Test_Triangle_intersects_domain	tests/triangle_test.cpp	/^void Test_Triangle_intersects_domain()$/;"	f	namespace:TriangleTests
Test_Triangle_intersects_triangle	tests/triangle_test.cpp	/^void Test_Triangle_intersects_triangle()$/;"	f	namespace:TriangleTests
Test_Triangle_intersects_vertex	tests/triangle_test.cpp	/^void Test_Triangle_intersects_vertex()$/;"	f	namespace:TriangleTests
Timer	utils/Timer.h	/^class Timer$/;"	c	namespace:TQMesh::TQUtils
Triangle	algorithm/Triangle.h	/^  Triangle(Vertex& v1, Vertex& v2, Vertex& v3)$/;"	f	class:TQMesh::TQAlgorithm::Triangle
Triangle	algorithm/Triangle.h	/^class Triangle : public Facet$/;"	c	namespace:TQMesh::TQAlgorithm
TriangleTests	tests/triangle_test.cpp	/^namespace TriangleTests$/;"	n	file:
Type	app/exprtk.h	/^         typedef const T& Type;$/;"	t	struct:exprtk::details::functor_t
Type	app/exprtk.h	/^         typedef typename details::functor_t<T>::Type    Type;$/;"	t	struct:exprtk::details::opr_base
Type	app/exprtk.h	/^         typedef typename details::functor_t<T>::Type Type;$/;"	t	struct:exprtk::details::sf_base
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::add_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::div_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::mod_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::mul_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::pow_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type    Type;$/;"	t	struct:exprtk::details::sub_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::and_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::eq_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::equal_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::gt_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::gte_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::ilike_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::in_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::inrange_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::like_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::lt_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::lte_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::nand_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::ne_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::nor_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::or_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_add_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_avg_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_mand_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_max_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_min_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_mor_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_mul_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::vararg_multi_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::xnor_op
Type	app/exprtk.h	/^         typedef typename opr_base<T>::Type Type;$/;"	t	struct:exprtk::details::xor_op
VAF	app/exprtk.h	/^      typedef ivararg_function<T>                         VAF;$/;"	t	class:exprtk::parser
Vec2	utils/Vec2.h	/^  Vec2() {}$/;"	f	class:TQMesh::TQUtils::Vec2
Vec2	utils/Vec2.h	/^  Vec2(T e0, T e1) : e{e0,e1} {}$/;"	f	class:TQMesh::TQUtils::Vec2
Vec2	utils/Vec2.h	/^  Vec2(Vec2<T>&& v) : e{v.x,v.y} {}$/;"	f	class:TQMesh::TQUtils::Vec2
Vec2	utils/Vec2.h	/^  Vec2(const Vec2<T>& v) : e{ v.x,v.y } {}$/;"	f	class:TQMesh::TQUtils::Vec2
Vec2	utils/Vec2.h	/^class Vec2$/;"	c	namespace:TQMesh::TQUtils
Vec2Def	utils/Vec2.h	/^namespace Vec2Def$/;"	n	namespace:TQMesh::TQUtils
Vertex	algorithm/Vertex.h	/^  Vertex(const Vec2d& c, double s=1.0, double r=1.0) $/;"	f	class:TQMesh::TQAlgorithm::Vertex
Vertex	algorithm/Vertex.h	/^  Vertex(double x, double y, double s=1.0, double r=1.0) $/;"	f	class:TQMesh::TQAlgorithm::Vertex
Vertex	algorithm/Vertex.h	/^class Vertex$/;"	c	namespace:TQMesh::TQAlgorithm
Vertex	app/unused.c	/^  std::vector<std::pair<Vertex&,Vertex&>> quad_layer_vertices {};$/;"	v
Vertex	tests/container_test.cpp	/^  Vertex(double x, double y) : xy_ {x, y} {}$/;"	f	class:ContainerTests::Vertex
Vertex	tests/container_test.cpp	/^class Vertex$/;"	c	namespace:ContainerTests	file:
VertexType	tests/qtree_test.cpp	/^  VertexType(T x, T y) : xy_ {x, y} {}$/;"	f	class:QTreeTests::VertexType
VertexType	tests/qtree_test.cpp	/^class VertexType$/;"	c	namespace:QTreeTests	file:
WIN32_LEAN_AND_MEAN	app/exprtk.h	38738;"	d
_180_pi	app/exprtk.h	/^            static const double _180_pi = 57.29577951308232087679815481410517033240547246656443;$/;"	m	namespace:exprtk::details::numeric::constant
_1_pi	app/exprtk.h	/^            static const double _1_pi   =  0.31830988618379067153776752674502872406891929148091;$/;"	m	namespace:exprtk::details::numeric::constant
_2_pi	app/exprtk.h	/^            static const double _2_pi   =  0.63661977236758134307553505349005744813783858296183;$/;"	m	namespace:exprtk::details::numeric::constant
_int64_t	app/exprtk.h	/^      typedef long long int          _int64_t;$/;"	t	namespace:exprtk::details
_uint64_t	app/exprtk.h	/^      typedef unsigned long long int _uint64_t;$/;"	t	namespace:exprtk::details
abs_impl	app/exprtk.h	/^            inline T abs_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
abs_impl	app/exprtk.h	/^            template <typename T> inline T   abs_impl(const T v, int_type_tag) { return ((v >= T(0)) ? v : -v); }$/;"	f	namespace:exprtk::details::numeric::details
acos_impl	app/exprtk.h	/^            template <typename T> inline T  acos_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
acos_impl	app/exprtk.h	/^            template <typename T> inline T  acos_impl(const T v, real_type_tag) { return std::acos (v); }$/;"	f	namespace:exprtk::details::numeric::details
acosh_impl	app/exprtk.h	/^            template <typename T> inline T acosh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
acosh_impl	app/exprtk.h	/^            template <typename T> inline T acosh_impl(const T v, real_type_tag) { return std::log(v + std::sqrt((v * v) - T(1))); }$/;"	f	namespace:exprtk::details::numeric::details
activate_side_effect	app/exprtk.h	/^         void activate_side_effect(const std::string&)$/;"	f	struct:exprtk::parser::parser_state
active	app/exprtk.h	/^         bool         active;$/;"	m	struct:exprtk::parser::scope_element
add	app/exprtk.h	/^         inline bool add(const std::string& symbol_name, RawType& t_, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	app/exprtk.h	/^         inline bool add(const std::string& symbol_name, T (&v)[v_size], const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	app/exprtk.h	/^         inline bool add(const std::string& symbol_name, T* v, const std::size_t v_size, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	app/exprtk.h	/^         inline bool add(const std::string& symbol_name, exprtk::vector_view<T>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	app/exprtk.h	/^         inline bool add(const std::string& symbol_name, std::deque<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	app/exprtk.h	/^         inline bool add(const std::string& symbol_name, std::vector<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store
add	app/exprtk.h	/^      inline bool add(const function& f, const bool override = false)$/;"	f	class:exprtk::function_compositor
add	app/exprtk.h	/^      inline bool add(const std::string& name,$/;"	f	class:exprtk::function_compositor
add	utils/QTree.h	/^  bool add(T* item)$/;"	f	class:TQMesh::TQUtils::QTree
add_assignment	app/exprtk.h	/^         inline void add_assignment(const std::string& symbol, const symbol_type st)$/;"	f	class:exprtk::parser::dependent_entity_collector
add_auxiliary_symtab	app/exprtk.h	/^      inline void add_auxiliary_symtab(symbol_table_t& symtab)$/;"	f	class:exprtk::function_compositor
add_boundary	algorithm/Domain.h	/^  Boundary& add_boundary( Args&&... args )$/;"	f	class:TQMesh::TQAlgorithm::Domain
add_constant	app/exprtk.h	/^      inline bool add_constant(const std::string& constant_name, const T& value)$/;"	f	class:exprtk::symbol_table
add_constants	app/exprtk.h	/^      inline bool add_constants()$/;"	f	class:exprtk::symbol_table
add_edge	algorithm/Boundary.h	/^  Edge& add_edge(Vertex& v1, Vertex& v2, int marker)$/;"	f	class:TQMesh::TQAlgorithm::Boundary
add_edge	algorithm/EdgeList.h	/^  virtual Edge& add_edge(Vertex& v1, Vertex& v2, $/;"	f	class:TQMesh::TQAlgorithm::EdgeList
add_edge	algorithm/Vertex.h	/^  void add_edge(Edge& e) { edges_.push_back(&e); }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
add_edge	tests/container_test.cpp	/^  void add_edge(Edge* e) { edges_.push_back(e); }$/;"	f	class:ContainerTests::Vertex
add_element	app/exprtk.h	/^         inline bool add_element(const scope_element& se)$/;"	f	class:exprtk::parser::scope_element_manager
add_epsilon	app/exprtk.h	/^      inline bool add_epsilon()$/;"	f	class:exprtk::symbol_table
add_exterior_boundary	algorithm/Domain.h	/^  Boundary& add_exterior_boundary()$/;"	f	class:TQMesh::TQAlgorithm::Domain
add_facet	algorithm/Vertex.h	/^  void add_facet(Facet& t) { facets_.push_back(&t); }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
add_fixed_vertex	algorithm/Domain.h	/^  Vertex& add_fixed_vertex( Args&&... args )$/;"	f	class:TQMesh::TQAlgorithm::Domain
add_function	app/exprtk.h	/^      inline bool add_function(const std::string& function_name, function_t& function)$/;"	f	class:exprtk::symbol_table
add_function	app/exprtk.h	/^      inline bool add_function(const std::string& function_name, generic_function_t& function)$/;"	f	class:exprtk::symbol_table
add_function	app/exprtk.h	/^      inline bool add_function(const std::string& vararg_function_name, vararg_function_t& vararg_function)$/;"	f	class:exprtk::symbol_table
add_impl	app/exprtk.h	/^         inline bool add_impl(const std::string& symbol_name, RType t, const bool is_const)$/;"	f	struct:exprtk::symbol_table::type_store
add_infinity	app/exprtk.h	/^      inline bool add_infinity()$/;"	f	class:exprtk::symbol_table
add_interior_boundary	algorithm/Domain.h	/^  Boundary& add_interior_boundary()$/;"	f	class:TQMesh::TQAlgorithm::Domain
add_invalid	app/exprtk.h	/^            void add_invalid(const lexer::token::token_type base, const lexer::token::token_type t)$/;"	f	class:exprtk::lexer::helper::sequence_validator
add_invalid	app/exprtk.h	/^            void add_invalid(const token_t t0, const token_t t1, const token_t t2)$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
add_invalid_set1	app/exprtk.h	/^            void add_invalid_set1(const lexer::token::token_type t)$/;"	f	class:exprtk::lexer::helper::sequence_validator
add_item_number	utils/QTree.h	/^  inline void add_item_number( int i ) $/;"	f	class:TQMesh::TQUtils::QTree
add_op	app/exprtk.h	/^      struct add_op : public opr_base<T>$/;"	s	namespace:exprtk::details
add_package	app/exprtk.h	/^      inline bool add_package(Package& package)$/;"	f	class:exprtk::symbol_table
add_pi	app/exprtk.h	/^      inline bool add_pi()$/;"	f	class:exprtk::symbol_table
add_quad_layer	algorithm/Mesh.h	/^  bool add_quad_layer(Vertex*& v_start_in, Vertex*& v_end_in, $/;"	f	class:TQMesh::TQAlgorithm::Mesh
add_quad_layer_triangle	algorithm/Mesh.h	/^  Triangle* add_quad_layer_triangle(Edge* base, $/;"	f	class:TQMesh::TQAlgorithm::Mesh
add_replace	app/exprtk.h	/^            bool add_replace(const std::string& target_symbol,$/;"	f	class:exprtk::lexer::helper::symbol_replacer
add_reserved_function	app/exprtk.h	/^      inline bool add_reserved_function(const std::string& function_name, function_t& function)$/;"	f	class:exprtk::symbol_table
add_reserved_function	app/exprtk.h	/^      inline bool add_reserved_function(const std::string& function_name, generic_function_t& function)$/;"	f	class:exprtk::symbol_table
add_reserved_function	app/exprtk.h	/^      inline bool add_reserved_function(const std::string& vararg_function_name, vararg_function_t& vararg_function)$/;"	f	class:exprtk::symbol_table
add_row	utils/ParaReader.h	/^  void add_row()$/;"	f	class:CppUtils::Parameter
add_stringvar	app/exprtk.h	/^      inline bool add_stringvar(const std::string& stringvar_name, std::string& s, const bool is_constant = false)$/;"	f	class:exprtk::symbol_table
add_symbol	app/exprtk.h	/^         inline void add_symbol(const std::string& symbol, const symbol_type st)$/;"	f	class:exprtk::parser::dependent_entity_collector
add_value	utils/oldParaReader.h	/^  void add_value(T val) { values_.push_back( val ); }$/;"	f	class:ListParameter
add_variable	app/exprtk.h	/^      inline bool add_variable(const std::string& variable_name, T& t, const bool is_constant = false)$/;"	f	class:exprtk::symbol_table
add_vector	app/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, T (&v)[N])$/;"	f	class:exprtk::symbol_table
add_vector	app/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, T* v, const std::size_t& v_size)$/;"	f	class:exprtk::symbol_table
add_vector	app/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, exprtk::vector_view<T>& v)$/;"	f	class:exprtk::symbol_table
add_vector	app/exprtk.h	/^      inline bool add_vector(const std::string& vector_name, std::vector<T,Allocator>& v)$/;"	f	class:exprtk::symbol_table
add_vertex	algorithm/Domain.h	/^  Vertex& add_vertex( Args&&... args )$/;"	f	class:TQMesh::TQAlgorithm::Domain
adjacent_facet_intersection	algorithm/Vertex.h	/^  bool adjacent_facet_intersection(const std::list<T*>& facets) const$/;"	f	class:TQMesh::TQAlgorithm::Vertex
adjacent_vertex	algorithm/Vertex.h	/^  Vertex* adjacent_vertex(size_t i) { return verts_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
adjacent_vertex	algorithm/Vertex.h	/^  const Vertex* adjacent_vertex(size_t i) const { return verts_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
advance_front_quad	algorithm/Mesh.h	/^  bool advance_front_quad(Edge& base, bool wide_search=false,$/;"	f	class:TQMesh::TQAlgorithm::Mesh
advance_front_triangle	algorithm/Mesh.h	/^  bool advance_front_triangle(Edge& base, bool wide_search=false)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
advance_token	app/exprtk.h	/^         inline void advance_token(const token_advance_mode mode)$/;"	f	class:exprtk::lexer::parser_helper
af	app/exprtk.h	/^      all_false  <T> af;$/;"	m	struct:exprtk::rtl::vecops::package
all_false	app/exprtk.h	/^      all_false()$/;"	f	class:exprtk::rtl::vecops::all_false
all_false	app/exprtk.h	/^   class all_false : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
all_nodes_valid	app/exprtk.h	/^      inline bool all_nodes_valid(const Sequence<expression_node<T>*,Allocator>& b)$/;"	f	namespace:exprtk::details
all_nodes_valid	app/exprtk.h	/^      inline bool all_nodes_valid(expression_node<T>* (&b)[N])$/;"	f	namespace:exprtk::details
all_nodes_variables	app/exprtk.h	/^      inline bool all_nodes_variables(Sequence<expression_node<T>*,Allocator>& b)$/;"	f	namespace:exprtk::details
all_nodes_variables	app/exprtk.h	/^      inline bool all_nodes_variables(expression_node<T>* (&b)[N])$/;"	f	namespace:exprtk::details
all_true	app/exprtk.h	/^      all_true()$/;"	f	class:exprtk::rtl::vecops::all_true
all_true	app/exprtk.h	/^   class all_true : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
allocate	app/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[1])$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[2])$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[3])$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[4])$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[5])$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename ResultNode::value_type>* allocate(OpType& operation, ExprNode (&branch)[6])$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate() const$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(T1& t1) const$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const Sequence<Type,Allocator>& seq) const$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const T1& t1, const  T2&  t2,$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const T1& t1, const T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate(const T1& t1, const T2& t2,$/;"	f	class:exprtk::details::node_allocator
allocate	app/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2)$/;"	f	class:exprtk::details::exprtk_final
allocate	app/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, T3 p3)$/;"	f	class:exprtk::details::exprtk_final
allocate	app/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, T3 p3, qfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
allocate	app/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, bfunc_t p3, bfunc_t p4)$/;"	f	class:exprtk::details::exprtk_final
allocate	app/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator, T0 p0, T1 p1, T2 p2, tfunc_t p3)$/;"	f	class:exprtk::details::exprtk_final
allocate	app/exprtk.h	/^         static inline expression_node<T>* allocate(Allocator& allocator,$/;"	f	class:exprtk::details::exprtk_final
allocate_c	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_c(const T1& t1) const$/;"	f	class:exprtk::details::node_allocator
allocate_cr	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_cr(const T1& t1, T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_rc	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rc(T1& t1, const T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_rr	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rr(T1& t1, T2& t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_rrr	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rrr(T1& t1, T2& t2, T3& t3) const$/;"	f	class:exprtk::details::node_allocator
allocate_rrrr	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rrrr(T1& t1, T2& t2, T3& t3, T4& t4) const$/;"	f	class:exprtk::details::node_allocator
allocate_rrrrr	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_rrrrr(T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) const$/;"	f	class:exprtk::details::node_allocator
allocate_tt	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_tt(T1 t1, T2 t2) const$/;"	f	class:exprtk::details::node_allocator
allocate_ttt	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_ttt(T1 t1, T2 t2, T3 t3) const$/;"	f	class:exprtk::details::node_allocator
allocate_tttt	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_tttt(T1 t1, T2 t2, T3 t3, T4 t4) const$/;"	f	class:exprtk::details::node_allocator
allocate_type	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_type(T1 t1, T2 t2, T3 t3) const$/;"	f	class:exprtk::details::node_allocator
allocate_type	app/exprtk.h	/^         inline expression_node<typename node_type::value_type>* allocate_type(T1 t1, T2 t2,$/;"	f	class:exprtk::details::node_allocator
allow_zero_parameters	app/exprtk.h	/^      inline bool& allow_zero_parameters()$/;"	f	class:exprtk::function_traits
allow_zero_parameters_	app/exprtk.h	/^      bool allow_zero_parameters_;$/;"	m	class:exprtk::function_traits
alternative_	app/exprtk.h	/^         branch_t alternative_;$/;"	m	class:exprtk::details::exprtk_final
alternative_	app/exprtk.h	/^         expression_ptr alternative_;$/;"	m	class:exprtk::details::exprtk_final
alternative_node_ptr_	app/exprtk.h	/^         vector_node_ptr   alternative_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
and_impl	app/exprtk.h	/^            inline T and_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
and_impl	app/exprtk.h	/^            inline T and_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
and_op	app/exprtk.h	/^      struct and_op : public opr_base<T>$/;"	s	namespace:exprtk::details
and_opr	app/exprtk.h	/^         inline T and_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
angle	algorithm/Quad.h	/^  double angle(unsigned int i) const { return angles_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
angle	algorithm/Triangle.h	/^  double angle(unsigned int i) const { return angles_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
angle	utils/Vec2.h	/^inline T angle(const Vec2<T> &u, const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
any_false	app/exprtk.h	/^      any_false()$/;"	f	class:exprtk::rtl::vecops::any_false
any_false	app/exprtk.h	/^   class any_false : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
any_true	app/exprtk.h	/^      any_true()$/;"	f	class:exprtk::rtl::vecops::any_true
any_true	app/exprtk.h	/^   class any_true : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
area	algorithm/Domain.h	/^  double area() const$/;"	f	class:TQMesh::TQAlgorithm::Domain
area	algorithm/EdgeList.h	/^  double area() const { return area_; }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
area	algorithm/Mesh.h	/^  double area() const { return mesh_area_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
area	algorithm/Quad.h	/^  double area() const { return area_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
area	algorithm/Triangle.h	/^  double area() const { return area_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
arg_list_	app/exprtk.h	/^         std::vector<branch_t> arg_list_;$/;"	m	class:exprtk::details::exprtk_final
arg_list_	app/exprtk.h	/^         std::vector<branch_t> arg_list_;$/;"	m	class:exprtk::details::switch_node
arg_list_	app/exprtk.h	/^         std::vector<const T*> arg_list_;$/;"	m	class:exprtk::details::exprtk_final
arg_list_	app/exprtk.h	/^         std::vector<expression_ptr> arg_list_;$/;"	m	class:exprtk::details::exprtk_final
arg_list_	app/exprtk.h	/^         std::vector<expression_ptr> arg_list_;$/;"	m	class:exprtk::details::generic_function_node
arg_list_t	app/exprtk.h	/^            typedef std::vector<std::pair<expression_node_ptr,bool> > arg_list_t;$/;"	t	struct:exprtk::parser::expression_generator::switch_nodes
arith_opr_to_string	app/exprtk.h	/^         std::string arith_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
arithmetic_disabled	app/exprtk.h	/^         bool arithmetic_disabled(const details::operator_type arithmetic_operation) const$/;"	f	class:exprtk::parser::settings_store
arithmetic_enabled	app/exprtk.h	/^         bool arithmetic_enabled(const details::operator_type& arithmetic_operation) const$/;"	f	class:exprtk::parser::settings_store
arithmetic_ops_list	app/exprtk.h	/^      static const std::string arithmetic_ops_list[] =$/;"	m	namespace:exprtk::details
arithmetic_ops_list_size	app/exprtk.h	/^      static const std::size_t arithmetic_ops_list_size = sizeof(arithmetic_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
array_vector_impl	app/exprtk.h	/^            array_vector_impl(const Type* vec, const std::size_t& vec_size)$/;"	f	class:exprtk::details::vector_holder::array_vector_impl
array_vector_impl	app/exprtk.h	/^         class array_vector_impl : public vector_holder_base$/;"	c	class:exprtk::details::vector_holder
as_string	app/exprtk.h	/^         inline std::string as_string() const$/;"	f	class:exprtk::details::build_string
asin_impl	app/exprtk.h	/^            template <typename T> inline T  asin_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
asin_impl	app/exprtk.h	/^            template <typename T> inline T  asin_impl(const T v, real_type_tag) { return std::asin (v); }$/;"	f	namespace:exprtk::details::numeric::details
asinh_impl	app/exprtk.h	/^            template <typename T> inline T asinh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
asinh_impl	app/exprtk.h	/^            template <typename T> inline T asinh_impl(const T v, real_type_tag) { return std::log(v + std::sqrt((v * v) + T(1))); }$/;"	f	namespace:exprtk::details::numeric::details
asn_addassignment	app/exprtk.h	/^      struct asn_addassignment$/;"	s	namespace:exprtk::details
asn_assignment	app/exprtk.h	/^      struct asn_assignment$/;"	s	namespace:exprtk::details
assign	app/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 *= t2; }$/;"	f	struct:exprtk::details::mul_op
assign	app/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 += t2; }$/;"	f	struct:exprtk::details::add_op
assign	app/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 -= t2; }$/;"	f	struct:exprtk::details::sub_op
assign	app/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 = numeric::modulus<T>(t1,t2); }$/;"	f	struct:exprtk::details::mod_op
assign	app/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 = numeric::pow<T>(t1,t2); }$/;"	f	struct:exprtk::details::pow_op
assign	app/exprtk.h	/^         static inline void assign(RefType t1, Type t2) { t1 \/= t2; }$/;"	f	struct:exprtk::details::div_op
assign	app/exprtk.h	/^      inline void assign(const parameter_list_t& pl)$/;"	f	class:exprtk::results_context
assign	app/exprtk.h	37902;"	d
assign_mesh_indices	algorithm/Mesh.h	/^  void assign_mesh_indices()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
assign_opr_to_string	app/exprtk.h	/^         std::string assign_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
assignment_disabled	app/exprtk.h	/^         bool assignment_disabled(const details::operator_type assignment_operation) const$/;"	f	class:exprtk::parser::settings_store
assignment_enabled	app/exprtk.h	/^         bool assignment_enabled(const details::operator_type& assignment) const$/;"	f	class:exprtk::parser::settings_store
assignment_name_list_	app/exprtk.h	/^         symbol_list_t assignment_name_list_;$/;"	m	class:exprtk::parser::dependent_entity_collector
assignment_node	app/exprtk.h	/^         assignment_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_node_t	app/exprtk.h	/^      typedef details::assignment_node<T>                 assignment_node_t;$/;"	t	class:exprtk::parser
assignment_op_node	app/exprtk.h	/^         assignment_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_ops_list	app/exprtk.h	/^      static const std::string assignment_ops_list[] =$/;"	m	namespace:exprtk::details
assignment_ops_list_size	app/exprtk.h	/^      static const std::size_t assignment_ops_list_size = sizeof(assignment_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
assignment_rebasevec_celem_node	app/exprtk.h	/^         assignment_rebasevec_celem_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_rebasevec_celem_node_t	app/exprtk.h	/^      typedef details::assignment_rebasevec_celem_node<T> assignment_rebasevec_celem_node_t;$/;"	t	class:exprtk::parser
assignment_rebasevec_celem_op_node	app/exprtk.h	/^         assignment_rebasevec_celem_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_rebasevec_elem_node	app/exprtk.h	/^         assignment_rebasevec_elem_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_rebasevec_elem_node_t	app/exprtk.h	/^      typedef details::assignment_rebasevec_elem_node<T>  assignment_rebasevec_elem_node_t;$/;"	t	class:exprtk::parser
assignment_rebasevec_elem_op_node	app/exprtk.h	/^         assignment_rebasevec_elem_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_string_node	app/exprtk.h	/^         assignment_string_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_string_node_t	app/exprtk.h	/^      typedef details::assignment_string_node<T>          assignment_string_node_t;$/;"	t	class:exprtk::parser
assignment_string_range_node	app/exprtk.h	/^         assignment_string_range_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_string_range_node_t	app/exprtk.h	/^      typedef details::assignment_string_range_node<T>    assignment_string_range_node_t;$/;"	t	class:exprtk::parser
assignment_symbols	app/exprtk.h	/^         inline std::size_t assignment_symbols(Sequence<symbol_t,Allocator>& assignment_list)$/;"	f	class:exprtk::parser::dependent_entity_collector
assignment_vec_elem_node	app/exprtk.h	/^         assignment_vec_elem_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vec_elem_node_t	app/exprtk.h	/^      typedef details::assignment_vec_elem_node<T>        assignment_vec_elem_node_t;$/;"	t	class:exprtk::parser
assignment_vec_elem_op_node	app/exprtk.h	/^         assignment_vec_elem_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vec_node	app/exprtk.h	/^         assignment_vec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vec_node_t	app/exprtk.h	/^      typedef details::assignment_vec_node<T>             assignment_vec_node_t;$/;"	t	class:exprtk::parser
assignment_vec_op_node	app/exprtk.h	/^         assignment_vec_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vecvec_node	app/exprtk.h	/^         assignment_vecvec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
assignment_vecvec_node_t	app/exprtk.h	/^      typedef details::assignment_vecvec_node<T>          assignment_vecvec_node_t;$/;"	t	class:exprtk::parser
assignment_vecvec_op_node	app/exprtk.h	/^         assignment_vecvec_op_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
at	app/exprtk.h	/^      all_true   <T> at;$/;"	m	struct:exprtk::rtl::vecops::package
atan2	app/exprtk.h	/^         inline T atan2(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
atan2_impl	app/exprtk.h	/^            inline T atan2_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
atan2_impl	app/exprtk.h	/^            inline T atan2_impl(const T, const T, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
atan_impl	app/exprtk.h	/^            template <typename T> inline T  atan_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
atan_impl	app/exprtk.h	/^            template <typename T> inline T  atan_impl(const T v, real_type_tag) { return std::atan (v); }$/;"	f	namespace:exprtk::details::numeric::details
atanh_impl	app/exprtk.h	/^            template <typename T> inline T atanh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
atanh_impl	app/exprtk.h	/^            template <typename T> inline T atanh_impl(const T v, real_type_tag) { return (std::log(T(1) + v) - std::log(T(1) - v)) \/ T(2); }$/;"	f	namespace:exprtk::details::numeric::details
auxiliary_symtab_list_	app/exprtk.h	/^      std::vector<symbol_table_t*> auxiliary_symtab_list_;$/;"	m	class:exprtk::function_compositor
axn	app/exprtk.h	/^      inline T axn(const T a, const T x)$/;"	f	namespace:exprtk::details
axnb	app/exprtk.h	/^      inline T axnb(const T a, const T x, const T b)$/;"	f	namespace:exprtk::details
axpby	app/exprtk.h	/^      axpby()$/;"	f	class:exprtk::rtl::vecops::axpby
axpby	app/exprtk.h	/^   class axpby : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpbyz	app/exprtk.h	/^      axpbyz()$/;"	f	class:exprtk::rtl::vecops::axpbyz
axpbyz	app/exprtk.h	/^   class axpbyz : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpbz	app/exprtk.h	/^      axpbz()$/;"	f	class:exprtk::rtl::vecops::axpbz
axpbz	app/exprtk.h	/^   class axpbz : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpy	app/exprtk.h	/^      axpy()$/;"	f	class:exprtk::rtl::vecops::axpy
axpy	app/exprtk.h	/^   class axpy : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
axpyz	app/exprtk.h	/^      axpyz()$/;"	f	class:exprtk::rtl::vecops::axpyz
axpyz	app/exprtk.h	/^   class axpyz : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
b	app/exprtk.h	/^                                        expression_node<T>* b,$/;"	m	namespace:exprtk::details
b	app/exprtk.h	/^         bool& b;$/;"	m	struct:exprtk::parser::scoped_bool_negator
b	app/exprtk.h	/^         bool& b;$/;"	m	struct:exprtk::parser::scoped_bool_or_restorer
b0	app/exprtk.h	/^                                expression_node<T>* b0,$/;"	m	namespace:exprtk::details
b1	algorithm/QuadLayer.h	/^  const std::vector<Vertex*>& b1() const { return b1_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
b1	algorithm/QuadLayer.h	/^  std::vector<Vertex*>& b1() { return b1_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
b1	app/exprtk.h	/^                                expression_node<T>* b1 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b1_axpby	app/exprtk.h	/^      axpby      <T> b1_axpby;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpbyz	app/exprtk.h	/^      axpbyz     <T> b1_axpbyz;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpbz	app/exprtk.h	/^      axpbz      <T> b1_axpbz;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpy	app/exprtk.h	/^      axpy       <T> b1_axpy;$/;"	m	struct:exprtk::rtl::vecops::package
b1_axpyz	app/exprtk.h	/^      axpyz      <T> b1_axpyz;$/;"	m	struct:exprtk::rtl::vecops::package
b2	algorithm/QuadLayer.h	/^  const std::vector<Vertex*>& b2() const { return b2_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
b2	algorithm/QuadLayer.h	/^  std::vector<Vertex*>& b2() { return b2_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
b2	app/exprtk.h	/^                                expression_node<T>* b2 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b3	app/exprtk.h	/^                                expression_node<T>* b3 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b4	app/exprtk.h	/^                                expression_node<T>* b4 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b5	app/exprtk.h	/^                                expression_node<T>* b5 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b6	app/exprtk.h	/^                                expression_node<T>* b6 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b7	app/exprtk.h	/^                                expression_node<T>* b7 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b8	app/exprtk.h	/^                                expression_node<T>* b8 = reinterpret_cast<expression_node<T>*>(0),$/;"	m	namespace:exprtk::details
b9	app/exprtk.h	/^                                expression_node<T>* b9 = reinterpret_cast<expression_node<T>*>(0))$/;"	m	namespace:exprtk::details
back	app/exprtk.h	/^         inline const type_store& back() const$/;"	f	class:exprtk::type_store::parameter_list
back	app/exprtk.h	/^         inline type_store& back()$/;"	f	class:exprtk::type_store::parameter_list
back	app/exprtk.h	/^      inline const char_t& back(const std::string& s)$/;"	f	namespace:exprtk::details
back	utils/Container.h	/^  T& back() $/;"	f	class:TQMesh::TQUtils::Container
back	utils/Container.h	/^  const T& back() const $/;"	f	class:TQMesh::TQUtils::Container
base	algorithm/Front.h	/^  Edge& base() { return *base_; }$/;"	f	class:TQMesh::TQAlgorithm::Front
base	algorithm/Front.h	/^  const Edge& base() const { return *base_; }$/;"	f	class:TQMesh::TQAlgorithm::Front
base	algorithm/Front.h	/^  void base(Edge& b) { base_ = &b; }$/;"	f	class:TQMesh::TQAlgorithm::Front
base	app/exprtk.h	/^         char_cptr base() const$/;"	f	class:exprtk::details::exprtk_final
base_	algorithm/Front.h	/^  Edge*   base_ = nullptr;$/;"	m	class:TQMesh::TQAlgorithm::Front
base_func	app/exprtk.h	/^         base_func(const std::size_t& pc = 0)$/;"	f	struct:exprtk::function_compositor::base_func
base_func	app/exprtk.h	/^      struct base_func : public exprtk::ifunction<T>$/;"	s	class:exprtk::function_compositor
base_function_list	app/exprtk.h	/^      static const std::string base_function_list[] =$/;"	m	namespace:exprtk::details
base_function_list_size	app/exprtk.h	/^      static const std::size_t base_function_list_size = sizeof(base_function_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
base_itr_	app/exprtk.h	/^         details::char_cptr base_itr_;$/;"	m	class:exprtk::lexer::generator
base_operation_t	app/exprtk.h	/^         base_operation_t(const operator_type t, const unsigned int& np)$/;"	f	struct:exprtk::details::base_operation_t
base_operation_t	app/exprtk.h	/^      struct base_operation_t$/;"	s	namespace:exprtk::details
base_opr_case	app/exprtk.h	22682;"	d
base_opr_case	app/exprtk.h	22694;"	d
base_ops_map_	app/exprtk.h	/^      base_ops_map_t base_ops_map_;$/;"	m	class:exprtk::parser
base_ops_map_t	app/exprtk.h	/^      typedef std::multimap<std::string,details::base_operation_t,details::ilesscompare> base_ops_map_t;$/;"	t	class:exprtk::parser
base_range_	app/exprtk.h	/^         mutable range_t     base_range_;$/;"	m	class:exprtk::details::exprtk_final
bases	algorithm/QuadLayer.h	/^  const std::vector<Edge*>& bases() const { return bases_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
bases	algorithm/QuadLayer.h	/^  std::vector<Edge*>& bases() { return bases_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
basic_opr_switch_statements	app/exprtk.h	30066;"	d
basic_opr_switch_statements	app/exprtk.h	35973;"	d
batch_eqineq_logic_case	app/exprtk.h	29823;"	d
batch_eqineq_logic_case	app/exprtk.h	29883;"	d
batch_size	app/exprtk.h	/^            unsigned int batch_size;$/;"	m	struct:exprtk::details::loop_unroll::details
bbox_max	utils/geometry.h	/^static inline Vec2<T> bbox_max(const Vec2<T>& a, const Vec2<T>& b)$/;"	f	namespace:TQMesh::TQUtils::TQGeom
bbox_min	utils/geometry.h	/^static inline Vec2<T> bbox_min(const Vec2<T>& a, const Vec2<T>& b)$/;"	f	namespace:TQMesh::TQUtils::TQGeom
begin	algorithm/Domain.h	/^  const_iterator begin() const { return boundaries_.begin(); }$/;"	f	class:TQMesh::TQAlgorithm::Domain
begin	algorithm/Domain.h	/^  iterator begin() { return boundaries_.begin(); }$/;"	f	class:TQMesh::TQAlgorithm::Domain
begin	algorithm/EdgeList.h	/^  const_iterator begin() const { return edges_.begin(); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
begin	algorithm/EdgeList.h	/^  iterator begin() { return edges_.begin(); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
begin	app/exprtk.h	/^         inline       value_t* begin()       { return data_; }$/;"	f	struct:exprtk::type_store::type_view
begin	app/exprtk.h	/^         inline const value_t* begin() const { return data_; }$/;"	f	struct:exprtk::type_store::type_view
begin	app/exprtk.h	/^         inline void begin()$/;"	f	class:exprtk::lexer::generator
begin	utils/Container.h	/^  const_iterator begin() const { return items_.begin(); }$/;"	f	class:TQMesh::TQUtils::Container
begin	utils/Container.h	/^  iterator begin() { return items_.begin(); }$/;"	f	class:TQMesh::TQUtils::Container
bft_	app/exprtk.h	/^         BaseFuncType& bft_;$/;"	m	struct:exprtk::function_compositor::scoped_bft
bfunc_t	app/exprtk.h	/^         typedef T (*bfunc_t)(Type t0, Type t1);$/;"	t	struct:exprtk::details::functor_t
bfunc_t	app/exprtk.h	/^         typedef typename functor_t::bfunc_t    bfunc_t;$/;"	t	class:exprtk::details::exprtk_final
bfunc_t	app/exprtk.h	/^         typedef typename functor_t::bfunc_t    bfunc_t;$/;"	t	struct:exprtk::details::T0oT1oT20T3process
bfunc_t	app/exprtk.h	/^         typedef typename functor_t::bfunc_t    bfunc_t;$/;"	t	struct:exprtk::details::T0oT1oT2process
binary_ext_node	app/exprtk.h	/^         binary_ext_node(expression_ptr branch0, expression_ptr branch1)$/;"	f	class:exprtk::details::exprtk_final
binary_functor_t	app/exprtk.h	/^         typedef typename functor_t::bfunc_t    binary_functor_t;$/;"	t	struct:exprtk::details::opr_base
binary_functor_t	app/exprtk.h	/^         typedef typename functor_t::bfunc_t binary_functor_t;$/;"	t	struct:exprtk::details::sf_base
binary_functor_t	app/exprtk.h	/^      typedef typename functor_t::bfunc_t    binary_functor_t;$/;"	t	class:exprtk::parser
binary_node	app/exprtk.h	/^         binary_node(const operator_type& opr,$/;"	f	class:exprtk::details::binary_node
binary_node	app/exprtk.h	/^      class binary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
binary_node_t	app/exprtk.h	/^      typedef details::binary_node<T>                     binary_node_t;$/;"	t	class:exprtk::parser
binary_op_map_	app/exprtk.h	/^         binary_op_map_t*         binary_op_map_;$/;"	m	class:exprtk::parser::expression_generator
binary_op_map_	app/exprtk.h	/^      binary_op_map_t binary_op_map_;$/;"	m	class:exprtk::parser
binary_op_map_t	app/exprtk.h	/^      typedef std::map<operator_t, binary_functor_t > binary_op_map_t;$/;"	t	class:exprtk::parser
binext_optimisable	app/exprtk.h	/^         inline bool binext_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
bipow_node	app/exprtk.h	/^         explicit bipow_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
bipowninv_node	app/exprtk.h	/^         explicit bipowninv_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
boc_base_node	app/exprtk.h	/^      class boc_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
boc_node	app/exprtk.h	/^         explicit boc_node(const expression_ptr branch, const T const_var)$/;"	f	class:exprtk::details::exprtk_final
boc_optimisable	app/exprtk.h	/^         inline bool boc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
body_	app/exprtk.h	/^         branch_t                      body_;$/;"	m	class:exprtk::details::exprtk_final
bound_length	app/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
bound_length	app/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon2
boundaries_	algorithm/Domain.h	/^  Vector           boundaries_;$/;"	m	class:TQMesh::TQAlgorithm::Domain
boundary_edges	algorithm/Mesh.h	/^  EdgeList& boundary_edges() { return bdry_edges_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
boundary_edges	algorithm/Mesh.h	/^  const EdgeList& boundary_edges() const { return bdry_edges_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
bov_base_node	app/exprtk.h	/^      class bov_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
bov_node	app/exprtk.h	/^         explicit bov_node(const expression_ptr branch, const T& var)$/;"	f	class:exprtk::details::exprtk_final
bov_optimisable	app/exprtk.h	/^         inline bool bov_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
bracket_check_enabled	app/exprtk.h	/^         bool bracket_check_enabled      () const { return enable_bracket_check_;      }$/;"	f	class:exprtk::parser::settings_store
bracket_checker	app/exprtk.h	/^            bracket_checker()$/;"	f	class:exprtk::lexer::helper::bracket_checker
bracket_checker	app/exprtk.h	/^         class bracket_checker : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
bracket_checker_	app/exprtk.h	/^      lexer::helper::bracket_checker            bracket_checker_;$/;"	m	class:exprtk::parser
branch	app/exprtk.h	/^         inline virtual expression_node<T>* branch(const std::size_t& index = 0) const$/;"	f	class:exprtk::details::expression_node
branch_	app/exprtk.h	/^         branch_t            branch_;$/;"	m	class:exprtk::details::exprtk_final
branch_	app/exprtk.h	/^         branch_t           branch_;$/;"	m	class:exprtk::details::exprtk_final
branch_	app/exprtk.h	/^         branch_t    branch_[N];$/;"	m	class:exprtk::details::exprtk_final
branch_	app/exprtk.h	/^         branch_t branch_;$/;"	m	class:exprtk::details::exprtk_final
branch_	app/exprtk.h	/^         branch_t branch_;$/;"	m	class:exprtk::details::unary_node
branch_	app/exprtk.h	/^         branch_t branch_[2];$/;"	m	class:exprtk::details::binary_node
branch_	app/exprtk.h	/^         branch_t branch_[2];$/;"	m	class:exprtk::details::exprtk_final
branch_	app/exprtk.h	/^         branch_t branch_[3];$/;"	m	class:exprtk::details::trinary_node
branch_	app/exprtk.h	/^         branch_t branch_[4];$/;"	m	class:exprtk::details::quaternary_node
branch_	app/exprtk.h	/^         std::vector<branch_t>         branch_;$/;"	m	class:exprtk::details::generic_function_node
branch_deletable	app/exprtk.h	/^      inline bool branch_deletable(expression_node<T>* node)$/;"	f	namespace:exprtk::details
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr, bool> branch_t;$/;"	t	class:exprtk::details::exprtk_final
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool>  branch_t;$/;"	t	class:exprtk::details::exprtk_final
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::binary_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::exprtk_final
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::for_loop_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::generic_function_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::quaternary_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::repeat_until_loop_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::switch_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::trinary_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::unary_node
branch_t	app/exprtk.h	/^         typedef std::pair<expression_ptr,bool> branch_t;$/;"	t	class:exprtk::details::while_loop_node
branch_to_id	app/exprtk.h	/^         inline std::string branch_to_id(expression_node_ptr branch) const$/;"	f	class:exprtk::parser::expression_generator
break_exception	app/exprtk.h	/^         explicit break_exception(const T& v)$/;"	f	class:exprtk::details::break_exception
break_exception	app/exprtk.h	/^      class break_exception$/;"	c	namespace:exprtk::details
break_node	app/exprtk.h	/^         break_node(expression_ptr ret = expression_ptr(0))$/;"	f	class:exprtk::details::exprtk_final
brkcnt_list_	app/exprtk.h	/^      std::deque<bool> brkcnt_list_;$/;"	m	class:exprtk::parser
btype_	algorithm/Boundary.h	/^  BdryType   btype_;$/;"	m	class:TQMesh::TQAlgorithm::Boundary
buffer	app/exprtk.h	/^         uchar_t buffer[64];$/;"	m	class:exprtk::details::vector_holder
build_string	app/exprtk.h	/^         build_string(const std::size_t& initial_size = 64)$/;"	f	class:exprtk::details::build_string
build_string	app/exprtk.h	/^      class build_string$/;"	c	namespace:exprtk::details
c	app/exprtk.h	/^      close  <T> c;$/;"	m	struct:exprtk::rtl::io::file::package
c	app/exprtk.h	/^      count      <T>  c;$/;"	m	struct:exprtk::rtl::vecops::package
c_	app/exprtk.h	/^         const T  c_;$/;"	m	class:exprtk::details::exprtk_final
cache	app/exprtk.h	/^         mutable cached_range_t             cache;$/;"	m	struct:exprtk::details::range_pack
cache_size	app/exprtk.h	/^         inline std::size_t cache_size() const$/;"	f	struct:exprtk::details::range_pack
cached_range_t	app/exprtk.h	/^         typedef std::pair<std::size_t,std::size_t> cached_range_t;$/;"	t	struct:exprtk::details::range_pack
calc_angles	algorithm/Quad.h	/^  void calc_angles()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_angles	algorithm/Triangle.h	/^  void calc_angles()$/;"	f	class:TQMesh::TQAlgorithm::Triangle
calc_area	algorithm/Quad.h	/^  void calc_area()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_area	algorithm/Triangle.h	/^  void calc_area()$/;"	f	class:TQMesh::TQAlgorithm::Triangle
calc_centroid	algorithm/Quad.h	/^  void calc_centroid()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_centroid	algorithm/Triangle.h	/^  void calc_centroid()$/;"	f	class:TQMesh::TQAlgorithm::Triangle
calc_circumcenter	algorithm/Quad.h	/^  void calc_circumcenter()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_circumcenter	algorithm/Triangle.h	/^  void calc_circumcenter()$/;"	f	class:TQMesh::TQAlgorithm::Triangle
calc_edgelengths	algorithm/Quad.h	/^  void calc_edgelengths()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_edgelengths	algorithm/Triangle.h	/^  void calc_edgelengths()$/;"	f	class:TQMesh::TQAlgorithm::Triangle
calc_quality	algorithm/Quad.h	/^  void calc_quality()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_shape_factor	algorithm/Quad.h	/^  void calc_shape_factor()$/;"	f	class:TQMesh::TQAlgorithm::Quad
calc_shape_factor	algorithm/Triangle.h	/^  void calc_shape_factor()$/;"	f	class:TQMesh::TQAlgorithm::Triangle
cardinal_pow_optimisable	app/exprtk.h	/^         inline bool cardinal_pow_optimisable(const details::operator_type& operation, const T& c) const$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisable	app/exprtk.h	/^         inline bool cardinal_pow_optimisable(const details::operator_type&, const T&)$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisation	app/exprtk.h	/^         inline expression_node_ptr cardinal_pow_optimisation(T&, const T&)$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisation	app/exprtk.h	/^         inline expression_node_ptr cardinal_pow_optimisation(const T& v, const T& c)$/;"	f	class:exprtk::parser::expression_generator
cardinal_pow_optimisation_impl	app/exprtk.h	/^         inline expression_node_ptr cardinal_pow_optimisation_impl(const TType& v, const unsigned int& p)$/;"	f	class:exprtk::parser::expression_generator
case_normalise	app/exprtk.h	/^      inline void case_normalise(std::string& s)$/;"	f	namespace:exprtk::details
case_normalise	app/exprtk.h	/^      inline void case_normalise(std::string&)$/;"	f	namespace:exprtk::details
case_stmt	app/exprtk.h	10571;"	d
case_stmt	app/exprtk.h	10588;"	d
case_stmt	app/exprtk.h	10726;"	d
case_stmt	app/exprtk.h	10743;"	d
case_stmt	app/exprtk.h	11005;"	d
case_stmt	app/exprtk.h	11022;"	d
case_stmt	app/exprtk.h	11160;"	d
case_stmt	app/exprtk.h	11177;"	d
case_stmt	app/exprtk.h	11353;"	d
case_stmt	app/exprtk.h	11370;"	d
case_stmt	app/exprtk.h	11514;"	d
case_stmt	app/exprtk.h	11531;"	d
case_stmt	app/exprtk.h	11673;"	d
case_stmt	app/exprtk.h	11690;"	d
case_stmt	app/exprtk.h	11828;"	d
case_stmt	app/exprtk.h	11845;"	d
case_stmt	app/exprtk.h	13997;"	d
case_stmt	app/exprtk.h	14013;"	d
case_stmt	app/exprtk.h	14049;"	d
case_stmt	app/exprtk.h	14066;"	d
case_stmt	app/exprtk.h	14098;"	d
case_stmt	app/exprtk.h	14114;"	d
case_stmt	app/exprtk.h	14150;"	d
case_stmt	app/exprtk.h	14167;"	d
case_stmt	app/exprtk.h	28639;"	d
case_stmt	app/exprtk.h	28735;"	d
case_stmt	app/exprtk.h	28758;"	d
case_stmt	app/exprtk.h	28771;"	d
case_stmt	app/exprtk.h	28842;"	d
case_stmt	app/exprtk.h	28847;"	d
case_stmt	app/exprtk.h	28857;"	d
case_stmt	app/exprtk.h	28863;"	d
case_stmt	app/exprtk.h	28873;"	d
case_stmt	app/exprtk.h	28878;"	d
case_stmt	app/exprtk.h	28890;"	d
case_stmt	app/exprtk.h	28908;"	d
case_stmt	app/exprtk.h	28929;"	d
case_stmt	app/exprtk.h	28946;"	d
case_stmt	app/exprtk.h	28963;"	d
case_stmt	app/exprtk.h	28980;"	d
case_stmt	app/exprtk.h	28992;"	d
case_stmt	app/exprtk.h	29011;"	d
case_stmt	app/exprtk.h	29033;"	d
case_stmt	app/exprtk.h	29051;"	d
case_stmt	app/exprtk.h	29066;"	d
case_stmt	app/exprtk.h	29084;"	d
case_stmt	app/exprtk.h	29097;"	d
case_stmt	app/exprtk.h	29111;"	d
case_stmt	app/exprtk.h	29139;"	d
case_stmt	app/exprtk.h	29151;"	d
case_stmt	app/exprtk.h	29164;"	d
case_stmt	app/exprtk.h	29173;"	d
case_stmt	app/exprtk.h	29211;"	d
case_stmt	app/exprtk.h	29223;"	d
case_stmt	app/exprtk.h	29681;"	d
case_stmt	app/exprtk.h	29691;"	d
case_stmt	app/exprtk.h	29701;"	d
case_stmt	app/exprtk.h	29711;"	d
case_stmt	app/exprtk.h	29721;"	d
case_stmt	app/exprtk.h	29731;"	d
case_stmt	app/exprtk.h	29741;"	d
case_stmt	app/exprtk.h	29751;"	d
case_stmt	app/exprtk.h	29763;"	d
case_stmt	app/exprtk.h	29773;"	d
case_stmt	app/exprtk.h	29781;"	d
case_stmt	app/exprtk.h	29791;"	d
case_stmt	app/exprtk.h	29842;"	d
case_stmt	app/exprtk.h	29848;"	d
case_stmt	app/exprtk.h	29856;"	d
case_stmt	app/exprtk.h	29862;"	d
case_stmt	app/exprtk.h	29870;"	d
case_stmt	app/exprtk.h	29876;"	d
case_stmt	app/exprtk.h	29903;"	d
case_stmt	app/exprtk.h	29910;"	d
case_stmt	app/exprtk.h	29918;"	d
case_stmt	app/exprtk.h	29925;"	d
case_stmt	app/exprtk.h	29933;"	d
case_stmt	app/exprtk.h	29939;"	d
case_stmt	app/exprtk.h	30094;"	d
case_stmt	app/exprtk.h	30113;"	d
case_stmt	app/exprtk.h	30317;"	d
case_stmt	app/exprtk.h	30324;"	d
case_stmt	app/exprtk.h	30392;"	d
case_stmt	app/exprtk.h	30399;"	d
case_stmt	app/exprtk.h	30478;"	d
case_stmt	app/exprtk.h	30485;"	d
case_stmt	app/exprtk.h	30616;"	d
case_stmt	app/exprtk.h	30623;"	d
case_stmt	app/exprtk.h	30735;"	d
case_stmt	app/exprtk.h	30742;"	d
case_stmt	app/exprtk.h	31144;"	d
case_stmt	app/exprtk.h	31151;"	d
case_stmt	app/exprtk.h	31179;"	d
case_stmt	app/exprtk.h	31186;"	d
case_stmt	app/exprtk.h	31223;"	d
case_stmt	app/exprtk.h	31230;"	d
case_stmt	app/exprtk.h	31245;"	d
case_stmt	app/exprtk.h	31257;"	d
case_stmt	app/exprtk.h	35997;"	d
case_stmt	app/exprtk.h	36003;"	d
case_stmt	app/exprtk.h	36015;"	d
case_stmt	app/exprtk.h	36021;"	d
case_stmt	app/exprtk.h	36033;"	d
case_stmt	app/exprtk.h	36039;"	d
case_stmt	app/exprtk.h	36049;"	d
case_stmt	app/exprtk.h	36054;"	d
case_stmt	app/exprtk.h	36292;"	d
case_stmt	app/exprtk.h	36298;"	d
case_stmt	app/exprtk.h	38485;"	d
case_stmt	app/exprtk.h	38496;"	d
case_stmt	app/exprtk.h	9024;"	d
case_stmt	app/exprtk.h	9041;"	d
case_stmt0	app/exprtk.h	31288;"	d
case_stmt0	app/exprtk.h	31323;"	d
case_stmt1	app/exprtk.h	31292;"	d
case_stmt1	app/exprtk.h	31324;"	d
catch	app/unused.c	/^  catch( ... )$/;"	f
ceil_impl	app/exprtk.h	/^            template <typename T> inline T  ceil_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
ceil_impl	app/exprtk.h	/^            template <typename T> inline T  ceil_impl(const T v, real_type_tag) { return std::ceil (v); }$/;"	f	namespace:exprtk::details::numeric::details
center	utils/QTree.h	/^  const Vec2<V>& center() const { return center_; }$/;"	f	class:TQMesh::TQUtils::QTree
char_cptr	app/exprtk.h	/^      typedef char_t const*          char_cptr;$/;"	t	namespace:exprtk::details
char_ptr	app/exprtk.h	/^      typedef char_t*                char_ptr;$/;"	t	namespace:exprtk::details
char_t	app/exprtk.h	/^         typedef details::char_t char_t;$/;"	t	class:exprtk::lexer::generator
char_t	app/exprtk.h	/^      typedef char                   char_t;$/;"	t	namespace:exprtk::details
check	app/exprtk.h	/^         inline bool check() const$/;"	f	struct:exprtk::details::loop_runtime_checker
check_orientation	algorithm/EdgeList.h	/^  bool check_orientation()$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
check_remove_boundary_edge	algorithm/Mesh.h	/^  inline void check_remove_boundary_edge(Edge& e)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_remove_interior_edge	algorithm/Mesh.h	/^  inline void check_remove_interior_edge(Edge& e)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_remove_quad	algorithm/Mesh.h	/^  inline void check_remove_quad(Quad& q)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_remove_triangle	algorithm/Mesh.h	/^  inline void check_remove_triangle(Triangle& t)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_remove_vertex	algorithm/Mesh.h	/^  inline void check_remove_vertex(Vertex& v)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_triangle	algorithm/Mesh.h	/^  bool check_triangle(const Triangle& tri)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_vertex	algorithm/Mesh.h	/^  bool check_vertex(const Vertex& v)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
check_vertex_candidates	algorithm/Mesh.h	/^  void check_vertex_candidates(const VertexVector& vertex_candidates,$/;"	f	class:TQMesh::TQAlgorithm::Mesh
children	utils/QTree.h	/^  const Array& children() const { return children_; }$/;"	f	class:TQMesh::TQUtils::QTree
choose_best_triangle	algorithm/Mesh.h	/^  Triangle* choose_best_triangle(TriVector& new_triangles,$/;"	f	class:TQMesh::TQAlgorithm::Mesh
circumcenter	algorithm/Quad.h	/^  const Vec2d& circumcenter() const { return circ_centr_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
circumcenter	algorithm/Triangle.h	/^  const Vec2d& circumcenter() const { return circ_centr_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
circumradius	algorithm/Quad.h	/^  double circumradius() const { return circ_radius_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
circumradius	algorithm/Triangle.h	/^  double circumradius() const { return circ_radius_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
cis_match	app/exprtk.h	/^      struct cis_match$/;"	s	namespace:exprtk::details
clean_double_quad_edges	algorithm/Mesh.h	/^  void clean_double_quad_edges()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
clean_double_triangle_edges	algorithm/Mesh.h	/^  void clean_double_triangle_edges()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
cleanup	app/exprtk.h	/^         inline void cleanup()$/;"	f	class:exprtk::parser::scope_element_manager
cleanup_escapes	app/exprtk.h	/^      inline bool cleanup_escapes(std::string& s)$/;"	f	namespace:exprtk::details
clear	app/exprtk.h	/^            void clear()$/;"	f	class:exprtk::lexer::helper::symbol_replacer
clear	app/exprtk.h	/^         inline void clear()$/;"	f	class:exprtk::lexer::generator
clear	app/exprtk.h	/^         inline void clear()$/;"	f	struct:exprtk::parser::symtab_store
clear	app/exprtk.h	/^         inline void clear(const bool delete_node = true)$/;"	f	struct:exprtk::symbol_table::type_store
clear	app/exprtk.h	/^         void clear()$/;"	f	class:exprtk::parser::dependent_entity_collector
clear	app/exprtk.h	/^         void clear()$/;"	f	struct:exprtk::details::range_pack
clear	app/exprtk.h	/^         void clear()$/;"	f	struct:exprtk::lexer::token
clear	app/exprtk.h	/^         void clear()$/;"	f	struct:exprtk::parser::scope_element
clear	app/exprtk.h	/^      inline void clear()$/;"	f	class:exprtk::results_context
clear	app/exprtk.h	/^      inline void clear()$/;"	f	class:exprtk::symbol_table
clear	app/exprtk.h	/^      void clear()$/;"	f	class:exprtk::function_compositor
clear_edges	algorithm/EdgeList.h	/^  void clear_edges()$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
clear_errors	app/exprtk.h	/^            void clear_errors()$/;"	f	class:exprtk::lexer::helper::numeric_checker
clear_errors	app/exprtk.h	/^            void clear_errors()$/;"	f	class:exprtk::lexer::helper::sequence_validator
clear_errors	app/exprtk.h	/^            void clear_errors()$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
clear_functions	app/exprtk.h	/^      inline void clear_functions()$/;"	f	class:exprtk::symbol_table
clear_local_constants	app/exprtk.h	/^      inline void clear_local_constants()$/;"	f	class:exprtk::symbol_table
clear_loop_runtime_check	app/exprtk.h	/^      inline void clear_loop_runtime_check()$/;"	f	class:exprtk::parser
clear_stack	app/exprtk.h	/^         inline void clear_stack()$/;"	f	struct:exprtk::function_compositor::base_func
clear_strings	app/exprtk.h	/^      inline void clear_strings()$/;"	f	class:exprtk::symbol_table
clear_variables	app/exprtk.h	/^      inline void clear_variables(const bool delete_node = true)$/;"	f	class:exprtk::symbol_table
clear_vectors	app/exprtk.h	/^      inline void clear_vectors()$/;"	f	class:exprtk::symbol_table
clear_waste	algorithm/EdgeList.h	/^  void clear_waste()$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
clear_waste	algorithm/Mesh.h	/^  void clear_waste()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
clear_waste	utils/Container.h	/^  void clear_waste() { waste_.clear(); }$/;"	f	class:TQMesh::TQUtils::Container
clock_frequency_	app/exprtk.h	/^         LARGE_INTEGER clock_frequency_;$/;"	m	class:exprtk::timer
close	app/exprtk.h	/^         bool close()$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
close	app/exprtk.h	/^         void close(Ptr& p)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
close	app/exprtk.h	/^      close()$/;"	f	struct:exprtk::rtl::io::file::close
close	app/exprtk.h	/^   struct close : public exprtk::ifunction<T>$/;"	s	namespace:exprtk::rtl::io::file
cmp	app/exprtk.h	/^         static inline bool cmp(const char_t c0, const char_t c1)$/;"	f	struct:exprtk::details::cis_match
cmp	app/exprtk.h	/^         static inline bool cmp(const char_t c0, const char_t c1)$/;"	f	struct:exprtk::details::cs_match
cntrl_blck_ptr_t	app/exprtk.h	/^         typedef control_block*         cntrl_blck_ptr_t;$/;"	t	struct:exprtk::expression::control_block
cntrl_struct_list	app/exprtk.h	/^      static const std::string cntrl_struct_list[] =$/;"	m	namespace:exprtk::details
cntrl_struct_list_size	app/exprtk.h	/^      static const std::size_t cntrl_struct_list_size = sizeof(cntrl_struct_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
cob_base_node	app/exprtk.h	/^      class cob_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
cob_node	app/exprtk.h	/^         explicit cob_node(const T const_var, const expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
cob_optimisable	app/exprtk.h	/^         inline bool cob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
coboc_optimisable	app/exprtk.h	/^         inline bool coboc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
cocob_optimisable	app/exprtk.h	/^         inline bool cocob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
cocov_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, const_t, const_t, cref_t > cocov_t;$/;"	t	class:exprtk::parser
collect	app/exprtk.h	/^         void collect(Node*& node,$/;"	f	struct:exprtk::details::node_depth_base
collect	app/exprtk.h	/^         void collect(const Sequence<nb_pair_t, Allocator>& branch,$/;"	f	struct:exprtk::details::node_depth_base
collect	app/exprtk.h	/^         void collect(const Sequence<node_ptr_t, Allocator>& branch_list,$/;"	f	struct:exprtk::details::node_depth_base
collect	app/exprtk.h	/^         void collect(const Sequence<node_ptr_t, AllocatorT>& branch_list,$/;"	f	struct:exprtk::details::node_depth_base
collect	app/exprtk.h	/^         void collect(const nb_pair_t& branch,$/;"	f	struct:exprtk::details::node_depth_base
collect	app/exprtk.h	/^         void collect(node_ptr_t const& node,$/;"	f	struct:exprtk::details::node_depth_base
collect_assignments	app/exprtk.h	/^         bool& collect_assignments()$/;"	f	class:exprtk::parser::dependent_entity_collector
collect_assignments_	app/exprtk.h	/^         bool collect_assignments_;$/;"	m	class:exprtk::parser::dependent_entity_collector
collect_assignments_enabled	app/exprtk.h	/^         bool collect_assignments_enabled() const { return enable_collect_assings_;    }$/;"	f	class:exprtk::parser::settings_store
collect_functions	app/exprtk.h	/^         bool& collect_functions()$/;"	f	class:exprtk::parser::dependent_entity_collector
collect_functions	app/exprtk.h	/^   inline bool collect_functions(const std::string& expression,$/;"	f	namespace:exprtk
collect_functions_	app/exprtk.h	/^         bool collect_functions_;$/;"	m	class:exprtk::parser::dependent_entity_collector
collect_functions_enabled	app/exprtk.h	/^         bool collect_functions_enabled  () const { return enable_collect_funcs_;      }$/;"	f	class:exprtk::parser::settings_store
collect_nodes	app/exprtk.h	/^         static void collect_nodes(node_ptr_t& root, noderef_list_t& node_delete_list)$/;"	f	class:exprtk::details::node_collection_destructor
collect_nodes	app/exprtk.h	/^         virtual void collect_nodes(noderef_list_t&) {}$/;"	f	struct:exprtk::details::node_collector_interface
collect_type	app/exprtk.h	/^      enum collect_type$/;"	g	class:exprtk::parser
collect_variables	app/exprtk.h	/^         bool& collect_variables()$/;"	f	class:exprtk::parser::dependent_entity_collector
collect_variables	app/exprtk.h	/^   inline bool collect_variables(const std::string& expression,$/;"	f	namespace:exprtk
collect_variables_	app/exprtk.h	/^         bool collect_variables_;$/;"	m	class:exprtk::parser::dependent_entity_collector
collect_variables_enabled	app/exprtk.h	/^         bool collect_variables_enabled  () const { return enable_collect_vars_;       }$/;"	f	class:exprtk::parser::settings_store
collection_pass	app/exprtk.h	/^         static inline bool collection_pass(const std::string& expression_string,$/;"	f	struct:exprtk::details::collector_helper
collector_helper	app/exprtk.h	/^      struct collector_helper$/;"	s	namespace:exprtk::details
color	algorithm/Quad.h	/^  int color() const { return color_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
color	algorithm/Quad.h	/^  void color(int c){ color_ = c; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
color	algorithm/Triangle.h	/^  int color() const { return color_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
color	algorithm/Triangle.h	/^  void color(int c){ color_ = c; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
column_no	app/exprtk.h	/^         std::size_t column_no;$/;"	m	struct:exprtk::parser_error::type
columns	utils/ParaReader.h	/^  size_t columns() const { return ncol_; }$/;"	f	class:CppUtils::Parameter
columns	utils/oldParaReader.h	/^  size_t columns() const { return ncol_; }$/;"	f	class:ListParameter
columns	utils/oldParaReader.h	/^  void columns(size_t i) { ncol_ = i; }$/;"	f	class:ListParameter
comment_	utils/ParaReader.h	/^  string          comment_;$/;"	m	class:CppUtils::ParaReader
comment_	utils/oldParaReader.h	/^  string          comment_;$/;"	m	class:ParaReader
commutative_check_enabled	app/exprtk.h	/^         bool commutative_check_enabled  () const { return enable_commutative_check_;  }$/;"	f	class:exprtk::parser::settings_store
commutative_inserter	app/exprtk.h	/^            commutative_inserter()$/;"	f	class:exprtk::lexer::helper::commutative_inserter
commutative_inserter	app/exprtk.h	/^         class commutative_inserter : public lexer::token_inserter$/;"	c	namespace:exprtk::lexer::helper
commutative_inserter_	app/exprtk.h	/^      lexer::helper::commutative_inserter       commutative_inserter_;$/;"	m	class:exprtk::parser
compile	app/exprtk.h	/^            static inline bool compile(expression_generator<Type>& expr_gen, const std::string& id,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf3ext_expression
compile	app/exprtk.h	/^            static inline bool compile(expression_generator<Type>& expr_gen, const std::string& id,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile	app/exprtk.h	/^      inline bool compile(const std::string& expression_string, expression<T>& expr)$/;"	f	class:exprtk::parser
compile	app/exprtk.h	/^      inline expression_t compile(const std::string& expression_string, symbol_table_t& symtab)$/;"	f	class:exprtk::parser
compile_all_opts	app/exprtk.h	/^         static const std::size_t compile_all_opts =$/;"	m	class:exprtk::parser::settings_store
compile_expression	app/exprtk.h	/^      bool compile_expression(const std::string& name,$/;"	f	class:exprtk::function_compositor
compile_left	app/exprtk.h	/^            static inline bool compile_left(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile_left_impl	app/exprtk.h	/^            static inline bool compile_left_impl(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile_right	app/exprtk.h	/^            static inline bool compile_right(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
compile_right_impl	app/exprtk.h	/^            static inline bool compile_right_impl(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
complex_type_tag	app/exprtk.h	/^            struct complex_type_tag { complex_type_tag() {} };$/;"	f	struct:exprtk::details::numeric::details::complex_type_tag
complex_type_tag	app/exprtk.h	/^            struct complex_type_tag { complex_type_tag() {} };$/;"	s	namespace:exprtk::details::numeric::details
compositor_t	app/exprtk.h	/^      typedef function_compositor<T>  compositor_t;$/;"	t	struct:exprtk::type_defs
compute	app/exprtk.h	/^   inline bool compute(const std::string& expression_string, T& result)$/;"	f	namespace:exprtk
compute	app/exprtk.h	/^   inline bool compute(const std::string& expression_string,$/;"	f	namespace:exprtk
compute_area	algorithm/EdgeList.h	/^  void compute_area()$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
compute_node_depth	app/exprtk.h	/^         std::size_t compute_node_depth(const BranchType& n0, const BranchType& n1) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	app/exprtk.h	/^         std::size_t compute_node_depth(const BranchType& n0, const BranchType& n1,$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	app/exprtk.h	/^         std::size_t compute_node_depth(const Node* const& node) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	app/exprtk.h	/^         std::size_t compute_node_depth(const Sequence<nb_pair_t,Allocator>& branch_list) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	app/exprtk.h	/^         std::size_t compute_node_depth(const Sequence<node_ptr_t, Allocator>& branch_list) const$/;"	f	struct:exprtk::details::node_depth_base
compute_node_depth	app/exprtk.h	/^         std::size_t compute_node_depth(const nb_pair_t& branch) const$/;"	f	struct:exprtk::details::node_depth_base
compute_pow10	app/exprtk.h	/^      inline T compute_pow10(T d, const int exponent)$/;"	f	namespace:exprtk::details
condition_	app/exprtk.h	/^         branch_t condition_  ;$/;"	m	class:exprtk::details::for_loop_node
condition_	app/exprtk.h	/^         branch_t condition_;$/;"	m	class:exprtk::details::exprtk_final
condition_	app/exprtk.h	/^         branch_t condition_;$/;"	m	class:exprtk::details::repeat_until_loop_node
condition_	app/exprtk.h	/^         branch_t condition_;$/;"	m	class:exprtk::details::while_loop_node
condition_	app/exprtk.h	/^         expression_ptr condition_;$/;"	m	class:exprtk::details::exprtk_final
conditional	app/exprtk.h	/^         inline expression_node_ptr conditional(expression_node_ptr condition,$/;"	f	class:exprtk::parser::expression_generator
conditional_node	app/exprtk.h	/^         conditional_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
conditional_node_t	app/exprtk.h	/^      typedef details::conditional_node<T>                conditional_node_t;$/;"	t	class:exprtk::parser
conditional_string	app/exprtk.h	/^         inline expression_node_ptr conditional_string(expression_node_ptr condition,$/;"	f	class:exprtk::parser::expression_generator
conditional_string	app/exprtk.h	/^         inline expression_node_ptr conditional_string(expression_node_ptr,$/;"	f	class:exprtk::parser::expression_generator
conditional_string_node	app/exprtk.h	/^         conditional_string_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
conditional_string_node_t	app/exprtk.h	/^      typedef details::conditional_string_node<T>         conditional_string_node_t;$/;"	t	class:exprtk::parser
conditional_vector	app/exprtk.h	/^         inline expression_node_ptr conditional_vector(expression_node_ptr condition,$/;"	f	class:exprtk::parser::expression_generator
conditional_vector_node	app/exprtk.h	/^         conditional_vector_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
conditional_vector_node_t	app/exprtk.h	/^      typedef details::conditional_vector_node<T>         conditional_vector_node_t;$/;"	t	class:exprtk::parser
cons_conditional_node	app/exprtk.h	/^         cons_conditional_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
cons_conditional_node_t	app/exprtk.h	/^      typedef details::cons_conditional_node<T>           cons_conditional_node_t;$/;"	t	class:exprtk::parser
cons_conditional_str_node	app/exprtk.h	/^         cons_conditional_str_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
cons_conditional_str_node_t	app/exprtk.h	/^      typedef details::cons_conditional_str_node<T>       cons_conditional_str_node_t;$/;"	t	class:exprtk::parser
consequent_	app/exprtk.h	/^         branch_t consequent_;$/;"	m	class:exprtk::details::exprtk_final
consequent_	app/exprtk.h	/^         expression_ptr consequent_;$/;"	m	class:exprtk::details::exprtk_final
consequent_node_ptr_	app/exprtk.h	/^         vector_node_ptr   consequent_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
const_e_impl	app/exprtk.h	/^            template <typename T> inline T    const_e_impl(real_type_tag) { return T(numeric::constant::e);             }$/;"	f	namespace:exprtk::details::numeric::details
const_optimise_mswitch	app/exprtk.h	/^         inline expression_node_ptr const_optimise_mswitch(Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
const_optimise_sf3	app/exprtk.h	/^         inline expression_node_ptr const_optimise_sf3(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
const_optimise_sf4	app/exprtk.h	/^         inline expression_node_ptr const_optimise_sf4(const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
const_optimise_switch	app/exprtk.h	/^         inline expression_node_ptr const_optimise_switch(Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
const_optimise_varargfunc	app/exprtk.h	/^         inline expression_node_ptr const_optimise_varargfunc(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
const_pi_impl	app/exprtk.h	/^            template <typename T> inline T   const_pi_impl(real_type_tag) { return T(numeric::constant::pi);            }$/;"	f	namespace:exprtk::details::numeric::details
const_qnan_impl	app/exprtk.h	/^            template <typename T> inline T const_qnan_impl(real_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
const_range	app/exprtk.h	/^         bool const_range() const$/;"	f	struct:exprtk::details::range_pack
const_size	app/exprtk.h	/^         inline std::size_t const_size() const$/;"	f	struct:exprtk::details::range_pack
const_string_range_node	app/exprtk.h	/^         explicit const_string_range_node(const std::string& v, const range_t& rp)$/;"	f	class:exprtk::details::exprtk_final
const_string_range_node_t	app/exprtk.h	/^      typedef details::const_string_range_node<T>         const_string_range_node_t;$/;"	t	class:exprtk::parser
const_t	app/exprtk.h	/^      typedef const T                                     const_t;$/;"	t	class:exprtk::parser
const_value_ptr	app/exprtk.h	/^         typedef const value_ptr const_value_ptr;$/;"	t	class:exprtk::details::vector_holder
constant	app/exprtk.h	/^         namespace constant$/;"	n	namespace:exprtk::details::numeric
construct_branch_pair	app/exprtk.h	/^      inline void construct_branch_pair(std::pair<expression_node<T>*,bool>& branch, expression_node<T>* b)$/;"	f	namespace:exprtk::details
construct_subexpr	app/exprtk.h	/^      std::string construct_subexpr(lexer::token& begin_token, lexer::token& end_token)$/;"	f	class:exprtk::parser
container_destructor	algorithm/Edge.h	/^  void container_destructor() $/;"	f	class:TQMesh::TQAlgorithm::Edge
container_destructor	algorithm/Quad.h	/^  void container_destructor() $/;"	f	class:TQMesh::TQAlgorithm::Quad
container_destructor	algorithm/Triangle.h	/^  void container_destructor() $/;"	f	class:TQMesh::TQAlgorithm::Triangle
container_destructor	algorithm/Vertex.h	/^  void container_destructor() {}$/;"	f	class:TQMesh::TQAlgorithm::Vertex
container_destructor	tests/container_test.cpp	/^  void container_destructor() {}$/;"	f	class:ContainerTests::Vertex	file:
container_destructor	tests/container_test.cpp	/^  void container_destructor()$/;"	f	class:ContainerTests::Edge	file:
continue_exception	app/exprtk.h	/^      class continue_exception$/;"	c	namespace:exprtk::details
control_block	app/exprtk.h	/^            control_block()$/;"	f	struct:exprtk::details::vec_data_store::control_block
control_block	app/exprtk.h	/^            control_block(const std::size_t& dsize, data_t dptr, bool dstrct = false)$/;"	f	struct:exprtk::details::vec_data_store::control_block
control_block	app/exprtk.h	/^            explicit control_block(const std::size_t& dsize)$/;"	f	struct:exprtk::details::vec_data_store::control_block
control_block	app/exprtk.h	/^         control_block()$/;"	f	struct:exprtk::expression::control_block
control_block	app/exprtk.h	/^         control_block()$/;"	f	struct:exprtk::symbol_table::control_block
control_block	app/exprtk.h	/^         explicit control_block(expression_ptr e)$/;"	f	struct:exprtk::expression::control_block
control_block	app/exprtk.h	/^         explicit control_block(st_data* data)$/;"	f	struct:exprtk::symbol_table::control_block
control_block	app/exprtk.h	/^         struct control_block$/;"	s	class:exprtk::details::vec_data_store
control_block	app/exprtk.h	/^      struct control_block$/;"	s	class:exprtk::expression
control_block	app/exprtk.h	/^      struct control_block$/;"	s	class:exprtk::symbol_table
control_block_	app/exprtk.h	/^         control_block* control_block_;$/;"	m	class:exprtk::details::vec_data_store
control_block_	app/exprtk.h	/^      control_block* control_block_;$/;"	m	class:exprtk::expression
control_block_	app/exprtk.h	/^      control_block* control_block_;$/;"	m	class:exprtk::symbol_table
control_struct_disabled	app/exprtk.h	/^         bool control_struct_disabled(const std::string& control_struct) const$/;"	f	class:exprtk::parser::settings_store
control_struct_enabled	app/exprtk.h	/^         bool control_struct_enabled(const std::string& control_struct) const$/;"	f	class:exprtk::parser::settings_store
copy	app/exprtk.h	/^         void copy(const lvr_vec_t& src_v, var_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	app/exprtk.h	/^         void copy(const var_t& src_v, lvr_vec_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	app/exprtk.h	/^         void copy(const var_t& src_v, varref_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	app/exprtk.h	/^         void copy(const varref_t& src_v, var_t& dest_v)$/;"	f	struct:exprtk::function_compositor::base_func
copy	app/exprtk.h	/^      copy()$/;"	f	class:exprtk::rtl::vecops::copy
copy	app/exprtk.h	/^   class copy : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
cos_impl	app/exprtk.h	/^            template <typename T> inline T   cos_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
cos_impl	app/exprtk.h	/^            template <typename T> inline T   cos_impl(const T v, real_type_tag) { return std::cos  (v); }$/;"	f	namespace:exprtk::details::numeric::details
cosh_impl	app/exprtk.h	/^            template <typename T> inline T  cosh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
cosh_impl	app/exprtk.h	/^            template <typename T> inline T  cosh_impl(const T v, real_type_tag) { return std::cosh (v); }$/;"	f	namespace:exprtk::details::numeric::details
cot_impl	app/exprtk.h	/^            template <typename T> inline T   cot_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
cot_impl	app/exprtk.h	/^            template <typename T> inline T   cot_impl(const T v, real_type_tag) { return T(1) \/ std::tan(v); }$/;"	f	namespace:exprtk::details::numeric::details
count	app/exprtk.h	/^      count()$/;"	f	class:exprtk::rtl::vecops::count
count	app/exprtk.h	/^      inline std::size_t count() const$/;"	f	class:exprtk::results_context
count	app/exprtk.h	/^   class count : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
count	utils/Timer.h	/^  void count() { tv_.push_back( Clock::now() ); }$/;"	f	class:TQMesh::TQUtils::Timer
coutprec	utils/Vec2.h	/^constexpr int coutprec  = 3;$/;"	m	namespace:TQMesh::TQUtils::Vec2Def
coutwidth	utils/Vec2.h	/^constexpr int coutwidth = 6;$/;"	m	namespace:TQMesh::TQUtils::Vec2Def
cov_base_node	app/exprtk.h	/^      class cov_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
cov_node	app/exprtk.h	/^         explicit cov_node(const T& const_var, const T& var)$/;"	f	class:exprtk::details::exprtk_final
cov_optimisable	app/exprtk.h	/^         inline bool cov_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
cov_t	app/exprtk.h	/^      typedef details::T0oT1_define<T, const_t, cref_t > cov_t;$/;"	t	class:exprtk::parser
covoc_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, const_t, cref_t , const_t> covoc_t;$/;"	t	class:exprtk::parser
covocov_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, const_t, cref_t , const_t, cref_t > covocov_t;$/;"	t	class:exprtk::parser
covov_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, const_t, cref_t , cref_t > covov_t;$/;"	t	class:exprtk::parser
covovoc_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, const_t, cref_t , cref_t , const_t> covovoc_t;$/;"	t	class:exprtk::parser
covovov_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, const_t, cref_t , cref_t , cref_t > covovov_t;$/;"	t	class:exprtk::parser
cp	app/exprtk.h	/^      copy       <T> cp;$/;"	m	struct:exprtk::rtl::vecops::package
create	app/exprtk.h	/^            static inline control_block* create(const std::size_t& dsize, data_t data_ptr = data_t(0), bool dstrct = false)$/;"	f	struct:exprtk::details::vec_data_store::control_block
create	app/exprtk.h	/^            static inline st_data* create()$/;"	f	struct:exprtk::symbol_table::control_block::st_data
create	app/exprtk.h	/^         static inline cntrl_blck_ptr_t create(expression_ptr e)$/;"	f	struct:exprtk::expression::control_block
create	app/exprtk.h	/^         static inline control_block* create()$/;"	f	struct:exprtk::symbol_table::control_block
create_boundary_shape	algorithm/Boundary.h	/^  void create_boundary_shape(Vertices&           vertices, $/;"	f	class:TQMesh::TQAlgorithm::Boundary
create_data	app/exprtk.h	/^            inline void create_data()$/;"	f	struct:exprtk::details::vec_data_store::control_block
create_quad_layer_elements	algorithm/Mesh.h	/^  void create_quad_layer_elements(QuadLayer& quad_layer)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
create_quad_layers	algorithm/Mesh.h	/^  bool create_quad_layers(Vertex& v_start, Vertex& v_end, $/;"	f	class:TQMesh::TQAlgorithm::Mesh
create_stringvar	app/exprtk.h	/^      inline bool create_stringvar(const std::string& stringvar_name, const std::string& value = std::string(""))$/;"	f	class:exprtk::symbol_table
create_sub_edges	algorithm/Front.h	/^  void create_sub_edges(Edge& e, $/;"	f	class:TQMesh::TQAlgorithm::Front
create_sub_vertex_coords	algorithm/Front.h	/^  std::vector<Vec2d> create_sub_vertex_coords(const Edge& e, $/;"	f	class:TQMesh::TQAlgorithm::Front
create_variable	app/exprtk.h	/^      inline bool create_variable(const std::string& variable_name, const T& value = T(0))$/;"	f	class:exprtk::symbol_table
cref_t	app/exprtk.h	/^      typedef const T&                                    cref_t;$/;"	t	class:exprtk::parser
cross	utils/Vec2.h	/^inline T cross(const Vec2<T> &u, const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
cs_match	app/exprtk.h	/^      struct cs_match$/;"	s	namespace:exprtk::details
csc_impl	app/exprtk.h	/^            template <typename T> inline T   csc_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
csc_impl	app/exprtk.h	/^            template <typename T> inline T   csc_impl(const T v, real_type_tag) { return T(1) \/ std::sin(v); }$/;"	f	namespace:exprtk::details::numeric::details
ctype	app/exprtk.h	/^         typedef const Type  ctype;$/;"	t	class:exprtk::parser::expression_generator
current_index_	app/exprtk.h	/^            std::size_t current_index_;$/;"	m	class:exprtk::lexer::helper::numeric_checker
current_token	app/exprtk.h	/^         inline const token_t& current_token() const$/;"	f	class:exprtk::lexer::parser_helper
current_token_	app/exprtk.h	/^         token_t     current_token_;$/;"	m	class:exprtk::lexer::parser_helper
d2g_impl	app/exprtk.h	/^            template <typename T> inline T   d2g_impl(const T v, real_type_tag) { return (v * T(10.0\/9.0)); }$/;"	f	namespace:exprtk::details::numeric::details
d2r_impl	app/exprtk.h	/^            template <typename T> inline T   d2r_impl(const T v, real_type_tag) { return (v * T(numeric::constant::pi_180));  }$/;"	f	namespace:exprtk::details::numeric::details
data	app/exprtk.h	/^            data_t      data;$/;"	m	struct:exprtk::details::vec_data_store::control_block
data	app/exprtk.h	/^            inline value_ptr data() const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
data	app/exprtk.h	/^         inline data_t data() const$/;"	f	class:exprtk::details::vec_data_store
data	app/exprtk.h	/^         inline data_t data()$/;"	f	class:exprtk::details::vec_data_store
data	app/exprtk.h	/^         inline value_ptr data() const$/;"	f	class:exprtk::details::vector_holder
data	app/exprtk.h	/^         void*         data;$/;"	m	struct:exprtk::details::range_data_type
data	app/exprtk.h	/^         void*        data;$/;"	m	struct:exprtk::parser::scope_element
data	app/exprtk.h	/^         void* data;$/;"	m	union:exprtk::type_store::__anon6
data	app/exprtk.h	/^      inline data_ptr_t data() const$/;"	f	class:exprtk::vector_view
data	app/exprtk.h	/^      static inline std::string data()$/;"	f	namespace:exprtk::information
data_	app/exprtk.h	/^         st_data* data_;$/;"	m	struct:exprtk::symbol_table::control_block
data_	app/exprtk.h	/^         std::string data_;$/;"	m	class:exprtk::details::build_string
data_	app/exprtk.h	/^         value_t* data_;$/;"	m	struct:exprtk::type_store::type_view
data_	app/exprtk.h	/^      data_ptr_t  data_;$/;"	m	class:exprtk::vector_view
data_pack	app/exprtk.h	/^            data_pack()$/;"	f	struct:exprtk::expression::control_block::data_pack
data_pack	app/exprtk.h	/^            data_pack(void* ptr, const data_type dt, const std::size_t sz = 0)$/;"	f	struct:exprtk::expression::control_block::data_pack
data_pack	app/exprtk.h	/^         struct data_pack$/;"	s	struct:exprtk::expression::control_block
data_ptr_t	app/exprtk.h	/^      typedef T* data_ptr_t;$/;"	t	class:exprtk::vector_view
data_ref_	app/exprtk.h	/^      std::vector<data_ptr_t*> data_ref_;$/;"	m	class:exprtk::vector_view
data_t	app/exprtk.h	/^         typedef T* data_t;$/;"	t	class:exprtk::details::vec_data_store
data_type	app/exprtk.h	/^         enum data_type$/;"	g	struct:exprtk::expression::control_block
date	app/exprtk.h	/^      static const char* date    = "20210101";$/;"	m	namespace:exprtk::information
deactivate	app/exprtk.h	/^         inline void deactivate(const std::size_t& scope_depth)$/;"	f	class:exprtk::parser::scope_element_manager
dec	app/exprtk.h	/^      inline dependent_entity_collector& dec()$/;"	f	class:exprtk::parser
dec_	app/exprtk.h	/^      dependent_entity_collector dec_;$/;"	m	class:exprtk::parser
def_fp_retval	app/exprtk.h	38238;"	d
default_precedence	app/exprtk.h	/^      static const precedence_level default_precedence = e_level00;$/;"	m	class:exprtk::parser
default_usr_	app/exprtk.h	/^      unknown_symbol_resolver default_usr_;$/;"	m	class:exprtk::parser
define_sfop3	app/exprtk.h	10067;"	d
define_sfop3	app/exprtk.h	9871;"	d
define_sfop4	app/exprtk.h	10068;"	d
define_sfop4	app/exprtk.h	9935;"	d
delete_nodes	app/exprtk.h	/^         static void delete_nodes(node_ptr_t& root)$/;"	f	class:exprtk::details::node_collection_destructor
delete_ptr	app/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_delete
delete_ptr	app/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_deq_delete
delete_ptr	app/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_expression_delete
delete_ptr	app/exprtk.h	/^         bool delete_ptr;$/;"	m	struct:exprtk::parser::scoped_vec_delete
deleter	app/exprtk.h	/^         struct deleter$/;"	s	struct:exprtk::symbol_table::type_store
delimiter_	utils/ParaReader.h	/^  char            delimiter_;$/;"	m	class:CppUtils::ParaReader
delimiter_	utils/oldParaReader.h	/^  char            delimiter_;$/;"	m	class:ParaReader
delta	utils/Timer.h	/^  double delta(int i) const$/;"	f	class:TQMesh::TQUtils::Timer
dependent_entity_collector	app/exprtk.h	/^         dependent_entity_collector(const std::size_t options = e_ct_none)$/;"	f	class:exprtk::parser::dependent_entity_collector
dependent_entity_collector	app/exprtk.h	/^      class dependent_entity_collector$/;"	c	class:exprtk::parser
depth	app/exprtk.h	/^         mutable std::size_t depth;$/;"	m	struct:exprtk::details::node_depth_base
depth	app/exprtk.h	/^         std::size_t  depth;$/;"	m	struct:exprtk::parser::scope_element
depth_set	app/exprtk.h	/^         mutable bool depth_set;$/;"	m	struct:exprtk::details::node_depth_base
deq_	app/exprtk.h	/^         std::deque<ptr_t>& deq_;$/;"	m	struct:exprtk::parser::scoped_deq_delete
derivative	app/exprtk.h	/^   inline T derivative(const expression<T>& e,$/;"	f	namespace:exprtk
des_itr_t	app/exprtk.h	/^         typedef disabled_entity_set_t::iterator des_itr_t;$/;"	t	class:exprtk::parser::settings_store
destroy	app/exprtk.h	/^            static inline void destroy(control_block*& cntrl_blck)$/;"	f	struct:exprtk::details::vec_data_store::control_block
destroy	app/exprtk.h	/^            static inline void destroy(st_data*& sd)$/;"	f	struct:exprtk::symbol_table::control_block::st_data
destroy	app/exprtk.h	/^         static inline void destroy(cntrl_blck_ptr_t& cntrl_blck)$/;"	f	struct:exprtk::expression::control_block
destroy	app/exprtk.h	/^         static inline void destroy(control_block*& cntrl_blck, SymTab* sym_tab)$/;"	f	struct:exprtk::symbol_table::control_block
destroy_node	app/exprtk.h	/^      inline void destroy_node(expression_node<T>*& node)$/;"	f	namespace:exprtk::details
destruct	app/exprtk.h	/^            bool        destruct;$/;"	m	struct:exprtk::details::vec_data_store::control_block
details	app/exprtk.h	/^            explicit details(const std::size_t& vsize,$/;"	f	struct:exprtk::details::loop_unroll::details
details	app/exprtk.h	/^         namespace details$/;"	n	namespace:exprtk::details::numeric
details	app/exprtk.h	/^         struct details$/;"	s	namespace:exprtk::details::loop_unroll
details	app/exprtk.h	/^   namespace details$/;"	n	namespace:exprtk
details	app/exprtk.h	/^   namespace details$/;"	n	namespace:exprtk::rtl::vecops
details	app/exprtk.h	/^   namespace rtl { namespace io { namespace details$/;"	n	namespace:exprtk::rtl::io
details	app/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk::rtl::io::file
diagnostic	app/exprtk.h	/^         std::string diagnostic;$/;"	m	struct:exprtk::parser_error::type
disable_all_arithmetic_ops	app/exprtk.h	/^         settings_store& disable_all_arithmetic_ops()$/;"	f	class:exprtk::parser::settings_store
disable_all_assignment_ops	app/exprtk.h	/^         settings_store& disable_all_assignment_ops()$/;"	f	class:exprtk::parser::settings_store
disable_all_base_functions	app/exprtk.h	/^         settings_store& disable_all_base_functions()$/;"	f	class:exprtk::parser::settings_store
disable_all_control_structures	app/exprtk.h	/^         settings_store& disable_all_control_structures()$/;"	f	class:exprtk::parser::settings_store
disable_all_inequality_ops	app/exprtk.h	/^         settings_store& disable_all_inequality_ops()$/;"	f	class:exprtk::parser::settings_store
disable_all_logic_ops	app/exprtk.h	/^         settings_store& disable_all_logic_ops()$/;"	f	class:exprtk::parser::settings_store
disable_arithmetic_operation	app/exprtk.h	/^         settings_store& disable_arithmetic_operation(settings_arithmetic_opr arithmetic)$/;"	f	class:exprtk::parser::settings_store
disable_assignment_operation	app/exprtk.h	/^         settings_store& disable_assignment_operation(settings_assignment_opr assignment)$/;"	f	class:exprtk::parser::settings_store
disable_base_function	app/exprtk.h	/^         settings_store& disable_base_function(settings_base_funcs bf)$/;"	f	class:exprtk::parser::settings_store
disable_control_structure	app/exprtk.h	/^         settings_store& disable_control_structure(settings_control_structs ctrl_struct)$/;"	f	class:exprtk::parser::settings_store
disable_has_side_effects	app/exprtk.h	/^   void disable_has_side_effects(FunctionType& func)$/;"	f	namespace:exprtk
disable_inequality_operation	app/exprtk.h	/^         settings_store& disable_inequality_operation(settings_inequality_opr inequality)$/;"	f	class:exprtk::parser::settings_store
disable_local_vardef	app/exprtk.h	/^         settings_store& disable_local_vardef()$/;"	f	class:exprtk::parser::settings_store
disable_logic_operation	app/exprtk.h	/^         settings_store& disable_logic_operation(settings_logic_opr logic)$/;"	f	class:exprtk::parser::settings_store
disable_rsrvd_sym_usr_	app/exprtk.h	/^         bool disable_rsrvd_sym_usr_;$/;"	m	class:exprtk::parser::settings_store
disable_type_checking	app/exprtk.h	/^      inline void disable_type_checking(Parser& p)$/;"	f	namespace:exprtk::details
disable_unknown_symbol_resolver	app/exprtk.h	/^      inline void disable_unknown_symbol_resolver()$/;"	f	class:exprtk::parser
disable_vardef_	app/exprtk.h	/^         bool disable_vardef_;$/;"	m	class:exprtk::parser::settings_store
disable_zero_parameters	app/exprtk.h	/^   void disable_zero_parameters(FunctionType& func)$/;"	f	namespace:exprtk
disable_zero_return_	app/exprtk.h	/^         bool disable_zero_return_;$/;"	m	class:exprtk::parser::settings_store
disabled_arithmetic_set_	app/exprtk.h	/^         disabled_entity_set_t disabled_arithmetic_set_;$/;"	m	class:exprtk::parser::settings_store
disabled_assignment_set_	app/exprtk.h	/^         disabled_entity_set_t disabled_assignment_set_;$/;"	m	class:exprtk::parser::settings_store
disabled_ctrl_set_	app/exprtk.h	/^         disabled_entity_set_t disabled_ctrl_set_ ;$/;"	m	class:exprtk::parser::settings_store
disabled_entity_set_t	app/exprtk.h	/^         typedef std::set<std::string,details::ilesscompare> disabled_entity_set_t;$/;"	t	class:exprtk::parser::settings_store
disabled_func_set_	app/exprtk.h	/^         disabled_entity_set_t disabled_func_set_ ;$/;"	m	class:exprtk::parser::settings_store
disabled_func_set_t	app/exprtk.h	/^      typedef std::set<std::string,details::ilesscompare> disabled_func_set_t;$/;"	t	class:exprtk::parser
disabled_inequality_set_	app/exprtk.h	/^         disabled_entity_set_t disabled_inequality_set_;$/;"	m	class:exprtk::parser::settings_store
disabled_logic_set_	app/exprtk.h	/^         disabled_entity_set_t disabled_logic_set_;$/;"	m	class:exprtk::parser::settings_store
distribute_items	utils/QTree.h	/^  void distribute_items()$/;"	f	class:TQMesh::TQUtils::QTree
div_op	app/exprtk.h	/^      struct div_op : public opr_base<T>$/;"	s	namespace:exprtk::details
domain_size	app/unused.c	/^  const double domain_size = ABS(10.0 * MAX(dx, dy));$/;"	v
dot	app/exprtk.h	/^      dot()$/;"	f	class:exprtk::rtl::vecops::dot
dot	app/exprtk.h	/^   class dot : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
dot	utils/Vec2.h	/^inline T dot(const Vec2<T> &u, const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
dotk	app/exprtk.h	/^      dotk()$/;"	f	class:exprtk::rtl::vecops::dotk
dotk	app/exprtk.h	/^   class dotk : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
dt	app/exprtk.h	/^      dot        <T> dt;$/;"	m	struct:exprtk::rtl::vecops::package
dtk	app/exprtk.h	/^      dotk       <T> dtk;$/;"	m	struct:exprtk::rtl::vecops::package
dump	app/exprtk.h	/^         inline void dump() const$/;"	f	class:exprtk::details::vec_data_store
dump	app/exprtk.h	/^         inline void dump(const lexer::generator& generator)$/;"	f	namespace:exprtk::lexer::helper
dump_error	app/exprtk.h	/^      inline void dump_error(const type& error)$/;"	f	namespace:exprtk::parser_error
dump_ptr	app/exprtk.h	/^      inline void dump_ptr(const std::string& s, const void* ptr, const std::size_t size = 0)$/;"	f	namespace:exprtk::details
dx	app/unused.c	/^  const double dx = xy_max.x - xy_min.x;$/;"	v
dy	app/unused.c	/^  const double dy = xy_max.y - xy_min.y;$/;"	v
e	app/exprtk.h	/^            static const double e       =  2.71828182845904523536028747135266249775724709369996;$/;"	m	namespace:exprtk::details::numeric::constant
e	app/exprtk.h	/^      eof    <T> e;$/;"	m	struct:exprtk::rtl::io::file::package
e_abs	app/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_abs	app/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_acos	app/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_acos	app/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_acosh	app/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_acosh	app/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_add	app/exprtk.h	/^            e_lcrlbracket = '{', e_comma       = ',', e_add         = '+',$/;"	e	enum:exprtk::lexer::token::token_type
e_add	app/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_add	app/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_addass	app/exprtk.h	/^            e_string      =   9, e_assign      =  10, e_addass      =  11,$/;"	e	enum:exprtk::lexer::token::token_type
e_addass	app/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_advance	app/exprtk.h	/^            e_advance = 1$/;"	e	enum:exprtk::lexer::parser_helper::token_advance_mode
e_all_loops	app/exprtk.h	/^         e_all_loops         = 7$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_and	app/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_and	app/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_arith_add	app/exprtk.h	/^            e_arith_add, e_arith_sub, e_arith_mul,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_div	app/exprtk.h	/^            e_arith_div, e_arith_mod, e_arith_pow$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_mod	app/exprtk.h	/^            e_arith_div, e_arith_mod, e_arith_pow$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_mul	app/exprtk.h	/^            e_arith_add, e_arith_sub, e_arith_mul,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_pow	app/exprtk.h	/^            e_arith_div, e_arith_mod, e_arith_pow$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_sub	app/exprtk.h	/^            e_arith_add, e_arith_sub, e_arith_mul,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_arith_unknown	app/exprtk.h	/^            e_arith_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_arithmetic_opr
e_asin	app/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_asin	app/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_asinh	app/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_asinh	app/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_assign	app/exprtk.h	/^            e_string      =   9, e_assign      =  10, e_addass      =  11,$/;"	e	enum:exprtk::lexer::token::token_type
e_assign	app/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_assign_addass	app/exprtk.h	/^            e_assign_assign, e_assign_addass, e_assign_subass,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_assign	app/exprtk.h	/^            e_assign_assign, e_assign_addass, e_assign_subass,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_divass	app/exprtk.h	/^            e_assign_mulass, e_assign_divass, e_assign_modass$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_modass	app/exprtk.h	/^            e_assign_mulass, e_assign_divass, e_assign_modass$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_mulass	app/exprtk.h	/^            e_assign_mulass, e_assign_divass, e_assign_modass$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_subass	app/exprtk.h	/^            e_assign_assign, e_assign_addass, e_assign_subass,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_assign_unknown	app/exprtk.h	/^            e_assign_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_assignment_opr
e_atan	app/exprtk.h	/^            e_acosh         , e_asin          , e_asinh       , e_atan         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_atan	app/exprtk.h	/^         e_acosh   , e_asin    , e_asinh   , e_atan    ,$/;"	e	enum:exprtk::details::operator_type
e_atan2	app/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_atanh	app/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_atanh	app/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_avg	app/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_bf_abs	app/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_acos	app/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_acosh	app/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_asin	app/exprtk.h	/^            e_bf_abs       , e_bf_acos     , e_bf_acosh    , e_bf_asin    ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_asinh	app/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_atan	app/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_atan2	app/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_atanh	app/exprtk.h	/^            e_bf_asinh     , e_bf_atan     , e_bf_atan2    , e_bf_atanh   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_avg	app/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_ceil	app/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_clamp	app/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_cos	app/exprtk.h	/^            e_bf_avg       , e_bf_ceil     , e_bf_clamp    , e_bf_cos     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_cosh	app/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_cot	app/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_csc	app/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_deg2grad	app/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_deg2rad	app/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_equal	app/exprtk.h	/^            e_bf_cosh      , e_bf_cot      , e_bf_csc      , e_bf_equal   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_erf	app/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_erfc	app/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_exp	app/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_expm1	app/exprtk.h	/^            e_bf_erf       , e_bf_erfc     , e_bf_exp      , e_bf_expm1   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_floor	app/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_frac	app/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_grad2deg	app/exprtk.h	/^            e_bf_rad2deg   , e_bf_grad2deg$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_hypot	app/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_iclamp	app/exprtk.h	/^            e_bf_floor     , e_bf_frac     , e_bf_hypot    , e_bf_iclamp  ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_inrange	app/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_like	app/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log	app/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log10	app/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log1p	app/exprtk.h	/^            e_bf_like      , e_bf_log      , e_bf_log10    , e_bf_log1p   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_log2	app/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_logn	app/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mand	app/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_max	app/exprtk.h	/^            e_bf_log2      , e_bf_logn     , e_bf_mand     , e_bf_max     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_min	app/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mod	app/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mor	app/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_mul	app/exprtk.h	/^            e_bf_min       , e_bf_mod      , e_bf_mor      , e_bf_mul     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_ncdf	app/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_not_equal	app/exprtk.h	/^            e_bf_not_equal , e_bf_inrange  , e_bf_deg2grad , e_bf_deg2rad ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_pow	app/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_rad2deg	app/exprtk.h	/^            e_bf_rad2deg   , e_bf_grad2deg$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_root	app/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_round	app/exprtk.h	/^            e_bf_ncdf      , e_bf_pow      , e_bf_root     , e_bf_round   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_roundn	app/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sec	app/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sgn	app/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sin	app/exprtk.h	/^            e_bf_roundn    , e_bf_sec      , e_bf_sgn      , e_bf_sin     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sinc	app/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sinh	app/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sqrt	app/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_sum	app/exprtk.h	/^            e_bf_sinc      , e_bf_sinh     , e_bf_sqrt     , e_bf_sum     ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_swap	app/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_tan	app/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_tanh	app/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_trunc	app/exprtk.h	/^            e_bf_swap      , e_bf_tan      , e_bf_tanh     , e_bf_trunc   ,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_bf_unknown	app/exprtk.h	/^            e_bf_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_base_funcs
e_binary	app/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_binary_ext	app/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_boc	app/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_bov	app/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_bracket_check	app/exprtk.h	/^            e_bracket_check        =    8,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_break	app/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ceil	app/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ceil	app/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_clamp	app/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_cob	app/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_collect_assings	app/exprtk.h	/^            e_collect_assings      = 1024,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_collect_funcs	app/exprtk.h	/^            e_collect_funcs        =  512,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_collect_vars	app/exprtk.h	/^            e_collect_vars         =  256,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_colon	app/exprtk.h	/^            e_mod         = '%', e_pow         = '^', e_colon       = ':',$/;"	e	enum:exprtk::lexer::token::token_type
e_comma	app/exprtk.h	/^            e_lcrlbracket = '{', e_comma       = ',', e_add         = '+',$/;"	e	enum:exprtk::lexer::token::token_type
e_commutative_check	app/exprtk.h	/^            e_commutative_check    =   32,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_conditional	app/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_constant	app/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_continue	app/exprtk.h	/^            e_continue      , e_swap$/;"	e	enum:exprtk::details::expression_node::node_type
e_cos	app/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_cos	app/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_cosh	app/exprtk.h	/^            e_atanh         , e_ceil          , e_cos         , e_cosh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_cosh	app/exprtk.h	/^         e_atanh   , e_ceil    , e_cos     , e_cosh    ,$/;"	e	enum:exprtk::details::operator_type
e_cot	app/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_cot	app/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_cov	app/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covoc	app/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covocov	app/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covov	app/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covovoc	app/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_covovov	app/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_csc	app/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_csc	app/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_cstringvarrng	app/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ct_assignments	app/exprtk.h	/^         e_ct_assignments = 4$/;"	e	enum:exprtk::parser::collect_type
e_ct_functions	app/exprtk.h	/^         e_ct_functions   = 2,$/;"	e	enum:exprtk::parser::collect_type
e_ct_none	app/exprtk.h	/^         e_ct_none        = 0,$/;"	e	enum:exprtk::parser::collect_type
e_ct_variables	app/exprtk.h	/^         e_ct_variables   = 1,$/;"	e	enum:exprtk::parser::collect_type
e_ctrl_for_loop	app/exprtk.h	/^            e_ctrl_for_loop,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_ifelse	app/exprtk.h	/^            e_ctrl_ifelse,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_repeat_loop	app/exprtk.h	/^            e_ctrl_repeat_loop,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_return	app/exprtk.h	/^            e_ctrl_return$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_switch	app/exprtk.h	/^            e_ctrl_switch,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_unknown	app/exprtk.h	/^            e_ctrl_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_ctrl_while_loop	app/exprtk.h	/^            e_ctrl_while_loop,$/;"	e	enum:exprtk::parser::settings_store::settings_control_structs
e_d2g	app/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_d2g	app/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_d2r	app/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_d2r	app/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_data	app/exprtk.h	/^            e_data     ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_default	app/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_disable_usr_on_rsrvd	app/exprtk.h	/^            e_disable_usr_on_rsrvd = 2048,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_disable_vardef	app/exprtk.h	/^            e_disable_vardef       =  128,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_disable_zero_return	app/exprtk.h	/^            e_disable_zero_return  = 4096$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_div	app/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_div	app/exprtk.h	/^            e_sub         = '-', e_div         = '\/', e_mul         = '*',$/;"	e	enum:exprtk::lexer::token::token_type
e_div	app/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_divass	app/exprtk.h	/^            e_subass      =  12, e_mulass      =  13, e_divass      =  14,$/;"	e	enum:exprtk::lexer::token::token_type
e_divass	app/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_end	algorithm/QuadLayer.h	/^  Edge* e_end() const { return e_end_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
e_eof	app/exprtk.h	/^            e_eof         =   6, e_number      =   7, e_symbol      =   8,$/;"	e	enum:exprtk::lexer::token::token_type
e_eq	app/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_eq	app/exprtk.h	/^            e_eq          = '=', e_rbracket    = ')', e_lbracket    = '(',$/;"	e	enum:exprtk::lexer::token::token_type
e_eq	app/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_equal	app/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_erf	app/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_erf	app/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_erfc	app/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_erfc	app/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_err_number	app/exprtk.h	/^            e_err_number  =   3, e_err_string  =   4, e_err_sfunc   =   5,$/;"	e	enum:exprtk::lexer::token::token_type
e_err_sfunc	app/exprtk.h	/^            e_err_number  =   3, e_err_string  =   4, e_err_sfunc   =   5,$/;"	e	enum:exprtk::lexer::token::token_type
e_err_string	app/exprtk.h	/^            e_err_number  =   3, e_err_string  =   4, e_err_sfunc   =   5,$/;"	e	enum:exprtk::lexer::token::token_type
e_err_symbol	app/exprtk.h	/^            e_none        =   0, e_error       =   1, e_err_symbol  =   2,$/;"	e	enum:exprtk::lexer::token::token_type
e_error	app/exprtk.h	/^            e_none        =   0, e_error       =   1, e_err_symbol  =   2,$/;"	e	enum:exprtk::lexer::token::token_type
e_error	app/exprtk.h	/^         e_error = 0,$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_exp	app/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_exp	app/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_expm1	app/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_expm1	app/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_expr	app/exprtk.h	/^            e_expr     ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_floor	app/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_floor	app/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_for	app/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_for_loop	app/exprtk.h	/^         e_for_loop          = 1,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_frac	app/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_frac	app/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_function	app/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_g2d	app/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_g2d	app/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_genfunction	app/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_gt	app/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_gt	app/exprtk.h	/^            e_swap        =  21, e_lt          = '<', e_gt          = '>',$/;"	e	enum:exprtk::lexer::token::token_type
e_gt	app/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_gte	app/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_gte	app/exprtk.h	/^            e_lte         =  18, e_ne          =  19, e_gte         =  20,$/;"	e	enum:exprtk::lexer::token::token_type
e_gte	app/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_helper	app/exprtk.h	/^         e_helper  = 7,$/;"	e	enum:exprtk::parser_error::error_mode
e_hold	app/exprtk.h	/^            e_hold    = 0,$/;"	e	enum:exprtk::lexer::parser_helper::token_advance_mode
e_hypot	app/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_iclamp	app/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_ilike	app/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ilike	app/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_in	app/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_in	app/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_ineq_eq	app/exprtk.h	/^            e_ineq_lt   , e_ineq_lte, e_ineq_eq    ,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_equal	app/exprtk.h	/^            e_ineq_equal, e_ineq_ne , e_ineq_nequal,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_gt	app/exprtk.h	/^            e_ineq_gte  , e_ineq_gt$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_gte	app/exprtk.h	/^            e_ineq_gte  , e_ineq_gt$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_lt	app/exprtk.h	/^            e_ineq_lt   , e_ineq_lte, e_ineq_eq    ,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_lte	app/exprtk.h	/^            e_ineq_lt   , e_ineq_lte, e_ineq_eq    ,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_ne	app/exprtk.h	/^            e_ineq_equal, e_ineq_ne , e_ineq_nequal,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_nequal	app/exprtk.h	/^            e_ineq_equal, e_ineq_ne , e_ineq_nequal,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_ineq_unknown	app/exprtk.h	/^            e_ineq_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_inequality_opr
e_inrange	app/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_inranges	app/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_invalid	app/exprtk.h	/^         e_invalid           = 0,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_ipow	app/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ipowinv	app/exprtk.h	/^            e_ipow          , e_ipowinv       , e_abs         , e_acos         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_iteration_count	app/exprtk.h	/^          e_iteration_count = 1,$/;"	e	enum:exprtk::loop_runtime_check::violation_type
e_joiner	app/exprtk.h	/^            e_joiner               =    2,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_lbracket	app/exprtk.h	/^            e_eq          = '=', e_rbracket    = ')', e_lbracket    = '(',$/;"	e	enum:exprtk::lexer::token::token_type
e_lcrlbracket	app/exprtk.h	/^            e_lcrlbracket = '{', e_comma       = ',', e_add         = '+',$/;"	e	enum:exprtk::lexer::token::token_type
e_level00	app/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level01	app/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level02	app/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level03	app/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level04	app/exprtk.h	/^         e_level00, e_level01, e_level02, e_level03, e_level04,$/;"	e	enum:exprtk::parser::precedence_level
e_level05	app/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level06	app/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level07	app/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level08	app/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level09	app/exprtk.h	/^         e_level05, e_level06, e_level07, e_level08, e_level09,$/;"	e	enum:exprtk::parser::precedence_level
e_level10	app/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level11	app/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level12	app/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level13	app/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_level14	app/exprtk.h	/^         e_level10, e_level11, e_level12, e_level13, e_level14$/;"	e	enum:exprtk::parser::precedence_level
e_lexer	app/exprtk.h	/^         e_lexer   = 6,$/;"	e	enum:exprtk::parser_error::error_mode
e_like	app/exprtk.h	/^            e_in            , e_like          , e_ilike       , e_inranges     ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_like	app/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_log	app/exprtk.h	/^            e_exp           , e_expm1         , e_floor       , e_log          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log	app/exprtk.h	/^         e_exp     , e_expm1   , e_floor   , e_log     ,$/;"	e	enum:exprtk::details::operator_type
e_log10	app/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log10	app/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_log1p	app/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log1p	app/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_log2	app/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_log2	app/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_logic_and	app/exprtk.h	/^            e_logic_and, e_logic_nand , e_logic_nor ,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_nand	app/exprtk.h	/^            e_logic_and, e_logic_nand , e_logic_nor ,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_nor	app/exprtk.h	/^            e_logic_and, e_logic_nand , e_logic_nor ,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_not	app/exprtk.h	/^            e_logic_not, e_logic_or   , e_logic_xnor,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_or	app/exprtk.h	/^            e_logic_not, e_logic_or   , e_logic_xnor,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_scand	app/exprtk.h	/^            e_logic_xor, e_logic_scand, e_logic_scor$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_scor	app/exprtk.h	/^            e_logic_xor, e_logic_scand, e_logic_scor$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_unknown	app/exprtk.h	/^            e_logic_unknown = 0,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_xnor	app/exprtk.h	/^            e_logic_not, e_logic_or   , e_logic_xnor,$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logic_xor	app/exprtk.h	/^            e_logic_xor, e_logic_scand, e_logic_scor$/;"	e	enum:exprtk::parser::settings_store::settings_logic_opr
e_logn	app/exprtk.h	/^         e_log10   , e_log2    , e_log1p   , e_logn    ,$/;"	e	enum:exprtk::details::operator_type
e_lsqrbracket	app/exprtk.h	/^            e_rsqrbracket = ']', e_lsqrbracket = '[', e_rcrlbracket = '}',$/;"	e	enum:exprtk::lexer::token::token_type
e_lt	app/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_lt	app/exprtk.h	/^            e_swap        =  21, e_lt          = '<', e_gt          = '>',$/;"	e	enum:exprtk::lexer::token::token_type
e_lt	app/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_lte	app/exprtk.h	/^            e_lt            , e_lte           , e_gt          , e_gte          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_lte	app/exprtk.h	/^            e_lte         =  18, e_ne          =  19, e_gte         =  20,$/;"	e	enum:exprtk::lexer::token::token_type
e_lte	app/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_mand	app/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_max	app/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_min	app/exprtk.h	/^         e_atan2   , e_min     , e_max     , e_avg     ,$/;"	e	enum:exprtk::details::operator_type
e_mod	app/exprtk.h	/^            e_mod         = '%', e_pow         = '^', e_colon       = ':',$/;"	e	enum:exprtk::lexer::token::token_type
e_mod	app/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_mod	app/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_modass	app/exprtk.h	/^            e_modass      =  15, e_shr         =  16, e_shl         =  17,$/;"	e	enum:exprtk::lexer::token::token_type
e_modass	app/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_mor	app/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_mswitch	app/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_mul	app/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_mul	app/exprtk.h	/^            e_sub         = '-', e_div         = '\/', e_mul         = '*',$/;"	e	enum:exprtk::lexer::token::token_type
e_mul	app/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_mulass	app/exprtk.h	/^            e_subass      =  12, e_mulass      =  13, e_divass      =  14,$/;"	e	enum:exprtk::lexer::token::token_type
e_mulass	app/exprtk.h	/^         e_mulass  , e_divass  , e_modass  , e_in      ,$/;"	e	enum:exprtk::details::operator_type
e_multi	app/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_nand	app/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_nand	app/exprtk.h	/^         e_gte     , e_gt      , e_and     , e_nand    ,$/;"	e	enum:exprtk::details::operator_type
e_ncdf	app/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ncdf	app/exprtk.h	/^         e_erf     , e_erfc    , e_ncdf    , e_frac    ,$/;"	e	enum:exprtk::details::operator_type
e_ne	app/exprtk.h	/^            e_eq            , e_ne            , e_and         , e_nand         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_ne	app/exprtk.h	/^            e_lte         =  18, e_ne          =  19, e_gte         =  20,$/;"	e	enum:exprtk::lexer::token::token_type
e_ne	app/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_neg	app/exprtk.h	/^            e_log10         , e_log2          , e_log1p       , e_neg          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_neg	app/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_nequal	app/exprtk.h	/^         e_eq      , e_equal   , e_ne      , e_nequal  ,$/;"	e	enum:exprtk::details::operator_type
e_none	app/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_none	app/exprtk.h	/^            e_none        =   0, e_error       =   1, e_err_symbol  =   2,$/;"	e	enum:exprtk::lexer::token::token_type
e_none	app/exprtk.h	/^            e_none    ,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_nor	app/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_nor	app/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
e_notl	app/exprtk.h	/^            e_d2r           , e_d2g           , e_g2d         , e_notl         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_notl	app/exprtk.h	/^         e_d2g     , e_g2d     , e_hypot   , e_notl    ,$/;"	e	enum:exprtk::details::operator_type
e_null	app/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_null	app/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_nulleq	app/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_number	app/exprtk.h	/^            e_eof         =   6, e_number      =   7, e_symbol      =   8,$/;"	e	enum:exprtk::lexer::token::token_type
e_numeric	app/exprtk.h	/^         e_numeric = 4,$/;"	e	enum:exprtk::parser_error::error_mode
e_numeric_check	app/exprtk.h	/^            e_numeric_check        =    4,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_or	app/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_or	app/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
e_parser	app/exprtk.h	/^         e_parser  = 8$/;"	e	enum:exprtk::parser_error::error_mode
e_pos	app/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_pos	app/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_pow	app/exprtk.h	/^            e_mod         = '%', e_pow         = '^', e_colon       = ':',$/;"	e	enum:exprtk::lexer::token::token_type
e_pow	app/exprtk.h	/^            e_mul           , e_div           , e_mod         , e_pow          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_pow	app/exprtk.h	/^         e_mul     , e_div     , e_mod     , e_pow     ,$/;"	e	enum:exprtk::details::operator_type
e_prod	app/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_quaternary	app/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_r2d	app/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_r2d	app/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_rbracket	app/exprtk.h	/^            e_eq          = '=', e_rbracket    = ')', e_lbracket    = '(',$/;"	e	enum:exprtk::lexer::token::token_type
e_rbveccelem	app/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_rbvecelem	app/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_rcrlbracket	app/exprtk.h	/^            e_rsqrbracket = ']', e_lsqrbracket = '[', e_rcrlbracket = '}',$/;"	e	enum:exprtk::lexer::token::token_type
e_rdwrt	app/exprtk.h	/^         e_rdwrt = 4$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_read	app/exprtk.h	/^         e_read  = 1,$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_repeat	app/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_repeat_until_loop	app/exprtk.h	/^         e_repeat_until_loop = 4,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_replacer	app/exprtk.h	/^            e_replacer             =    1,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_retenv	app/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_return	app/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_root	app/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_round	app/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_round	app/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_roundn	app/exprtk.h	/^         e_neg     , e_pos     , e_round   , e_roundn  ,$/;"	e	enum:exprtk::details::operator_type
e_rsqrbracket	app/exprtk.h	/^            e_rsqrbracket = ']', e_lsqrbracket = '[', e_rcrlbracket = '}',$/;"	e	enum:exprtk::lexer::token::token_type
e_rtrn_overload	app/exprtk.h	/^         e_rtrn_overload = 2$/;"	e	enum:exprtk::igeneric_function::return_type
e_rtrn_scalar	app/exprtk.h	/^         e_rtrn_scalar   = 0,$/;"	e	enum:exprtk::igeneric_function::return_type
e_rtrn_string	app/exprtk.h	/^         e_rtrn_string   = 1,$/;"	e	enum:exprtk::igeneric_function::return_type
e_scalar	app/exprtk.h	/^         e_scalar ,$/;"	e	enum:exprtk::type_store::store_type
e_scand	app/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_scor	app/exprtk.h	/^         e_mand    , e_mor     , e_scand   , e_scor    ,$/;"	e	enum:exprtk::details::operator_type
e_sec	app/exprtk.h	/^            e_cot           , e_sec           , e_csc         , e_r2d          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sec	app/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_sequence_check	app/exprtk.h	/^            e_sequence_check       =   16,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_sf00	app/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf01	app/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf02	app/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf03	app/exprtk.h	/^         e_sf00 = 1000, e_sf01 = 1001, e_sf02 = 1002, e_sf03 = 1003,$/;"	e	enum:exprtk::details::operator_type
e_sf04	app/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf05	app/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf06	app/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf07	app/exprtk.h	/^         e_sf04 = 1004, e_sf05 = 1005, e_sf06 = 1006, e_sf07 = 1007,$/;"	e	enum:exprtk::details::operator_type
e_sf08	app/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf09	app/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf10	app/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf11	app/exprtk.h	/^         e_sf08 = 1008, e_sf09 = 1009, e_sf10 = 1010, e_sf11 = 1011,$/;"	e	enum:exprtk::details::operator_type
e_sf12	app/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf13	app/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf14	app/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf15	app/exprtk.h	/^         e_sf12 = 1012, e_sf13 = 1013, e_sf14 = 1014, e_sf15 = 1015,$/;"	e	enum:exprtk::details::operator_type
e_sf16	app/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf17	app/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf18	app/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf19	app/exprtk.h	/^         e_sf16 = 1016, e_sf17 = 1017, e_sf18 = 1018, e_sf19 = 1019,$/;"	e	enum:exprtk::details::operator_type
e_sf20	app/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf21	app/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf22	app/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf23	app/exprtk.h	/^         e_sf20 = 1020, e_sf21 = 1021, e_sf22 = 1022, e_sf23 = 1023,$/;"	e	enum:exprtk::details::operator_type
e_sf24	app/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf25	app/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf26	app/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf27	app/exprtk.h	/^         e_sf24 = 1024, e_sf25 = 1025, e_sf26 = 1026, e_sf27 = 1027,$/;"	e	enum:exprtk::details::operator_type
e_sf28	app/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf29	app/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf30	app/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf31	app/exprtk.h	/^         e_sf28 = 1028, e_sf29 = 1029, e_sf30 = 1030, e_sf31 = 1031,$/;"	e	enum:exprtk::details::operator_type
e_sf32	app/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf33	app/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf34	app/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf35	app/exprtk.h	/^         e_sf32 = 1032, e_sf33 = 1033, e_sf34 = 1034, e_sf35 = 1035,$/;"	e	enum:exprtk::details::operator_type
e_sf36	app/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf37	app/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf38	app/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf39	app/exprtk.h	/^         e_sf36 = 1036, e_sf37 = 1037, e_sf38 = 1038, e_sf39 = 1039,$/;"	e	enum:exprtk::details::operator_type
e_sf3ext	app/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sf40	app/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf41	app/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf42	app/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf43	app/exprtk.h	/^         e_sf40 = 1040, e_sf41 = 1041, e_sf42 = 1042, e_sf43 = 1043,$/;"	e	enum:exprtk::details::operator_type
e_sf44	app/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf45	app/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf46	app/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf47	app/exprtk.h	/^         e_sf44 = 1044, e_sf45 = 1045, e_sf46 = 1046, e_sf47 = 1047,$/;"	e	enum:exprtk::details::operator_type
e_sf48	app/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf49	app/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext	app/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sf4ext00	app/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext01	app/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext02	app/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext03	app/exprtk.h	/^         e_sf4ext00 = 2000, e_sf4ext01 = 2001, e_sf4ext02 = 2002, e_sf4ext03 = 2003,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext04	app/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext05	app/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext06	app/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext07	app/exprtk.h	/^         e_sf4ext04 = 2004, e_sf4ext05 = 2005, e_sf4ext06 = 2006, e_sf4ext07 = 2007,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext08	app/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext09	app/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext10	app/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext11	app/exprtk.h	/^         e_sf4ext08 = 2008, e_sf4ext09 = 2009, e_sf4ext10 = 2010, e_sf4ext11 = 2011,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext12	app/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext13	app/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext14	app/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext15	app/exprtk.h	/^         e_sf4ext12 = 2012, e_sf4ext13 = 2013, e_sf4ext14 = 2014, e_sf4ext15 = 2015,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext16	app/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext17	app/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext18	app/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext19	app/exprtk.h	/^         e_sf4ext16 = 2016, e_sf4ext17 = 2017, e_sf4ext18 = 2018, e_sf4ext19 = 2019,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext20	app/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext21	app/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext22	app/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext23	app/exprtk.h	/^         e_sf4ext20 = 2020, e_sf4ext21 = 2021, e_sf4ext22 = 2022, e_sf4ext23 = 2023,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext24	app/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext25	app/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext26	app/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext27	app/exprtk.h	/^         e_sf4ext24 = 2024, e_sf4ext25 = 2025, e_sf4ext26 = 2026, e_sf4ext27 = 2027,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext28	app/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext29	app/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext30	app/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext31	app/exprtk.h	/^         e_sf4ext28 = 2028, e_sf4ext29 = 2029, e_sf4ext30 = 2030, e_sf4ext31 = 2031,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext32	app/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext33	app/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext34	app/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext35	app/exprtk.h	/^         e_sf4ext32 = 2032, e_sf4ext33 = 2033, e_sf4ext34 = 2034, e_sf4ext35 = 2035,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext36	app/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext37	app/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext38	app/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext39	app/exprtk.h	/^         e_sf4ext36 = 2036, e_sf4ext37 = 2037, e_sf4ext38 = 2038, e_sf4ext39 = 2039,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext40	app/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext41	app/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext42	app/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext43	app/exprtk.h	/^         e_sf4ext40 = 2040, e_sf4ext41 = 2041, e_sf4ext42 = 2042, e_sf4ext43 = 2043,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext44	app/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext45	app/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext46	app/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext47	app/exprtk.h	/^         e_sf4ext44 = 2044, e_sf4ext45 = 2045, e_sf4ext46 = 2046, e_sf4ext47 = 2047,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext48	app/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext49	app/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext50	app/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext51	app/exprtk.h	/^         e_sf4ext48 = 2048, e_sf4ext49 = 2049, e_sf4ext50 = 2050, e_sf4ext51 = 2051,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext52	app/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext53	app/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext54	app/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext55	app/exprtk.h	/^         e_sf4ext52 = 2052, e_sf4ext53 = 2053, e_sf4ext54 = 2054, e_sf4ext55 = 2055,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext56	app/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext57	app/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext58	app/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext59	app/exprtk.h	/^         e_sf4ext56 = 2056, e_sf4ext57 = 2057, e_sf4ext58 = 2058, e_sf4ext59 = 2059,$/;"	e	enum:exprtk::details::operator_type
e_sf4ext60	app/exprtk.h	/^         e_sf4ext60 = 2060, e_sf4ext61 = 2061$/;"	e	enum:exprtk::details::operator_type
e_sf4ext61	app/exprtk.h	/^         e_sf4ext60 = 2060, e_sf4ext61 = 2061$/;"	e	enum:exprtk::details::operator_type
e_sf50	app/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf51	app/exprtk.h	/^         e_sf48 = 1048, e_sf49 = 1049, e_sf50 = 1050, e_sf51 = 1051,$/;"	e	enum:exprtk::details::operator_type
e_sf52	app/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf53	app/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf54	app/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf55	app/exprtk.h	/^         e_sf52 = 1052, e_sf53 = 1053, e_sf54 = 1054, e_sf55 = 1055,$/;"	e	enum:exprtk::details::operator_type
e_sf56	app/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf57	app/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf58	app/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf59	app/exprtk.h	/^         e_sf56 = 1056, e_sf57 = 1057, e_sf58 = 1058, e_sf59 = 1059,$/;"	e	enum:exprtk::details::operator_type
e_sf60	app/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf61	app/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf62	app/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf63	app/exprtk.h	/^         e_sf60 = 1060, e_sf61 = 1061, e_sf62 = 1062, e_sf63 = 1063,$/;"	e	enum:exprtk::details::operator_type
e_sf64	app/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf65	app/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf66	app/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf67	app/exprtk.h	/^         e_sf64 = 1064, e_sf65 = 1065, e_sf66 = 1066, e_sf67 = 1067,$/;"	e	enum:exprtk::details::operator_type
e_sf68	app/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf69	app/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf70	app/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf71	app/exprtk.h	/^         e_sf68 = 1068, e_sf69 = 1069, e_sf70 = 1070, e_sf71 = 1071,$/;"	e	enum:exprtk::details::operator_type
e_sf72	app/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf73	app/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf74	app/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf75	app/exprtk.h	/^         e_sf72 = 1072, e_sf73 = 1073, e_sf74 = 1074, e_sf75 = 1075,$/;"	e	enum:exprtk::details::operator_type
e_sf76	app/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf77	app/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf78	app/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf79	app/exprtk.h	/^         e_sf76 = 1076, e_sf77 = 1077, e_sf78 = 1078, e_sf79 = 1079,$/;"	e	enum:exprtk::details::operator_type
e_sf80	app/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf81	app/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf82	app/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf83	app/exprtk.h	/^         e_sf80 = 1080, e_sf81 = 1081, e_sf82 = 1082, e_sf83 = 1083,$/;"	e	enum:exprtk::details::operator_type
e_sf84	app/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf85	app/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf86	app/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf87	app/exprtk.h	/^         e_sf84 = 1084, e_sf85 = 1085, e_sf86 = 1086, e_sf87 = 1087,$/;"	e	enum:exprtk::details::operator_type
e_sf88	app/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf89	app/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf90	app/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf91	app/exprtk.h	/^         e_sf88 = 1088, e_sf89 = 1089, e_sf90 = 1090, e_sf91 = 1091,$/;"	e	enum:exprtk::details::operator_type
e_sf92	app/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf93	app/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf94	app/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf95	app/exprtk.h	/^         e_sf92 = 1092, e_sf93 = 1093, e_sf94 = 1094, e_sf95 = 1095,$/;"	e	enum:exprtk::details::operator_type
e_sf96	app/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sf97	app/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sf98	app/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sf99	app/exprtk.h	/^         e_sf96 = 1096, e_sf97 = 1097, e_sf98 = 1098, e_sf99 = 1099,$/;"	e	enum:exprtk::details::operator_type
e_sffinal	app/exprtk.h	/^         e_sffinal  = 1100,$/;"	e	enum:exprtk::details::operator_type
e_sgn	app/exprtk.h	/^            e_sgn           , e_erf           , e_erfc        , e_ncdf         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sgn	app/exprtk.h	/^         e_inrange , e_sgn     , e_r2d     , e_d2r     ,$/;"	e	enum:exprtk::details::operator_type
e_shl	app/exprtk.h	/^            e_modass      =  15, e_shr         =  16, e_shl         =  17,$/;"	e	enum:exprtk::lexer::token::token_type
e_shl	app/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_shr	app/exprtk.h	/^            e_modass      =  15, e_shr         =  16, e_shl         =  17,$/;"	e	enum:exprtk::lexer::token::token_type
e_shr	app/exprtk.h	/^         e_shr     , e_shl     , e_abs     , e_acos    ,$/;"	e	enum:exprtk::details::operator_type
e_sin	app/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sin	app/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_sinc	app/exprtk.h	/^            e_pos           , e_round         , e_sin         , e_sinc         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sinc	app/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_sinh	app/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sinh	app/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_smulti	app/exprtk.h	/^         e_like    , e_ilike   , e_multi   , e_smulti  ,$/;"	e	enum:exprtk::details::operator_type
e_sqrt	app/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sqrt	app/exprtk.h	/^         e_root    , e_sqrt    , e_sin     , e_sinc    ,$/;"	e	enum:exprtk::details::operator_type
e_st_function	app/exprtk.h	/^         e_st_function       = 5,$/;"	e	enum:exprtk::parser::symbol_type
e_st_local_string	app/exprtk.h	/^         e_st_local_string   = 8$/;"	e	enum:exprtk::parser::symbol_type
e_st_local_variable	app/exprtk.h	/^         e_st_local_variable = 6,$/;"	e	enum:exprtk::parser::symbol_type
e_st_local_vector	app/exprtk.h	/^         e_st_local_vector   = 7,$/;"	e	enum:exprtk::parser::symbol_type
e_st_string	app/exprtk.h	/^         e_st_string         = 4,$/;"	e	enum:exprtk::parser::symbol_type
e_st_unknown	app/exprtk.h	/^         e_st_unknown        = 0,$/;"	e	enum:exprtk::parser::symbol_type
e_st_variable	app/exprtk.h	/^         e_st_variable       = 1,$/;"	e	enum:exprtk::parser::symbol_type
e_st_vecelem	app/exprtk.h	/^         e_st_vecelem        = 3,$/;"	e	enum:exprtk::parser::symbol_type
e_st_vector	app/exprtk.h	/^         e_st_vector         = 2,$/;"	e	enum:exprtk::parser::symbol_type
e_start	algorithm/QuadLayer.h	/^  Edge* e_start() const { return e_start_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
e_strass	app/exprtk.h	/^            e_sf3ext        , e_sf4ext        , e_nulleq      , e_strass       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strccondition	app/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strconcat	app/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strcondition	app/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strength_reduction	app/exprtk.h	/^            e_strength_reduction   =   64,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_strfunction	app/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strgenrange	app/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_string	app/exprtk.h	/^            e_string      =   9, e_assign      =  10, e_addass      =  11,$/;"	e	enum:exprtk::lexer::token::token_type
e_string	app/exprtk.h	/^            e_string$/;"	e	enum:exprtk::expression::control_block::data_type
e_string	app/exprtk.h	/^            e_string$/;"	e	enum:exprtk::parser::scope_element::element_type
e_string	app/exprtk.h	/^         e_string$/;"	e	enum:exprtk::type_store::store_type
e_stringconst	app/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringsize	app/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvar	app/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvararg	app/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvarrng	app/exprtk.h	/^            e_stringvarrng  , e_cstringvarrng , e_strgenrange , e_strconcat    ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_stringvarsize	app/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_strswap	app/exprtk.h	/^            e_stringvarsize , e_strswap       , e_stringsize  , e_stringvararg ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sub	app/exprtk.h	/^            e_strcondition  , e_strccondition , e_add         , e_sub          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_sub	app/exprtk.h	/^            e_sub         = '-', e_div         = '\/', e_mul         = '*',$/;"	e	enum:exprtk::lexer::token::token_type
e_sub	app/exprtk.h	/^         e_default , e_null    , e_add     , e_sub     ,$/;"	e	enum:exprtk::details::operator_type
e_subass	app/exprtk.h	/^            e_subass      =  12, e_mulass      =  13, e_divass      =  14,$/;"	e	enum:exprtk::lexer::token::token_type
e_subass	app/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_sum	app/exprtk.h	/^         e_sum     , e_prod    , e_lt      , e_lte     ,$/;"	e	enum:exprtk::details::operator_type
e_swap	app/exprtk.h	/^            e_continue      , e_swap$/;"	e	enum:exprtk::details::expression_node::node_type
e_swap	app/exprtk.h	/^            e_swap        =  21, e_lt          = '<', e_gt          = '>',$/;"	e	enum:exprtk::lexer::token::token_type
e_swap	app/exprtk.h	/^         e_swap    ,$/;"	e	enum:exprtk::details::operator_type
e_switch	app/exprtk.h	/^            e_for           , e_switch        , e_mswitch     , e_return       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_symbol	app/exprtk.h	/^            e_eof         =   6, e_number      =   7, e_symbol      =   8,$/;"	e	enum:exprtk::lexer::token::token_type
e_symtab	app/exprtk.h	/^         e_symtab  = 5,$/;"	e	enum:exprtk::parser_error::error_mode
e_syntax	app/exprtk.h	/^         e_syntax  = 1,$/;"	e	enum:exprtk::parser_error::error_mode
e_tan	app/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_tan	app/exprtk.h	/^         e_sinh    , e_sec     , e_csc     , e_tan     ,$/;"	e	enum:exprtk::details::operator_type
e_tanh	app/exprtk.h	/^            e_sinh          , e_sqrt          , e_tan         , e_tanh         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_tanh	app/exprtk.h	/^         e_tanh    , e_cot     , e_clamp   , e_iclamp  ,$/;"	e	enum:exprtk::details::operator_type
e_ternary	app/exprtk.h	/^            e_ternary     = '?'$/;"	e	enum:exprtk::lexer::token::token_type
e_timeout	app/exprtk.h	/^          e_timeout         = 2$/;"	e	enum:exprtk::loop_runtime_check::violation_type
e_token	app/exprtk.h	/^         e_token   = 2,$/;"	e	enum:exprtk::parser_error::error_mode
e_trinary	app/exprtk.h	/^            e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_trunc	app/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_trunc	app/exprtk.h	/^         e_trunc   , e_assign  , e_addass  , e_subass  ,$/;"	e	enum:exprtk::details::operator_type
e_unary	app/exprtk.h	/^            e_none          , e_null          , e_constant    , e_unary        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_unknown	app/exprtk.h	/^            e_unknown              =    0,$/;"	e	enum:exprtk::parser::settings_store::settings_compilation_options
e_unknown	app/exprtk.h	/^            e_unknown  ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_unknown	app/exprtk.h	/^          e_unknown         = 0,$/;"	e	enum:exprtk::loop_runtime_check::violation_type
e_unknown	app/exprtk.h	/^         e_unknown = 0,$/;"	e	enum:exprtk::parser_error::error_mode
e_unknown	app/exprtk.h	/^         e_unknown,$/;"	e	enum:exprtk::type_store::store_type
e_usr_constant_type	app/exprtk.h	/^            e_usr_constant_type = 2$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_symbol_type
e_usr_unknown_type	app/exprtk.h	/^            e_usr_unknown_type  = 0,$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_symbol_type
e_usr_variable_type	app/exprtk.h	/^            e_usr_variable_type = 1,$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_symbol_type
e_usrmode_default	app/exprtk.h	/^            e_usrmode_default  = 0,$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_mode
e_usrmode_extended	app/exprtk.h	/^            e_usrmode_extended = 1$/;"	e	enum:exprtk::parser::unknown_symbol_resolver::usr_mode
e_uvouv	app/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vafunction	app/exprtk.h	/^            e_function      , e_vafunction    , e_genfunction , e_strfunction  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_valvecarith	app/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_valvecineq	app/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vararg	app/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_variable	app/exprtk.h	/^            e_retenv        , e_variable      , e_stringvar   , e_stringconst  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_variable	app/exprtk.h	/^            e_variable,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_vecdata	app/exprtk.h	/^            e_vecdata  ,$/;"	e	enum:exprtk::expression::control_block::data_type
e_vecdefass	app/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecelem	app/exprtk.h	/^            e_vecelem ,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_vecelem	app/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecfunc	app/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecholder	app/exprtk.h	/^            e_vecholder,$/;"	e	enum:exprtk::expression::control_block::data_type
e_vecondition	app/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecopvalass	app/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecopvecass	app/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vector	app/exprtk.h	/^            e_vector        , e_vecelem       , e_rbvecelem   , e_rbveccelem   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vector	app/exprtk.h	/^            e_vector  ,$/;"	e	enum:exprtk::parser::scope_element::element_type
e_vector	app/exprtk.h	/^         e_vector ,$/;"	e	enum:exprtk::type_store::store_type
e_vecunaryop	app/exprtk.h	/^            e_valvecarith   , e_vecunaryop    , e_vecondition , e_break        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvalarith	app/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvalass	app/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvalineq	app/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecarith	app/exprtk.h	/^            e_vecvalineq    , e_valvecineq    , e_vecvecarith , e_vecvalarith  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecass	app/exprtk.h	/^            e_vecdefass     , e_vecvalass     , e_vecvecass   , e_vecopvalass  ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecineq	app/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vecvecswap	app/exprtk.h	/^            e_vecopvecass   , e_vecfunc       , e_vecvecswap  , e_vecvecineq   ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vob	app/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_voc	app/exprtk.h	/^            e_cov           , e_voc           , e_vob         , e_bov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vococov	app/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vocov	app/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vocovoc	app/exprtk.h	/^            e_covocov       , e_vocovoc       , e_covovoc     , e_vococov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vocovov	app/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vov	app/exprtk.h	/^            e_frac          , e_trunc         , e_uvouv       , e_vov          ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovoc	app/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovocov	app/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovov	app/exprtk.h	/^            e_cob           , e_boc           , e_vovov       , e_vovoc        ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovovoc	app/exprtk.h	/^            e_vovovoc       , e_vovocov       , e_vocovov     , e_covovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_vovovov	app/exprtk.h	/^            e_vocov         , e_covov         , e_covoc       , e_vovovov      ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_while	app/exprtk.h	/^            e_vararg        , e_conditional   , e_while       , e_repeat       ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_while_loop	app/exprtk.h	/^         e_while_loop        = 2,$/;"	e	enum:exprtk::loop_runtime_check::loop_types
e_write	app/exprtk.h	/^         e_write = 2,$/;"	e	enum:exprtk::rtl::io::file::details::file_mode
e_xnor	app/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_xnor	app/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
e_xor	app/exprtk.h	/^            e_or            , e_nor           , e_xor         , e_xnor         ,$/;"	e	enum:exprtk::details::expression_node::node_type
e_xor	app/exprtk.h	/^         e_or      , e_nor     , e_xor     , e_xnor    ,$/;"	e	enum:exprtk::details::operator_type
edgelength	algorithm/Quad.h	/^  double edgelength(unsigned int i) const { return edge_len_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
edgelength	algorithm/Triangle.h	/^  double edgelength(unsigned int i) const { return edge_len_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
edgelist	algorithm/Edge.h	/^  EdgeList& edgelist() { return *edgelist_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
edgelist	algorithm/Edge.h	/^  const EdgeList& edgelist() const { return *edgelist_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
edges	algorithm/EdgeList.h	/^  auto& edges() { return edges_; }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
edges	algorithm/EdgeList.h	/^  const auto& edges() const { return edges_; }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
edges	algorithm/Vertex.h	/^  EdgeList& edges() { return edges_;}$/;"	f	class:TQMesh::TQAlgorithm::Vertex
edges	algorithm/Vertex.h	/^  const Edge& edges(size_t i) const $/;"	f	class:TQMesh::TQAlgorithm::Vertex
edges	algorithm/Vertex.h	/^  const EdgeList& edges() const { return edges_;}$/;"	f	class:TQMesh::TQAlgorithm::Vertex
edges	tests/container_test.cpp	/^  const Edge& edges(size_t i) const $/;"	f	class:ContainerTests::Vertex
edges	tests/container_test.cpp	/^  const EdgeList& edges() const { return edges_;}$/;"	f	class:ContainerTests::Vertex
element_	app/exprtk.h	/^         std::vector<scope_element> element_;$/;"	m	class:exprtk::parser::scope_element_manager
element_type	app/exprtk.h	/^         enum element_type$/;"	g	struct:exprtk::parser::scope_element
else_stmt	app/exprtk.h	38707;"	d
empty	app/exprtk.h	/^         inline bool empty() const$/;"	f	class:exprtk::lexer::generator
empty	app/exprtk.h	/^         inline bool empty() const$/;"	f	class:exprtk::parser::scope_element_manager
empty	app/exprtk.h	/^         inline bool empty() const$/;"	f	class:exprtk::type_store::parameter_list
empty	app/exprtk.h	/^         inline bool empty() const$/;"	f	struct:exprtk::parser::symtab_store
empty_method_body	app/exprtk.h	17094;"	d
empty_method_body	app/exprtk.h	17173;"	d
enable_all_arithmetic_ops	app/exprtk.h	/^         settings_store& enable_all_arithmetic_ops()$/;"	f	class:exprtk::parser::settings_store
enable_all_assignment_ops	app/exprtk.h	/^         settings_store& enable_all_assignment_ops()$/;"	f	class:exprtk::parser::settings_store
enable_all_base_functions	app/exprtk.h	/^         settings_store& enable_all_base_functions()$/;"	f	class:exprtk::parser::settings_store
enable_all_control_structures	app/exprtk.h	/^         settings_store& enable_all_control_structures()$/;"	f	class:exprtk::parser::settings_store
enable_all_inequality_ops	app/exprtk.h	/^         settings_store& enable_all_inequality_ops()$/;"	f	class:exprtk::parser::settings_store
enable_all_logic_ops	app/exprtk.h	/^         settings_store& enable_all_logic_ops()$/;"	f	class:exprtk::parser::settings_store
enable_arithmetic_operation	app/exprtk.h	/^         settings_store& enable_arithmetic_operation(settings_arithmetic_opr arithmetic)$/;"	f	class:exprtk::parser::settings_store
enable_assignment_operation	app/exprtk.h	/^         settings_store& enable_assignment_operation(settings_assignment_opr assignment)$/;"	f	class:exprtk::parser::settings_store
enable_base_function	app/exprtk.h	/^         settings_store& enable_base_function(settings_base_funcs bf)$/;"	f	class:exprtk::parser::settings_store
enable_bracket_check_	app/exprtk.h	/^         bool enable_bracket_check_;$/;"	m	class:exprtk::parser::settings_store
enable_collect_assings_	app/exprtk.h	/^         bool enable_collect_assings_;$/;"	m	class:exprtk::parser::settings_store
enable_collect_funcs_	app/exprtk.h	/^         bool enable_collect_funcs_;$/;"	m	class:exprtk::parser::settings_store
enable_collect_vars_	app/exprtk.h	/^         bool enable_collect_vars_;$/;"	m	class:exprtk::parser::settings_store
enable_commutative_check_	app/exprtk.h	/^         bool enable_commutative_check_;$/;"	m	class:exprtk::parser::settings_store
enable_control_structure	app/exprtk.h	/^         settings_store& enable_control_structure(settings_control_structs ctrl_struct)$/;"	f	class:exprtk::parser::settings_store
enable_has_side_effects	app/exprtk.h	/^   void enable_has_side_effects(FunctionType& func)$/;"	f	namespace:exprtk
enable_inequality_operation	app/exprtk.h	/^         settings_store& enable_inequality_operation(settings_inequality_opr inequality)$/;"	f	class:exprtk::parser::settings_store
enable_joiner_	app/exprtk.h	/^         bool enable_joiner_;$/;"	m	class:exprtk::parser::settings_store
enable_local_vardef	app/exprtk.h	/^         settings_store& enable_local_vardef()$/;"	f	class:exprtk::parser::settings_store
enable_logic_operation	app/exprtk.h	/^         settings_store& enable_logic_operation(settings_logic_opr logic)$/;"	f	class:exprtk::parser::settings_store
enable_numeric_check_	app/exprtk.h	/^         bool enable_numeric_check_;$/;"	m	class:exprtk::parser::settings_store
enable_replacer_	app/exprtk.h	/^         bool enable_replacer_;$/;"	m	class:exprtk::parser::settings_store
enable_sequence_check_	app/exprtk.h	/^         bool enable_sequence_check_;$/;"	m	class:exprtk::parser::settings_store
enable_strength_reduction_	app/exprtk.h	/^         bool enable_strength_reduction_;$/;"	m	class:exprtk::parser::settings_store
enable_unknown_symbol_resolver	app/exprtk.h	/^      inline void enable_unknown_symbol_resolver(unknown_symbol_resolver& usr)$/;"	f	class:exprtk::parser
enable_unknown_symbol_resolver	app/exprtk.h	/^      inline void enable_unknown_symbol_resolver(unknown_symbol_resolver* usr = reinterpret_cast<unknown_symbol_resolver*>(0))$/;"	f	class:exprtk::parser
enable_zero_parameters	app/exprtk.h	/^   void enable_zero_parameters(FunctionType& func)$/;"	f	namespace:exprtk
end	algorithm/Domain.h	/^  const_iterator end() const { return boundaries_.end(); }$/;"	f	class:TQMesh::TQAlgorithm::Domain
end	algorithm/Domain.h	/^  iterator end() { return boundaries_.end(); }$/;"	f	class:TQMesh::TQAlgorithm::Domain
end	algorithm/EdgeList.h	/^  const_iterator end() const { return edges_.end(); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
end	algorithm/EdgeList.h	/^  iterator end() { return edges_.end(); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
end	app/exprtk.h	/^         inline const value_t* end() const$/;"	f	struct:exprtk::type_store::type_view
end	app/exprtk.h	/^         inline value_t* end()$/;"	f	struct:exprtk::type_store::type_view
end	utils/Container.h	/^  const_iterator end() const { return items_.end(); }$/;"	f	class:TQMesh::TQUtils::Container
end	utils/Container.h	/^  iterator end() { return items_.end(); }$/;"	f	class:TQMesh::TQUtils::Container
end	utils/oldParaReader.h	/^  const string& end() const { return end_; }$/;"	f	class:ListParameter
end	utils/oldParaReader.h	/^  string& end() { return end_; }$/;"	f	class:ListParameter
end_	utils/oldParaReader.h	/^  string end_;$/;"	m	class:ListParameter
end_key	utils/ParaReader.h	/^  const string& end_key() const { return end_key_; }$/;"	f	class:CppUtils::ParameterBase
end_key	utils/ParaReader.h	/^  string& end_key() { return end_key_; }$/;"	f	class:CppUtils::ParameterBase
end_key_	utils/ParaReader.h	/^  string end_key_;$/;"	m	class:CppUtils::ParameterBase
entity_name	app/exprtk.h	/^         inline std::string entity_name(const PtrType& ptr) const$/;"	f	struct:exprtk::symbol_table::type_store
eof	app/exprtk.h	/^         bool eof() const$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
eof	app/exprtk.h	/^      eof()$/;"	f	struct:exprtk::rtl::io::file::eof
eof	app/exprtk.h	/^   struct eof : public exprtk::ifunction<T>$/;"	s	namespace:exprtk::rtl::io::file
eof_token_	app/exprtk.h	/^         token_t            eof_token_;$/;"	m	class:exprtk::lexer::generator
epsilon_type	app/exprtk.h	/^            struct epsilon_type {};$/;"	s	namespace:exprtk::details::numeric::details
eq_op	app/exprtk.h	/^      struct eq_op : public opr_base<T>$/;"	s	namespace:exprtk::details
equal	app/exprtk.h	/^         inline T equal(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
equal_impl	app/exprtk.h	/^            inline T equal_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
equal_impl	app/exprtk.h	/^            inline T equal_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
equal_impl	app/exprtk.h	/^            inline float equal_impl(const float v0, const float v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
equal_op	app/exprtk.h	/^      struct equal_op : public opr_base<T>$/;"	s	namespace:exprtk::details
erf_impl	app/exprtk.h	/^            inline T erf_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
erf_impl	app/exprtk.h	/^            inline T erf_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
erfc_impl	app/exprtk.h	/^            inline T erfc_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
erfc_impl	app/exprtk.h	/^            inline T erfc_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
error	app/exprtk.h	/^            std::pair<lexer::token,lexer::token> error(const std::size_t index)$/;"	f	class:exprtk::lexer::helper::sequence_validator
error	app/exprtk.h	/^            std::pair<lexer::token,lexer::token> error(const std::size_t index)$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
error	app/exprtk.h	/^      inline std::string error() const$/;"	f	class:exprtk::parser
error	utils/ParaReader.h	/^  void error(string msg) { throw Invalid{msg}; }$/;"	f	class:CppUtils::ParaReader
error	utils/oldParaReader.h	/^  void error(string msg) { throw Invalid{msg}; }$/;"	f	class:ParaReader
error_count	app/exprtk.h	/^            std::size_t error_count() const$/;"	f	class:exprtk::lexer::helper::numeric_checker
error_count	app/exprtk.h	/^            std::size_t error_count() const$/;"	f	class:exprtk::lexer::helper::sequence_validator
error_count	app/exprtk.h	/^            std::size_t error_count() const$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
error_count	app/exprtk.h	/^      inline std::size_t error_count() const$/;"	f	class:exprtk::parser
error_index	app/exprtk.h	/^            std::size_t error_index(const std::size_t& i)$/;"	f	class:exprtk::lexer::helper::numeric_checker
error_line	app/exprtk.h	/^         std::string error_line;$/;"	m	struct:exprtk::parser_error::type
error_list_	app/exprtk.h	/^            std::vector<std::pair<lexer::token,lexer::token> > error_list_;$/;"	m	class:exprtk::lexer::helper::sequence_validator
error_list_	app/exprtk.h	/^            std::vector<std::pair<lexer::token,lexer::token> > error_list_;$/;"	m	class:exprtk::lexer::helper::sequence_validator_3tokens
error_list_	app/exprtk.h	/^            std::vector<std::size_t> error_list_;$/;"	m	class:exprtk::lexer::helper::numeric_checker
error_list_	app/exprtk.h	/^      std::deque<parser_error::type> error_list_;$/;"	m	class:exprtk::parser
error_message	utils/ParaReader.h	/^    string error_message;$/;"	m	class:CppUtils::ParaReader::Invalid
error_message	utils/oldParaReader.h	/^    string error_message;$/;"	m	class:ParaReader::Invalid
error_mode	app/exprtk.h	/^      enum error_mode$/;"	g	namespace:exprtk::parser_error
error_node	app/exprtk.h	/^      static inline expression_node_ptr error_node()$/;"	f	class:exprtk::parser
error_t	app/exprtk.h	/^      typedef parser_error::type      error_t;$/;"	t	struct:exprtk::type_defs
error_token	app/exprtk.h	/^            lexer::token error_token()$/;"	f	class:exprtk::lexer::helper::bracket_checker
error_token_	app/exprtk.h	/^            lexer::token error_token_;$/;"	m	class:exprtk::lexer::helper::bracket_checker
error_token_inserter	app/exprtk.h	/^            lexer::token_inserter* error_token_inserter;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
error_token_joiner	app/exprtk.h	/^            lexer::token_joiner*   error_token_joiner;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
error_token_modifier	app/exprtk.h	/^            lexer::token_modifier* error_token_modifier;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
error_token_scanner	app/exprtk.h	/^            lexer::token_scanner*  error_token_scanner;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
eval	tests/container_test.cpp	/^  inline Vec2d eval( const double t ) const$/;"	f	class:ContainerTests::SpiralFunction
eval	tests/container_test.cpp	/^  inline void eval( const double t, double& x, double& y)$/;"	f	class:ContainerTests::SpiralFunction
eval	tests/qtree_test.cpp	/^  inline Vec2d eval( const double t ) const$/;"	f	class:QTreeTests::SpiralFunction
eval	tests/qtree_test.cpp	/^  inline void eval( const double t, double& x, double& y)$/;"	f	class:QTreeTests::SpiralFunction
evaluate	app/exprtk.h	/^         static inline T evaluate(const Type x, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	app/exprtk.h	/^         static inline T evaluate(const Type x, const Type c2, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	app/exprtk.h	/^         static inline T evaluate(const Type x, const Type c3, const Type c2, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	app/exprtk.h	/^         static inline T evaluate(const Type x, const Type c4, const Type c3, const Type c2, const Type c1, const Type c0)$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate	app/exprtk.h	/^         static inline T evaluate(const Type x,$/;"	f	struct:exprtk::polynomial::poly_impl
evaluate_branches	app/exprtk.h	/^         struct evaluate_branches <T_,1>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	app/exprtk.h	/^         struct evaluate_branches <T_,2>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	app/exprtk.h	/^         struct evaluate_branches <T_,3>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	app/exprtk.h	/^         struct evaluate_branches <T_,4>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	app/exprtk.h	/^         struct evaluate_branches <T_,5>$/;"	s	class:exprtk::details::exprtk_final
evaluate_branches	app/exprtk.h	/^         struct evaluate_branches$/;"	s	class:exprtk::details::exprtk_final
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[10])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[11])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[12])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[13])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[14])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[15])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[16])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[17])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[18])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[19])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[1])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[20])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[2])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[3])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[4])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[5])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[6])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[7])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[8])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^            static inline T_ execute(ifunction& f, T_ (&v)[9])$/;"	f	struct:exprtk::details::exprtk_final::invoke
execute	app/exprtk.h	/^         static inline void execute(std::string& s, char_cptr data, const std::size_t size)$/;"	f	struct:exprtk::details::asn_addassignment
execute	app/exprtk.h	/^         static inline void execute(std::string& s, char_cptr data, const std::size_t size)$/;"	f	struct:exprtk::details::asn_assignment
execute	app/exprtk.h	/^         struct invoke { static inline T execute(ifunction&, branch_t (&)[ParamCount]) { return std::numeric_limits<T_>::quiet_NaN(); } };$/;"	f	struct:exprtk::details::exprtk_final::invoke
exp_impl	app/exprtk.h	/^            template <typename T> inline T   exp_impl(const T v, int_type_tag) { return std::exp  (v); }$/;"	f	namespace:exprtk::details::numeric::details
exp_impl	app/exprtk.h	/^            template <typename T> inline T   exp_impl(const T v, real_type_tag) { return std::exp  (v); }$/;"	f	namespace:exprtk::details::numeric::details
expm1_impl	app/exprtk.h	/^            inline T expm1_impl(const T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
expm1_impl	app/exprtk.h	/^            inline T expm1_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
export_size_function	algorithm/Domain.h	/^  void export_size_function(const Vec2d& xy_min, const Vec2d& xy_max,$/;"	f	class:TQMesh::TQAlgorithm::Domain
expr	app/exprtk.h	/^         expression_ptr expr;$/;"	m	struct:exprtk::expression::control_block
expr_as_vec1_store_	app/exprtk.h	/^         mutable tmp_vs_t  expr_as_vec1_store_;$/;"	m	class:exprtk::details::generic_function_node
expr_map_	app/exprtk.h	/^      std::map<std::string,expression_t> expr_map_;$/;"	m	class:exprtk::function_compositor
expression	app/exprtk.h	/^         expression_t expression;$/;"	m	struct:exprtk::function_compositor::base_func
expression	app/exprtk.h	/^         inline function& expression(const std::string& e)$/;"	f	struct:exprtk::function_compositor::function
expression	app/exprtk.h	/^      explicit expression(const symbol_table<T>& symbol_table)$/;"	f	class:exprtk::expression
expression	app/exprtk.h	/^      expression()$/;"	f	class:exprtk::expression
expression	app/exprtk.h	/^      expression(const expression<T>& e)$/;"	f	class:exprtk::expression
expression	app/exprtk.h	/^   class expression$/;"	c	namespace:exprtk
expression	app/size_function.cpp	/^static exprtk::expression<double>   expression;$/;"	v	file:
expression_	app/exprtk.h	/^         expression_node_ptr& expression_;$/;"	m	struct:exprtk::parser::scoped_expression_delete
expression_	app/exprtk.h	/^         std::string expression_;$/;"	m	struct:exprtk::function_compositor::function
expression_generator	app/exprtk.h	/^      class expression_generator$/;"	c	class:exprtk::parser
expression_generator_	app/exprtk.h	/^      expression_generator<T> expression_generator_;$/;"	m	class:exprtk::parser
expression_helper	app/exprtk.h	/^   class expression_helper$/;"	c	namespace:exprtk
expression_node	app/exprtk.h	/^      class expression_node : public node_collector_interface<expression_node<T> >,$/;"	c	namespace:exprtk::details
expression_node_ptr	app/exprtk.h	/^         typedef details::expression_node<Type>* expression_node_ptr;$/;"	t	class:exprtk::parser::expression_generator
expression_node_ptr	app/exprtk.h	/^         typedef expression_node<T>*           expression_node_ptr;$/;"	t	struct:exprtk::details::range_pack
expression_node_ptr	app/exprtk.h	/^         typedef expression_node_t*        expression_node_ptr;$/;"	t	struct:exprtk::parser::scope_element
expression_node_ptr	app/exprtk.h	/^         typedef expression_node_t* expression_node_ptr;$/;"	t	class:exprtk::parser::scope_element_manager
expression_node_ptr	app/exprtk.h	/^      inline std::size_t parse_base_function_call(expression_node_ptr (&param_list)[MaxNumberofParameters], const std::string& function_name = "")$/;"	m	class:exprtk::parser
expression_node_ptr	app/exprtk.h	/^      typedef expression_node_t*                          expression_node_ptr;$/;"	t	class:exprtk::parser
expression_node_t	app/exprtk.h	/^      typedef details::expression_node<T>                 expression_node_t;$/;"	t	class:exprtk::parser
expression_ptr	app/exprtk.h	/^         typedef details::expression_node<T>*        expression_ptr;$/;"	t	struct:exprtk::symbol_table::type_store
expression_ptr	app/exprtk.h	/^         typedef expression_node  <T>* expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node <T>* expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>*            expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>*          expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>*       expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>*       expression_ptr;$/;"	t	class:exprtk::details::repeat_until_loop_bc_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>*   expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::binary_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::expression_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::exprtk_final
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::for_loop_bc_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::for_loop_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::generic_function_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::quaternary_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::repeat_until_loop_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::switch_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::trinary_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::unary_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::while_loop_bc_node
expression_ptr	app/exprtk.h	/^         typedef expression_node<T>* expression_ptr;$/;"	t	class:exprtk::details::while_loop_node
expression_ptr	app/exprtk.h	/^      typedef details::expression_node<T>*        expression_ptr;$/;"	t	class:exprtk::symbol_table
expression_ptr	app/exprtk.h	/^      typedef details::expression_node<T>*  expression_ptr;$/;"	t	class:exprtk::expression
expression_t	app/exprtk.h	/^         typedef exprtk::expression<T>   expression_t;$/;"	t	struct:exprtk::details::collector_helper
expression_t	app/exprtk.h	/^      typedef expression<T>                               expression_t;$/;"	t	class:exprtk::parser
expression_t	app/exprtk.h	/^      typedef expression<T>           expression_t;$/;"	t	struct:exprtk::type_defs
expression_t	app/exprtk.h	/^      typedef exprtk::expression<T>             expression_t;$/;"	t	class:exprtk::function_compositor
exprtk	app/exprtk.h	/^namespace exprtk$/;"	n
exprtk_crtype	app/exprtk.h	14588;"	d
exprtk_crtype	app/exprtk.h	14745;"	d
exprtk_debug	app/exprtk.h	40698;"	d
exprtk_debug	app/exprtk.h	63;"	d
exprtk_define_epsilon_type	app/exprtk.h	825;"	d
exprtk_define_epsilon_type	app/exprtk.h	839;"	d
exprtk_define_erf	app/exprtk.h	1201;"	d
exprtk_define_erf	app/exprtk.h	1207;"	d
exprtk_define_erfc	app/exprtk.h	1245;"	d
exprtk_define_erfc	app/exprtk.h	1251;"	d
exprtk_define_freefunction	app/exprtk.h	18380;"	d
exprtk_define_freefunction	app/exprtk.h	18406;"	d
exprtk_define_process	app/exprtk.h	17509;"	d
exprtk_define_process	app/exprtk.h	17521;"	d
exprtk_define_unary_function	app/exprtk.h	1584;"	d
exprtk_define_unary_function	app/exprtk.h	1632;"	d
exprtk_define_unary_op	app/exprtk.h	13015;"	d
exprtk_define_unary_op	app/exprtk.h	13078;"	d
exprtk_disable_fallthrough_begin	app/exprtk.h	40706;"	d
exprtk_disable_fallthrough_begin	app/exprtk.h	73;"	d
exprtk_disable_fallthrough_end	app/exprtk.h	40710;"	d
exprtk_disable_fallthrough_end	app/exprtk.h	77;"	d
exprtk_error_location	app/exprtk.h	40702;"	d
exprtk_error_location	app/exprtk.h	68;"	d
exprtk_final	app/exprtk.h	/^      class T0oT1 exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class T0oT1oT2 exprtk_final : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class T0oT1oT2_sf3 exprtk_final : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class T0oT1oT2_sf3ext exprtk_final : public sf3ext_type_node<T,T0,T1,T2>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class T0oT1oT2oT3 exprtk_final : public T0oT1oT2oT3_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class T0oT1oT2oT3_sf4 exprtk_final : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class T0oT1oT2oT3_sf4ext exprtk_final : public T0oT1oT2oT3_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_rebasevec_celem_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_rebasevec_celem_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_rebasevec_elem_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_rebasevec_elem_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_string_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_vec_elem_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_vec_elem_op_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_vec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_vec_op_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_vecvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class assignment_vecvec_op_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class binary_ext_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class bipow_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class bipowninv_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class boc_node exprtk_final : public boc_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class bov_node exprtk_final : public bov_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class break_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class cob_node exprtk_final : public cob_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class conditional_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class conditional_string_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class conditional_vector_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class cons_conditional_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class cons_conditional_str_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class const_string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class continue_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class cov_node exprtk_final : public cov_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class for_loop_bc_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class for_loop_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class function_N_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class function_N_node<T,IFunction,0> exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class generic_string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class ipow_node exprtk_final: public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class ipowinv_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class literal_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class multi_switch_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class multimode_strfunction_node exprtk_final : public string_function_node<T,StringFunction>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class null_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class rebasevector_celem_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class rebasevector_elem_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class repeat_until_loop_bc_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class repeat_until_loop_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class return_envelope_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class return_node exprtk_final : public generic_function_node<T,null_igenfunc<T> >$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class scand_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class scor_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class sf3_node exprtk_final : public trinary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class sf3_var_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class sf4_node exprtk_final : public quaternary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class sf4_var_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class sos_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class sosos_node exprtk_final : public sosos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class str_sogens_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class str_vararg_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class str_xoxr_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class str_xrox_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class str_xroxr_node exprtk_final : public sos_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class string_concat_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class string_literal_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class string_range_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class string_size_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class stringvar_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class stringvar_size_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class swap_generic_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class swap_genstrings_node exprtk_final : public binary_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class swap_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class swap_string_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class swap_vecvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class switch_n_node exprtk_final : public switch_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class unary_branch_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class unary_variable_node exprtk_final : public uv_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class unary_vector_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class uvouv_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vararg_function_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vararg_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vararg_varnode exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class variable_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vec_binop_valvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vec_binop_vecval_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vec_binop_vecvec_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vector_assignment_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vector_elem_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vector_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vectorize_node exprtk_final : public expression_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vob_node exprtk_final : public vob_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class voc_node exprtk_final : public voc_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class vov_node exprtk_final : public vov_base_node<T>$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class while_loop_bc_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	/^      class while_loop_rtc_node exprtk_final$/;"	c	namespace:exprtk::details
exprtk_final	app/exprtk.h	40718;"	d
exprtk_final	app/exprtk.h	87;"	d
exprtk_loop	app/exprtk.h	10551;"	d
exprtk_loop	app/exprtk.h	10587;"	d
exprtk_loop	app/exprtk.h	10705;"	d
exprtk_loop	app/exprtk.h	10742;"	d
exprtk_loop	app/exprtk.h	10985;"	d
exprtk_loop	app/exprtk.h	11021;"	d
exprtk_loop	app/exprtk.h	11137;"	d
exprtk_loop	app/exprtk.h	11176;"	d
exprtk_loop	app/exprtk.h	11329;"	d
exprtk_loop	app/exprtk.h	11369;"	d
exprtk_loop	app/exprtk.h	11491;"	d
exprtk_loop	app/exprtk.h	11530;"	d
exprtk_loop	app/exprtk.h	11650;"	d
exprtk_loop	app/exprtk.h	11689;"	d
exprtk_loop	app/exprtk.h	11805;"	d
exprtk_loop	app/exprtk.h	11844;"	d
exprtk_loop	app/exprtk.h	14027;"	d
exprtk_loop	app/exprtk.h	14065;"	d
exprtk_loop	app/exprtk.h	14128;"	d
exprtk_loop	app/exprtk.h	14166;"	d
exprtk_loop	app/exprtk.h	9001;"	d
exprtk_loop	app/exprtk.h	9040;"	d
exprtk_override	app/exprtk.h	40714;"	d
exprtk_override	app/exprtk.h	86;"	d
exprtk_process_digit	app/exprtk.h	1726;"	d
exprtk_process_digit	app/exprtk.h	1757;"	d
exprtk_register_complex_type_tag	app/exprtk.h	796;"	d
exprtk_register_function	app/exprtk.h	38979;"	d
exprtk_register_function	app/exprtk.h	38990;"	d
exprtk_register_function	app/exprtk.h	39472;"	d
exprtk_register_function	app/exprtk.h	39487;"	d
exprtk_register_function	app/exprtk.h	40633;"	d
exprtk_register_function	app/exprtk.h	40665;"	d
exprtk_register_int_type_tag	app/exprtk.h	800;"	d
exprtk_register_int_type_tag	app/exprtk.h	820;"	d
exprtk_register_real_type_tag	app/exprtk.h	792;"	d
exprtk_register_real_type_tag	app/exprtk.h	819;"	d
extended_opr_switch_statements	app/exprtk.h	30074;"	d
extended_opr_switch_statements	app/exprtk.h	35974;"	d
f	app/exprtk.h	/^          ff00_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc00
f	app/exprtk.h	/^         ff01_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc01
f	app/exprtk.h	/^         ff02_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc02
f	app/exprtk.h	/^         ff03_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc03
f	app/exprtk.h	/^         ff04_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc04
f	app/exprtk.h	/^         ff05_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc05
f	app/exprtk.h	/^         ff06_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc06
f	app/exprtk.h	/^         ff07_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc07
f	app/exprtk.h	/^         ff08_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc08
f	app/exprtk.h	/^         ff09_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc09
f	app/exprtk.h	/^         ff10_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc10
f	app/exprtk.h	/^         ff11_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc11
f	app/exprtk.h	/^         ff12_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc12
f	app/exprtk.h	/^         ff13_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc13
f	app/exprtk.h	/^         ff14_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc14
f	app/exprtk.h	/^         ff15_functor f;$/;"	m	struct:exprtk::symbol_table::freefunc15
f	app/exprtk.h	/^         inline bfunc_t f() const$/;"	f	class:exprtk::details::exprtk_final
f	app/exprtk.h	/^         inline ufunc_t f()$/;"	f	class:exprtk::details::exprtk_final
f	app/exprtk.h	/^         qfunc_t f() const$/;"	f	class:exprtk::details::exprtk_final
f	app/exprtk.h	/^         tfunc_t f() const$/;"	f	class:exprtk::details::exprtk_final
f0	app/exprtk.h	/^         bfunc_t f0() const$/;"	f	class:exprtk::details::exprtk_final
f0	app/exprtk.h	/^         inline bfunc_t f0() const$/;"	f	class:exprtk::details::exprtk_final
f0_	app/exprtk.h	/^         const bfunc_t f0_;$/;"	m	class:exprtk::details::exprtk_final
f1	app/exprtk.h	/^         bfunc_t f1() const$/;"	f	class:exprtk::details::exprtk_final
f1	app/exprtk.h	/^         inline bfunc_t f1() const$/;"	f	class:exprtk::details::exprtk_final
f1_	app/exprtk.h	/^         const bfunc_t f1_;$/;"	m	class:exprtk::details::exprtk_final
f2	app/exprtk.h	/^         inline bfunc_t f2() const$/;"	f	class:exprtk::details::exprtk_final
f2_	app/exprtk.h	/^         const bfunc_t f2_;$/;"	m	class:exprtk::details::exprtk_final
f_	algorithm/Domain.h	/^  UserSizeFunction f_;$/;"	m	class:TQMesh::TQAlgorithm::Domain
f_	app/exprtk.h	/^         const bfunc_t f_;$/;"	m	class:exprtk::details::exprtk_final
f_	app/exprtk.h	/^         const qfunc_t f_;$/;"	m	class:exprtk::details::exprtk_final
f_	app/exprtk.h	/^         const tfunc_t f_;$/;"	m	class:exprtk::details::exprtk_final
facet_l	algorithm/Edge.h	/^  Facet* facet_l() { return face_l_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
facet_l	algorithm/Edge.h	/^  const Facet* facet_l() const { return face_l_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
facet_l	algorithm/Edge.h	/^  void facet_l(Facet* f) { face_l_ = f; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
facet_r	algorithm/Edge.h	/^  Facet* facet_r() { return face_r_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
facet_r	algorithm/Edge.h	/^  const Facet* facet_r() const { return face_r_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
facet_r	algorithm/Edge.h	/^  void facet_r(Facet* f) { face_r_ = f; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
facets	algorithm/Vertex.h	/^  const Facet& facets(size_t i) const$/;"	f	class:TQMesh::TQAlgorithm::Vertex
facets	algorithm/Vertex.h	/^  const FacetList& facets() const { return facets_;}$/;"	f	class:TQMesh::TQAlgorithm::Vertex
fast_exp	app/exprtk.h	/^         struct fast_exp$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 0> { static inline T result(const T  ) { return T(1);      } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 1> { static inline T result(const T v) { return v;         } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 2> { static inline T result(const T v) { return v * v;     } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 3> { static inline T result(const T v) { return v * v * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 4> { static inline T result(const T v) { T v_2 = v * v; return v_2 * v_2; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 5> { static inline T result(const T v) { return fast_exp<T,4>::result(v) * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 6> { static inline T result(const T v) { T v_3 = fast_exp<T,3>::result(v); return v_3 * v_3; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 7> { static inline T result(const T v) { return fast_exp<T,6>::result(v) * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 8> { static inline T result(const T v) { T v_4 = fast_exp<T,4>::result(v); return v_4 * v_4; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 9> { static inline T result(const T v) { return fast_exp<T,8>::result(v) * v; } };$/;"	s	namespace:exprtk::details::numeric
fast_exp	app/exprtk.h	/^         template <typename T> struct fast_exp<T,10> { static inline T result(const T v) { T v_5 = fast_exp<T,5>::result(v); return v_5 * v_5; } };$/;"	s	namespace:exprtk::details::numeric
ff00_functor	app/exprtk.h	/^      typedef T (*ff00_functor)();$/;"	t	class:exprtk::symbol_table
ff01_functor	app/exprtk.h	/^      typedef T (*ff01_functor)(T);$/;"	t	class:exprtk::symbol_table
ff02_functor	app/exprtk.h	/^      typedef T (*ff02_functor)(T, T);$/;"	t	class:exprtk::symbol_table
ff03_functor	app/exprtk.h	/^      typedef T (*ff03_functor)(T, T, T);$/;"	t	class:exprtk::symbol_table
ff04_functor	app/exprtk.h	/^      typedef T (*ff04_functor)(T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff05_functor	app/exprtk.h	/^      typedef T (*ff05_functor)(T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff06_functor	app/exprtk.h	/^      typedef T (*ff06_functor)(T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff07_functor	app/exprtk.h	/^      typedef T (*ff07_functor)(T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff08_functor	app/exprtk.h	/^      typedef T (*ff08_functor)(T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff09_functor	app/exprtk.h	/^      typedef T (*ff09_functor)(T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff10_functor	app/exprtk.h	/^      typedef T (*ff10_functor)(T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff11_functor	app/exprtk.h	/^      typedef T (*ff11_functor)(T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff12_functor	app/exprtk.h	/^      typedef T (*ff12_functor)(T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff13_functor	app/exprtk.h	/^      typedef T (*ff13_functor)(T, T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff14_functor	app/exprtk.h	/^      typedef T (*ff14_functor)(T, T, T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
ff15_functor	app/exprtk.h	/^      typedef T (*ff15_functor)(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T);$/;"	t	class:exprtk::symbol_table
file	app/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk::rtl::io
file_content_	utils/ParaReader.h	/^  strVec          file_content_;$/;"	m	class:CppUtils::ParaReader
file_content_	utils/oldParaReader.h	/^  strVec          file_content_;$/;"	m	class:ParaReader
file_descriptor	app/exprtk.h	/^         file_descriptor(const std::string& fname, const std::string& access)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
file_descriptor	app/exprtk.h	/^      struct file_descriptor$/;"	s	namespace:exprtk::rtl::io::file::details
file_mode	app/exprtk.h	/^      enum file_mode$/;"	g	namespace:exprtk::rtl::io::file::details
file_name	app/exprtk.h	/^         std::string file_name;$/;"	m	struct:exprtk::rtl::io::file::details::file_descriptor
file_path_	utils/ParaReader.h	/^  string          file_path_;$/;"	m	class:CppUtils::ParaReader
file_path_	utils/oldParaReader.h	/^  string          file_path_;$/;"	m	class:ParaReader
final_node_	app/exprtk.h	/^         branch_t              final_node_;$/;"	m	class:exprtk::details::exprtk_final
final_stmt_return	app/exprtk.h	/^         bool final_stmt_return() const$/;"	f	class:exprtk::parser::dependent_entity_collector
final_stmt_return_	app/exprtk.h	/^         bool final_stmt_return_;$/;"	m	class:exprtk::parser::dependent_entity_collector
find_local_vertices	algorithm/Mesh.h	/^  VertexVector find_local_vertices(const Vec2d& xy, double dist, $/;"	f	class:TQMesh::TQAlgorithm::Mesh
finish_quad_layer	algorithm/Mesh.h	/^  void finish_quad_layer(QuadLayer& quad_layer)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
finished	app/exprtk.h	/^         inline bool finished() const$/;"	f	class:exprtk::lexer::generator
floor_impl	app/exprtk.h	/^            template <typename T> inline T floor_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
floor_impl	app/exprtk.h	/^            template <typename T> inline T floor_impl(const T v, real_type_tag) { return std::floor(v); }$/;"	f	namespace:exprtk::details::numeric::details
for_loop	app/exprtk.h	/^         inline expression_node_ptr for_loop(expression_node_ptr& initialiser,$/;"	f	class:exprtk::parser::expression_generator
for_loop_bc_node	app/exprtk.h	/^         for_loop_bc_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::for_loop_bc_node
for_loop_bc_node	app/exprtk.h	/^      class for_loop_bc_node : public for_loop_node<T>$/;"	c	namespace:exprtk::details
for_loop_bc_node_t	app/exprtk.h	/^      typedef details::for_loop_bc_node<T>                for_loop_bc_node_t;$/;"	t	class:exprtk::parser
for_loop_bc_rtc_node	app/exprtk.h	/^         for_loop_bc_rtc_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::exprtk_final
for_loop_bc_rtc_node_t	app/exprtk.h	/^      typedef details::for_loop_bc_rtc_node<T>            for_loop_bc_rtc_node_t;$/;"	t	class:exprtk::parser
for_loop_node	app/exprtk.h	/^         for_loop_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::for_loop_node
for_loop_node	app/exprtk.h	/^      class for_loop_node : public expression_node<T>$/;"	c	namespace:exprtk::details
for_loop_node_t	app/exprtk.h	/^      typedef details::for_loop_node<T>                   for_loop_node_t;$/;"	t	class:exprtk::parser
for_loop_rtc_node	app/exprtk.h	/^         for_loop_rtc_node(expression_ptr initialiser,$/;"	f	class:exprtk::details::exprtk_final
for_loop_rtc_node_t	app/exprtk.h	/^      typedef details::for_loop_rtc_node<T>               for_loop_rtc_node_t;$/;"	t	class:exprtk::parser
forward	app/exprtk.h	/^      inline bool forward(const std::string& name,$/;"	f	class:exprtk::function_compositor
found	utils/ParaReader.h	/^  bool found() const { return found_; }$/;"	f	class:CppUtils::ParameterBase
found	utils/ParaReader.h	/^  bool found(const string& name)$/;"	f	class:CppUtils::ParaReader
found	utils/ParaReader.h	/^  void found(bool f) { found_ = f; }$/;"	f	class:CppUtils::ParameterBase
found	utils/oldParaReader.h	/^  bool found() const { return found_; }$/;"	f	class:ListParameter
found	utils/oldParaReader.h	/^  bool found() const { return found_; }$/;"	f	class:ScalarParameter
found	utils/oldParaReader.h	/^  void found(bool f) { found_ = f; }$/;"	f	class:ListParameter
found	utils/oldParaReader.h	/^  void found(bool f) { found_ = f; }$/;"	f	class:ScalarParameter
found_	utils/ParaReader.h	/^  bool   found_;$/;"	m	class:CppUtils::ParameterBase
found_	utils/oldParaReader.h	/^  bool   found_;$/;"	m	class:ListParameter
found_	utils/oldParaReader.h	/^  bool found_;$/;"	m	class:ScalarParameter
fp_map_	app/exprtk.h	/^      std::vector<funcparam_t> fp_map_;$/;"	m	class:exprtk::function_compositor
frac_impl	app/exprtk.h	/^            template <typename T> inline T  frac_impl(const T  , int_type_tag) { return T(0);          }$/;"	f	namespace:exprtk::details::numeric::details
frac_impl	app/exprtk.h	/^            template <typename T> inline T  frac_impl(const T v, real_type_tag) { return (v - static_cast<long long>(v)); }$/;"	f	namespace:exprtk::details::numeric::details
free	app/exprtk.h	/^         void free()$/;"	f	struct:exprtk::details::range_pack
free	app/exprtk.h	/^         void inline free(expression_node<T>*& e) const$/;"	f	class:exprtk::details::node_allocator
free_all_nodes	app/exprtk.h	/^      inline void free_all_nodes(NodeAllocator& node_allocator, Sequence<expression_node<T>*,Allocator>& b)$/;"	f	namespace:exprtk::details
free_all_nodes	app/exprtk.h	/^      inline void free_all_nodes(NodeAllocator& node_allocator, expression_node<T>* (&b)[N])$/;"	f	namespace:exprtk::details
free_element	app/exprtk.h	/^         inline void free_element(scope_element& se)$/;"	f	class:exprtk::parser::scope_element_manager
free_function_list_	app/exprtk.h	/^            std::vector<ifunction<T>*> free_function_list_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
free_node	app/exprtk.h	/^      inline void free_node(NodeAllocator&, expression_node<T>*& node)$/;"	f	namespace:exprtk::details
freefunc00	app/exprtk.h	/^          explicit freefunc00(ff00_functor ff) : exprtk::ifunction<T>(0), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc00
freefunc00	app/exprtk.h	/^       struct freefunc00 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc01	app/exprtk.h	/^         explicit freefunc01(ff01_functor ff) : exprtk::ifunction<T>(1), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc01
freefunc01	app/exprtk.h	/^      struct freefunc01 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc02	app/exprtk.h	/^         explicit freefunc02(ff02_functor ff) : exprtk::ifunction<T>(2), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc02
freefunc02	app/exprtk.h	/^      struct freefunc02 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc03	app/exprtk.h	/^         explicit freefunc03(ff03_functor ff) : exprtk::ifunction<T>(3), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc03
freefunc03	app/exprtk.h	/^      struct freefunc03 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc04	app/exprtk.h	/^         explicit freefunc04(ff04_functor ff) : exprtk::ifunction<T>(4), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc04
freefunc04	app/exprtk.h	/^      struct freefunc04 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc05	app/exprtk.h	/^         explicit freefunc05(ff05_functor ff) : exprtk::ifunction<T>(5), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc05
freefunc05	app/exprtk.h	/^      struct freefunc05 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc06	app/exprtk.h	/^         explicit freefunc06(ff06_functor ff) : exprtk::ifunction<T>(6), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc06
freefunc06	app/exprtk.h	/^      struct freefunc06 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc07	app/exprtk.h	/^         explicit freefunc07(ff07_functor ff) : exprtk::ifunction<T>(7), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc07
freefunc07	app/exprtk.h	/^      struct freefunc07 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc08	app/exprtk.h	/^         explicit freefunc08(ff08_functor ff) : exprtk::ifunction<T>(8), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc08
freefunc08	app/exprtk.h	/^      struct freefunc08 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc09	app/exprtk.h	/^         explicit freefunc09(ff09_functor ff) : exprtk::ifunction<T>(9), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc09
freefunc09	app/exprtk.h	/^      struct freefunc09 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc10	app/exprtk.h	/^         explicit freefunc10(ff10_functor ff) : exprtk::ifunction<T>(10), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc10
freefunc10	app/exprtk.h	/^      struct freefunc10 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc11	app/exprtk.h	/^         explicit freefunc11(ff11_functor ff) : exprtk::ifunction<T>(11), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc11
freefunc11	app/exprtk.h	/^      struct freefunc11 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc12	app/exprtk.h	/^         explicit freefunc12(ff12_functor ff) : exprtk::ifunction<T>(12), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc12
freefunc12	app/exprtk.h	/^      struct freefunc12 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc13	app/exprtk.h	/^         explicit freefunc13(ff13_functor ff) : exprtk::ifunction<T>(13), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc13
freefunc13	app/exprtk.h	/^      struct freefunc13 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc14	app/exprtk.h	/^         explicit freefunc14(ff14_functor ff) : exprtk::ifunction<T>(14), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc14
freefunc14	app/exprtk.h	/^      struct freefunc14 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
freefunc15	app/exprtk.h	/^         explicit freefunc15(ff15_functor ff) : exprtk::ifunction<T>(15), f(ff) {}$/;"	f	struct:exprtk::symbol_table::freefunc15
freefunc15	app/exprtk.h	/^      struct freefunc15 : public exprtk::ifunction<T>$/;"	s	class:exprtk::symbol_table
front	algorithm/Mesh.h	/^  Front& front() { return front_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
front	algorithm/Mesh.h	/^  const Front& front() const { return front_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
front	app/exprtk.h	/^         inline const type_store& front() const$/;"	f	class:exprtk::type_store::parameter_list
front	app/exprtk.h	/^         inline type_store& front()$/;"	f	class:exprtk::type_store::parameter_list
front	app/exprtk.h	/^      inline const char_t& front(const std::string& s)$/;"	f	namespace:exprtk::details
front	utils/Container.h	/^  T& front() $/;"	f	class:TQMesh::TQUtils::Container
front	utils/Container.h	/^  const T& front() const $/;"	f	class:TQMesh::TQUtils::Container
front_	algorithm/Mesh.h	/^  Front      front_;$/;"	m	class:TQMesh::TQAlgorithm::Mesh
func_0param	app/exprtk.h	/^         func_0param() : base_func(0) {}$/;"	f	struct:exprtk::function_compositor::func_0param
func_0param	app/exprtk.h	/^      struct func_0param : public base_func$/;"	s	class:exprtk::function_compositor
func_1param	app/exprtk.h	/^         func_1param() : base_func(1) {}$/;"	f	struct:exprtk::function_compositor::func_1param
func_1param	app/exprtk.h	/^      struct func_1param : public base_func$/;"	s	class:exprtk::function_compositor
func_2param	app/exprtk.h	/^         func_2param() : base_func(2) {}$/;"	f	struct:exprtk::function_compositor::func_2param
func_2param	app/exprtk.h	/^      struct func_2param : public base_func$/;"	s	class:exprtk::function_compositor
func_3param	app/exprtk.h	/^         func_3param() : base_func(3) {}$/;"	f	struct:exprtk::function_compositor::func_3param
func_3param	app/exprtk.h	/^      struct func_3param : public base_func$/;"	s	class:exprtk::function_compositor
func_4param	app/exprtk.h	/^         func_4param() : base_func(4) {}$/;"	f	struct:exprtk::function_compositor::func_4param
func_4param	app/exprtk.h	/^      struct func_4param : public base_func$/;"	s	class:exprtk::function_compositor
func_5param	app/exprtk.h	/^         func_5param() : base_func(5) {}$/;"	f	struct:exprtk::function_compositor::func_5param
func_5param	app/exprtk.h	/^      struct func_5param : public base_func$/;"	s	class:exprtk::function_compositor
func_6param	app/exprtk.h	/^         func_6param() : base_func(6) {}$/;"	f	struct:exprtk::function_compositor::func_6param
func_6param	app/exprtk.h	/^      struct func_6param : public base_func$/;"	s	class:exprtk::function_compositor
funcparam_t	app/exprtk.h	/^      typedef std::map<std::string,base_func*> funcparam_t;$/;"	t	class:exprtk::function_compositor
function	app/exprtk.h	/^         function()$/;"	f	struct:exprtk::function_compositor::function
function	app/exprtk.h	/^         function(const std::string& n)$/;"	f	struct:exprtk::function_compositor::function
function	app/exprtk.h	/^         function(const std::string& name,$/;"	f	struct:exprtk::function_compositor::function
function	app/exprtk.h	/^         inline expression_node_ptr function(ifunction_t* f)$/;"	f	class:exprtk::parser::expression_generator
function	app/exprtk.h	/^         inline expression_node_ptr function(ifunction_t* f, expression_node_ptr (&b)[N])$/;"	f	class:exprtk::parser::expression_generator
function	app/exprtk.h	/^      struct function$/;"	s	class:exprtk::function_compositor
function_	app/exprtk.h	/^         GenericFunction* function_;$/;"	m	class:exprtk::details::generic_function_node
function_	app/exprtk.h	/^         VarArgFunction* function_;$/;"	m	class:exprtk::details::exprtk_final
function_	app/exprtk.h	/^         ifunction*  function_;$/;"	m	class:exprtk::details::exprtk_final
function_	app/exprtk.h	/^         ifunction* function_;$/;"	m	class:exprtk::details::exprtk_final
function_N_node	app/exprtk.h	/^         explicit function_N_node(ifunction* func)$/;"	f	class:exprtk::details::exprtk_final
function_compositor	app/exprtk.h	/^      function_compositor()$/;"	f	class:exprtk::function_compositor
function_compositor	app/exprtk.h	/^      function_compositor(const symbol_table_t& st)$/;"	f	class:exprtk::function_compositor
function_compositor	app/exprtk.h	/^   class function_compositor$/;"	c	namespace:exprtk
function_count	app/exprtk.h	/^      inline std::size_t function_count() const$/;"	f	class:exprtk::symbol_table
function_disabled	app/exprtk.h	/^         bool function_disabled(const std::string& function_name) const$/;"	f	class:exprtk::parser::settings_store
function_enabled	app/exprtk.h	/^         bool function_enabled(const std::string& function_name) const$/;"	f	class:exprtk::parser::settings_store
function_name	app/exprtk.h	/^      inline std::size_t parse_base_function_call(expression_node_ptr (&param_list)[MaxNumberofParameters], const std::string& function_name = "")$/;"	m	class:exprtk::parser
function_ptr	app/exprtk.h	/^         typedef typename symbol_table_t::function_ptr function_ptr;$/;"	t	struct:exprtk::parser::symtab_store
function_ptr	app/exprtk.h	/^      typedef function_t*                         function_ptr;$/;"	t	class:exprtk::symbol_table
function_store	app/exprtk.h	/^            type_store<function_t        , function_t        > function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
function_t	app/exprtk.h	/^         typedef exprtk::ifunction<T>     function_t;$/;"	t	struct:exprtk::function_compositor::base_func
function_t	app/exprtk.h	/^      typedef ifunction        <T>                function_t;$/;"	t	class:exprtk::symbol_table
function_t	app/exprtk.h	/^      typedef typename compositor_t::function function_t;$/;"	t	struct:exprtk::type_defs
function_traits	app/exprtk.h	/^      function_traits()$/;"	f	class:exprtk::function_traits
function_traits	app/exprtk.h	/^   class function_traits$/;"	c	namespace:exprtk
functor_t	app/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	class:exprtk::details::exprtk_final
functor_t	app/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::T0oT1oT20T3process
functor_t	app/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::T0oT1oT2process
functor_t	app/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::opr_base
functor_t	app/exprtk.h	/^         typedef typename details::functor_t<T> functor_t;$/;"	t	struct:exprtk::details::sf_base
functor_t	app/exprtk.h	/^      struct functor_t$/;"	s	namespace:exprtk::details
functor_t	app/exprtk.h	/^      typedef typename details::functor_t<T> functor_t;$/;"	t	class:exprtk::parser
g	app/exprtk.h	/^      getline<T> g;$/;"	m	struct:exprtk::rtl::io::file::package
g2d_impl	app/exprtk.h	/^            template <typename T> inline T   g2d_impl(const T v, real_type_tag) { return (v * T(9.0\/10.0)); }$/;"	f	namespace:exprtk::details::numeric::details
gen_function_t	app/exprtk.h	/^         typedef generic_function_node<T,GenericFunction> gen_function_t;$/;"	t	class:exprtk::details::multimode_genfunction_node
gen_function_t	app/exprtk.h	/^         typedef generic_function_node<T,StringFunction> gen_function_t;$/;"	t	class:exprtk::details::string_function_node
gen_function_t	app/exprtk.h	/^         typedef generic_function_node<T,igeneric_function_t> gen_function_t;$/;"	t	class:exprtk::details::exprtk_final
generator	app/exprtk.h	/^         generator()$/;"	f	class:exprtk::lexer::generator
generator	app/exprtk.h	/^      class generator$/;"	c	namespace:exprtk::lexer
generator_t	app/exprtk.h	/^         typedef generator generator_t;$/;"	t	class:exprtk::lexer::parser_helper
generic_function_call	app/exprtk.h	/^         inline expression_node_ptr generic_function_call(igeneric_function_t* gf,$/;"	f	class:exprtk::parser::expression_generator
generic_function_node	app/exprtk.h	/^         explicit generic_function_node(const std::vector<expression_ptr>& arg_list,$/;"	f	class:exprtk::details::generic_function_node
generic_function_node	app/exprtk.h	/^      class generic_function_node : public expression_node<T>$/;"	c	namespace:exprtk::details
generic_function_ptr	app/exprtk.h	/^         typedef typename symbol_table_t::generic_function_ptr generic_function_ptr;$/;"	t	struct:exprtk::parser::symtab_store
generic_function_ptr	app/exprtk.h	/^      typedef generic_function_t*                 generic_function_ptr;$/;"	t	class:exprtk::symbol_table
generic_function_store	app/exprtk.h	/^            type_store<generic_function_t, generic_function_t> generic_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
generic_function_t	app/exprtk.h	/^      typedef igeneric_function<T>                generic_function_t;$/;"	t	class:exprtk::symbol_table
generic_string_range_node	app/exprtk.h	/^         generic_string_range_node(expression_ptr str_branch, const range_t& brange)$/;"	f	class:exprtk::details::exprtk_final
generic_string_range_node_t	app/exprtk.h	/^      typedef details::generic_string_range_node<T>       generic_string_range_node_t;$/;"	t	class:exprtk::parser
generic_type	app/exprtk.h	/^         typedef type_store<T> generic_type;$/;"	t	class:exprtk::details::null_igenfunc
generic_type	app/exprtk.h	/^         typedef typename igeneric_function<T>::generic_type generic_type;$/;"	t	struct:exprtk::rtl::io::details::print_impl
generic_type	app/exprtk.h	/^         typedef typename igfun_t::generic_type        generic_type;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
generic_type	app/exprtk.h	/^      typedef type_store<T> generic_type;$/;"	t	class:exprtk::igeneric_function
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::getline
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::open
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::read
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::io::file::write
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::all_false
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::all_true
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::any_false
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::any_true
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpby
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpbyz
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpbz
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpy
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::axpyz
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::copy
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::count
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::dot
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::dotk
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::iota
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::nthelement
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::rol
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::ror
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::shift_left
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::shift_right
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::sort
generic_type	app/exprtk.h	/^      typedef typename igfun_t::generic_type        generic_type;$/;"	t	class:exprtk::rtl::vecops::sumk
get	app/exprtk.h	/^         inline type_ptr get(const std::string& symbol_name) const$/;"	f	struct:exprtk::symbol_table::type_store
get_active_element	app/exprtk.h	/^         inline scope_element& get_active_element(const std::string& var_name,$/;"	f	class:exprtk::parser::scope_element_manager
get_base_vertex	algorithm/Mesh.h	/^  Vertex& get_base_vertex(const Edge& base)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
get_conststr_stringvar_name	app/exprtk.h	/^         inline std::string get_conststr_stringvar_name(const expression_node_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_conststr_stringvar_name	app/exprtk.h	/^      inline std::string get_conststr_stringvar_name(const expression_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_edge	algorithm/EdgeList.h	/^  get_edge(const Vertex& v, int pos) const$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
get_edge	algorithm/EdgeList.h	/^  get_edge(const Vertex& v1, const Vertex& v2, bool dir=false) const$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
get_edge	algorithm/Mesh.h	/^  Edge* get_edge(const Vertex& v1, const Vertex& v2, bool dir=false)$/;"	f	class:TQMesh::TQAlgorithm::Mesh
get_edge_index	algorithm/Quad.h	/^  int get_edge_index(const Vertex& v1, const Vertex& v2) const$/;"	f	class:TQMesh::TQAlgorithm::Quad
get_edge_index	algorithm/Triangle.h	/^  int get_edge_index(const Vertex& v1, const Vertex& v2) const$/;"	f	class:TQMesh::TQAlgorithm::Triangle
get_element	app/exprtk.h	/^         inline scope_element& get_element(const std::size_t& index)$/;"	f	class:exprtk::parser::scope_element_manager
get_element	app/exprtk.h	/^         inline scope_element& get_element(const std::string& var_name,$/;"	f	class:exprtk::parser::scope_element_manager
get_error	app/exprtk.h	/^      inline parser_error::type get_error(const std::size_t& index) const$/;"	f	class:exprtk::parser
get_file_mode	app/exprtk.h	/^         file_mode get_file_mode(const std::string& access) const$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
get_from_varptr	app/exprtk.h	/^         inline type_ptr get_from_varptr(const void* ptr) const$/;"	f	struct:exprtk::symbol_table::type_store
get_function	app/exprtk.h	/^         inline function_ptr get_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_function	app/exprtk.h	/^      inline function_ptr get_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_generic_function	app/exprtk.h	/^         inline generic_function_ptr get_generic_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_generic_function	app/exprtk.h	/^      inline generic_function_ptr get_generic_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_items	utils/Container.h	/^  Vector get_items(const Vec2d& center, $/;"	f	class:TQMesh::TQUtils::Container
get_items	utils/Container.h	/^  Vector get_items(const Vec2d& lowleft, $/;"	f	class:TQMesh::TQUtils::Container
get_items	utils/QTree.h	/^  size_t get_items(const Vec2<V>& center, $/;"	f	class:TQMesh::TQUtils::QTree
get_items	utils/QTree.h	/^  size_t get_items(const Vec2<V>& lowleft, $/;"	f	class:TQMesh::TQUtils::QTree
get_list	app/exprtk.h	/^         inline std::size_t get_list(Sequence<std::pair<std::string,RawType>,Allocator>& list) const$/;"	f	struct:exprtk::symbol_table::type_store
get_list	app/exprtk.h	/^         inline std::size_t get_list(Sequence<std::string,Allocator>& vlist) const$/;"	f	struct:exprtk::symbol_table::type_store
get_loop_runtime_check	app/exprtk.h	/^         inline loop_runtime_check_ptr get_loop_runtime_check(const loop_runtime_check::loop_types loop_type) const$/;"	f	class:exprtk::parser::expression_generator
get_next_edge	algorithm/Edge.h	/^  Edge* get_next_edge() const$/;"	f	class:TQMesh::TQAlgorithm::Edge
get_operator	app/exprtk.h	/^         inline details::operator_type get_operator(const binary_functor_t& bop) const$/;"	f	class:exprtk::parser::expression_generator
get_overload_function	app/exprtk.h	/^         inline generic_function_ptr get_overload_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_overload_function	app/exprtk.h	/^      inline generic_function_ptr get_overload_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_parameter	utils/ParaReader.h	/^  Parameter<T>& get_parameter(const string& name)$/;"	f	class:CppUtils::ParaReader
get_prev_edge	algorithm/Edge.h	/^  Edge* get_prev_edge() const$/;"	f	class:TQMesh::TQAlgorithm::Edge
get_string_function	app/exprtk.h	/^         inline generic_function_ptr get_string_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_string_function	app/exprtk.h	/^      inline generic_function_ptr get_string_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
get_stringvar	app/exprtk.h	/^         inline stringvar_ptr get_stringvar(const std::string& string_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_stringvar	app/exprtk.h	/^      inline stringvar_ptr get_stringvar(const std::string& string_name) const$/;"	f	class:exprtk::symbol_table
get_stringvar_base	app/exprtk.h	/^      inline stringvar_base<T> get_stringvar_base(const std::string& string_name) const$/;"	f	class:exprtk::symbol_table
get_stringvar_list	app/exprtk.h	/^      inline std::size_t get_stringvar_list(Sequence<std::pair<std::string,std::string>,Allocator>& svlist) const$/;"	f	class:exprtk::symbol_table
get_stringvar_list	app/exprtk.h	/^      inline std::size_t get_stringvar_list(Sequence<std::string,Allocator>& svlist) const$/;"	f	class:exprtk::symbol_table
get_stringvar_name	app/exprtk.h	/^         inline std::string get_stringvar_name(const expression_node_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_stringvar_name	app/exprtk.h	/^      inline std::string get_stringvar_name(const expression_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_symbol_table	app/exprtk.h	/^         inline symbol_table_t& get_symbol_table(const std::size_t& index = 0)$/;"	f	struct:exprtk::parser::symtab_store
get_symbol_table	app/exprtk.h	/^      inline const symbol_table<T>& get_symbol_table(const std::size_t& index = 0) const$/;"	f	class:exprtk::expression
get_symbol_table	app/exprtk.h	/^      inline symbol_table<T>& get_symbol_table(const std::size_t& index = 0)$/;"	f	class:exprtk::expression
get_symbol_table_list	app/exprtk.h	/^      inline symtab_list_t get_symbol_table_list() const$/;"	f	class:exprtk::expression
get_value	utils/ParaReader.h	/^  T get_value(const string& name)$/;"	f	class:CppUtils::ParaReader
get_value	utils/ParaReader.h	/^  T get_value(size_t i) const$/;"	f	class:CppUtils::Parameter
get_value	utils/ParaReader.h	/^  T get_value(size_t i, const string& name)$/;"	f	class:CppUtils::ParaReader
get_value	utils/ParaReader.h	/^  T get_value(size_t i, size_t j) const$/;"	f	class:CppUtils::Parameter
get_value	utils/ParaReader.h	/^  T get_value(size_t i, size_t j, const string& name)$/;"	f	class:CppUtils::ParaReader
get_vararg_function	app/exprtk.h	/^         inline vararg_function_ptr get_vararg_function(const std::string& vararg_function_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_vararg_function	app/exprtk.h	/^      inline vararg_function_ptr get_vararg_function(const std::string& vararg_function_name) const$/;"	f	class:exprtk::symbol_table
get_variable	app/exprtk.h	/^         inline expression_node_ptr get_variable(const T& v)$/;"	f	class:exprtk::parser::scope_element_manager
get_variable	app/exprtk.h	/^         inline variable_ptr get_variable(const T& var_ref) const$/;"	f	struct:exprtk::parser::symtab_store
get_variable	app/exprtk.h	/^         inline variable_ptr get_variable(const std::string& variable_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_variable	app/exprtk.h	/^      inline variable_ptr get_variable(const T& var_ref) const$/;"	f	class:exprtk::symbol_table
get_variable	app/exprtk.h	/^      inline variable_ptr get_variable(const std::string& variable_name) const$/;"	f	class:exprtk::symbol_table
get_variable_list	app/exprtk.h	/^      inline std::size_t get_variable_list(Sequence<std::pair<std::string,T>,Allocator>& vlist) const$/;"	f	class:exprtk::symbol_table
get_variable_list	app/exprtk.h	/^      inline std::size_t get_variable_list(Sequence<std::string,Allocator>& vlist) const$/;"	f	class:exprtk::symbol_table
get_variable_name	app/exprtk.h	/^         inline std::string get_variable_name(const expression_node_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_variable_name	app/exprtk.h	/^      inline std::string get_variable_name(const expression_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_vector	app/exprtk.h	/^         inline vector_holder_ptr get_vector(const std::string& vector_name) const$/;"	f	struct:exprtk::parser::symtab_store
get_vector	app/exprtk.h	/^      inline vector_holder_ptr get_vector(const std::string& vector_name) const$/;"	f	class:exprtk::symbol_table
get_vector_list	app/exprtk.h	/^      inline std::size_t get_vector_list(Sequence<std::string,Allocator>& vlist) const$/;"	f	class:exprtk::symbol_table
get_vector_name	app/exprtk.h	/^         inline std::string get_vector_name(const vector_holder_ptr& ptr) const$/;"	f	struct:exprtk::parser::symtab_store
get_vector_name	app/exprtk.h	/^      inline std::string get_vector_name(const vector_holder_ptr& ptr) const$/;"	f	class:exprtk::symbol_table
get_vertex_index	algorithm/Quad.h	/^  int get_vertex_index(const Vertex& v) const$/;"	f	class:TQMesh::TQAlgorithm::Quad
get_vertex_index	algorithm/Triangle.h	/^  int get_vertex_index(const Vertex& v) const$/;"	f	class:TQMesh::TQAlgorithm::Triangle
getline	app/exprtk.h	/^         bool getline(std::string& s)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
getline	app/exprtk.h	/^      getline()$/;"	f	class:exprtk::rtl::io::file::getline
getline	app/exprtk.h	/^   class getline : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
global_loop_batch_size	app/exprtk.h	/^         const unsigned int global_loop_batch_size = 16;$/;"	m	namespace:exprtk::details::loop_unroll
gt_op	app/exprtk.h	/^      struct gt_op : public opr_base<T>$/;"	s	namespace:exprtk::details
gte_op	app/exprtk.h	/^      struct gte_op : public opr_base<T>$/;"	s	namespace:exprtk::details
h	tests/mesh_test.cpp	/^  std::vector<double>   h;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
handle_runtime_violation	app/exprtk.h	/^      virtual void handle_runtime_violation(const violation_context&)$/;"	f	struct:exprtk::loop_runtime_check
has_side_effects	app/exprtk.h	/^      inline bool& has_side_effects()$/;"	f	class:exprtk::function_traits
has_side_effects_	app/exprtk.h	/^      bool has_side_effects_;$/;"	m	class:exprtk::function_traits
height	algorithm/QuadLayer.h	/^  double height() const { return height_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
heights	algorithm/QuadLayer.h	/^  const std::vector<double>& heights() const { return heights_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
heights	algorithm/QuadLayer.h	/^  std::vector<double>& heights() { return heights_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
helper	app/exprtk.h	/^      namespace helper$/;"	n	namespace:exprtk::lexer
helper	app/exprtk.h	/^   namespace helper$/;"	n	namespace:exprtk::rtl::vecops
helper_assembly	app/exprtk.h	/^         struct helper_assembly$/;"	s	namespace:exprtk::lexer::helper
helper_assembly_	app/exprtk.h	/^      lexer::helper::helper_assembly helper_assembly_;$/;"	m	class:exprtk::parser
helper_interface	app/exprtk.h	/^      class helper_interface$/;"	c	namespace:exprtk::lexer
hex_to_bin	app/exprtk.h	/^      inline uchar_t hex_to_bin(uchar_t h)$/;"	f	namespace:exprtk::details
hypot	app/exprtk.h	/^         inline T hypot(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
hypot_impl	app/exprtk.h	/^            inline T hypot_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
hypot_impl	app/exprtk.h	/^            inline T hypot_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
ia	app/exprtk.h	/^      iota       <T> ia;$/;"	m	struct:exprtk::rtl::vecops::package
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode0
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode1
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode2
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode3
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode4
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT2process::mode0
id	app/exprtk.h	/^            static inline std::string id()$/;"	f	struct:exprtk::details::T0oT1oT2process::mode1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression2
id	app/exprtk.h	/^            static inline std::string id(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression4
id	app/exprtk.h	/^         static inline std::string id()$/;"	f	class:exprtk::details::exprtk_final
ifunction	app/exprtk.h	/^         typedef IFunction ifunction;$/;"	t	class:exprtk::details::exprtk_final
ifunction	app/exprtk.h	/^      explicit ifunction(const std::size_t& pc)$/;"	f	class:exprtk::ifunction
ifunction	app/exprtk.h	/^   class ifunction : public function_traits$/;"	c	namespace:exprtk
ifunction_t	app/exprtk.h	/^         typedef ifunction<T>                        ifunction_t;$/;"	t	struct:exprtk::symbol_table::type_store
ifunction_t	app/exprtk.h	/^      typedef ifunction<T>                                ifunction_t;$/;"	t	class:exprtk::parser
igeneric_function	app/exprtk.h	/^      igeneric_function(const std::string& param_seq = "", const return_type rtr_type = e_rtrn_scalar)$/;"	f	class:exprtk::igeneric_function
igeneric_function	app/exprtk.h	/^   class igeneric_function : public function_traits$/;"	c	namespace:exprtk
igeneric_function_empty_body	app/exprtk.h	17215;"	d
igeneric_function_ptr	app/exprtk.h	/^         typedef igeneric_function_t* igeneric_function_ptr;$/;"	t	class:exprtk::details::exprtk_final
igeneric_function_t	app/exprtk.h	/^         typedef igeneric_function<T>                igeneric_function_t;$/;"	t	struct:exprtk::symbol_table::type_store
igeneric_function_t	app/exprtk.h	/^         typedef null_igenfunc<T>     igeneric_function_t;$/;"	t	class:exprtk::details::exprtk_final
igeneric_function_t	app/exprtk.h	/^      typedef igeneric_function<T>                        igeneric_function_t;$/;"	t	class:exprtk::parser
igfun_t	app/exprtk.h	/^         typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::getline
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::open
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::read
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::io::file::write
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::all_false
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::all_true
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::any_false
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::any_true
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpby
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpy
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::copy
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::count
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::dot
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::dotk
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::iota
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::rol
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::ror
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::sort
igfun_t	app/exprtk.h	/^      typedef typename exprtk::igeneric_function<T> igfun_t;$/;"	t	class:exprtk::rtl::vecops::sumk
ignore_set_	app/exprtk.h	/^            std::set<std::string,details::ilesscompare> ignore_set_;$/;"	m	class:exprtk::lexer::helper::commutative_inserter
ignore_symbol	app/exprtk.h	/^            inline void ignore_symbol(const std::string& symbol)$/;"	f	class:exprtk::lexer::helper::commutative_inserter
ilesscompare	app/exprtk.h	/^      struct ilesscompare$/;"	s	namespace:exprtk::details
ilike_op	app/exprtk.h	/^      struct ilike_op : public opr_base<T>$/;"	s	namespace:exprtk::details
imatch	app/exprtk.h	/^      inline bool imatch(const char_t c1, const char_t c2)$/;"	f	namespace:exprtk::details
imatch	app/exprtk.h	/^      inline bool imatch(const std::string& s1, const std::string& s2)$/;"	f	namespace:exprtk::details
in_container	algorithm/Edge.h	/^  bool in_container() const { return in_container_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
in_container	algorithm/Quad.h	/^  bool in_container() const { return in_container_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
in_container	algorithm/Triangle.h	/^  bool in_container() const { return in_container_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
in_container	algorithm/Vertex.h	/^  bool in_container() const { return in_container_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
in_container	tests/container_test.cpp	/^  bool in_container() const { return in_container_; }$/;"	f	class:ContainerTests::Edge
in_container	tests/container_test.cpp	/^  bool in_container() const { return in_container_; }$/;"	f	class:ContainerTests::Vertex
in_container_	algorithm/Edge.h	/^  bool                in_container_;$/;"	m	class:TQMesh::TQAlgorithm::Edge
in_container_	algorithm/Quad.h	/^  bool                 in_container_;$/;"	m	class:TQMesh::TQAlgorithm::Quad
in_container_	algorithm/Triangle.h	/^  bool                 in_container_;$/;"	m	class:TQMesh::TQAlgorithm::Triangle
in_container_	algorithm/Vertex.h	/^  bool                in_container_;$/;"	m	class:TQMesh::TQAlgorithm::Vertex
in_container_	tests/container_test.cpp	/^  bool          in_container_;$/;"	m	class:ContainerTests::Vertex	file:
in_container_	tests/container_test.cpp	/^  bool        in_container_; $/;"	m	class:ContainerTests::Edge	file:
in_on_quad	utils/geometry.h	/^inline bool in_on_quad(const Vec2<T>& v, $/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_on_rect	utils/geometry.h	/^inline bool in_on_rect(const Vec2<T>& v,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_on_segment	utils/geometry.h	/^static inline bool in_on_segment(const Vec2<T>& p,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_on_triangle	utils/geometry.h	/^inline bool in_on_triangle(const Vec2<T>& v,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_op	app/exprtk.h	/^      struct in_op : public opr_base<T>$/;"	s	namespace:exprtk::details
in_quad	utils/geometry.h	/^inline bool in_quad(const Vec2<T>& v, $/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_rect	utils/geometry.h	/^inline bool in_rect(const Vec2<T>& v,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_segment	utils/geometry.h	/^static inline bool in_segment(const Vec2<T>& p,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_triangle	utils/geometry.h	/^inline bool in_triangle(const Vec2<T>& v,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
in_use	app/exprtk.h	/^      inline bool in_use() const$/;"	f	class:exprtk::timer
in_use_	app/exprtk.h	/^      bool in_use_;$/;"	m	class:exprtk::timer
incrementor_	app/exprtk.h	/^         branch_t incrementor_;$/;"	m	class:exprtk::details::for_loop_node
index	algorithm/Quad.h	/^  int index() const { return index_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
index	algorithm/Quad.h	/^  void index(int i) { index_ = i; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
index	algorithm/Triangle.h	/^  int index() const { return index_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
index	algorithm/Triangle.h	/^  void index(int i) { index_ = i; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
index	algorithm/Vertex.h	/^  unsigned int index() const { return index_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
index	algorithm/Vertex.h	/^  void index (unsigned int i) { index_ = i; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
index	app/exprtk.h	/^         std::size_t  index;$/;"	m	struct:exprtk::parser::scope_element
index_	app/exprtk.h	/^         branch_t          index_;$/;"	m	class:exprtk::details::exprtk_final
index_	app/exprtk.h	/^         branch_t index_;$/;"	m	class:exprtk::details::exprtk_final
index_	app/exprtk.h	/^         const std::size_t index_;$/;"	m	class:exprtk::details::exprtk_final
inequality_disabled	app/exprtk.h	/^         bool inequality_disabled(const details::operator_type& inequality) const$/;"	f	class:exprtk::parser::settings_store
inequality_enabled	app/exprtk.h	/^         bool inequality_enabled(const details::operator_type& inequality) const$/;"	f	class:exprtk::parser::settings_store
inequality_opr_to_string	app/exprtk.h	/^         std::string inequality_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
inequality_ops_list	app/exprtk.h	/^      static const std::string inequality_ops_list[] =$/;"	m	namespace:exprtk::details
inequality_ops_list_size	app/exprtk.h	/^      static const std::size_t inequality_ops_list_size = sizeof(inequality_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
information	app/exprtk.h	/^   namespace information$/;"	n	namespace:exprtk
init	app/exprtk.h	/^         inline bool init(const std::string& str)$/;"	f	class:exprtk::lexer::parser_helper
init	app/exprtk.h	/^         virtual void init()                     {              }$/;"	f	class:exprtk::lexer::helper_interface
init_branches	app/exprtk.h	/^         virtual bool init_branches()$/;"	f	class:exprtk::details::generic_function_node
init_edge	algorithm/QuadLayer.h	/^  void init_edge(Edge* e_cur)$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
init_front_edges	algorithm/Front.h	/^  void init_front_edges(const Domain& domain, Vertices &mesh_vertices)$/;"	f	class:TQMesh::TQAlgorithm::Front
init_precompilation	app/exprtk.h	/^      inline void init_precompilation()$/;"	f	class:exprtk::parser
init_size_function	app/size_function.cpp	/^UserSizeFunction init_size_function(const std::string& expr)$/;"	f
init_synthesize_map	app/exprtk.h	/^         inline void init_synthesize_map()$/;"	f	class:exprtk::parser::expression_generator
init_vertex_connectivity	algorithm/Smoother.h	/^  VertexConnectivity init_vertex_connectivity(Mesh& mesh)$/;"	f	class:TQMesh::TQAlgorithm::Smoother
initialised_	app/exprtk.h	/^         bool                  initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool                initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool              initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool             initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool            initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool         initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool        initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialised_	app/exprtk.h	/^         bool initialised_;$/;"	m	class:exprtk::details::exprtk_final
initialiser_	app/exprtk.h	/^         branch_t initialiser_;$/;"	m	class:exprtk::details::for_loop_node
initialiser_list_	app/exprtk.h	/^         std::vector<expression_ptr> initialiser_list_;$/;"	m	class:exprtk::details::exprtk_final
input_param_cnt_	app/exprtk.h	/^         std::size_t input_param_cnt_;$/;"	m	class:exprtk::parser::scope_element_manager
inrange_op	app/exprtk.h	/^      struct inrange_op : public opr_base<T>$/;"	s	namespace:exprtk::details
insert	app/exprtk.h	/^            inline int insert(const lexer::token& t0, const lexer::token& t1, lexer::token& new_token)$/;"	f	class:exprtk::lexer::helper::commutative_inserter
insert	utils/Container.h	/^  T& insert( auto pos, Args&&... args )$/;"	f	class:TQMesh::TQUtils::Container
insert_boundary	algorithm/Domain.h	/^  Boundary& insert_boundary( auto pos, Args&&... args )$/;"	f	class:TQMesh::TQAlgorithm::Domain
insert_edge	algorithm/Boundary.h	/^  Edge& insert_edge(auto pos, Vertex& v1, Vertex& v2, $/;"	f	class:TQMesh::TQAlgorithm::Boundary
insert_edge	algorithm/EdgeList.h	/^  virtual Edge& insert_edge(const_iterator pos, Vertex& v1, Vertex& v2, $/;"	f	class:TQMesh::TQAlgorithm::EdgeList
insert_front	app/exprtk.h	/^         inline void insert_front(token_t::token_type tk_type)$/;"	f	class:exprtk::lexer::generator
int_type_tag	app/exprtk.h	/^            struct int_type_tag     { int_type_tag    () {} };$/;"	f	struct:exprtk::details::numeric::details::int_type_tag
int_type_tag	app/exprtk.h	/^            struct int_type_tag     { int_type_tag    () {} };$/;"	s	namespace:exprtk::details::numeric::details
integrate	app/exprtk.h	/^   inline T integrate(const expression<T>& e,$/;"	f	namespace:exprtk
interior_edges	algorithm/Mesh.h	/^  EdgeList& interior_edges() { return intr_edges_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
interior_edges	algorithm/Mesh.h	/^  const EdgeList& interior_edges() const { return intr_edges_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
intersects_domain	algorithm/Quad.h	/^  bool intersects_domain(const Domain& domain) const$/;"	f	class:TQMesh::TQAlgorithm::Quad
intersects_domain	algorithm/Triangle.h	/^  bool intersects_domain(const Domain& domain) const $/;"	f	class:TQMesh::TQAlgorithm::Triangle
intersects_facet	algorithm/Vertex.h	/^  bool intersects_facet(const Container<T>& facets,$/;"	f	class:TQMesh::TQAlgorithm::Vertex
intersects_front	algorithm/Quad.h	/^  bool intersects_front(const Front& front,$/;"	f	class:TQMesh::TQAlgorithm::Quad
intersects_front	algorithm/Triangle.h	/^  bool intersects_front(const Front& front,$/;"	f	class:TQMesh::TQAlgorithm::Triangle
intersects_quad	algorithm/Quad.h	/^  bool intersects_quad(const Container<Q>& quads,$/;"	f	class:TQMesh::TQAlgorithm::Quad
intersects_quad	algorithm/Triangle.h	/^  bool intersects_quad(const Container<T>& quads,$/;"	f	class:TQMesh::TQAlgorithm::Triangle
intersects_triangle	algorithm/Quad.h	/^  bool intersects_triangle(const Container<T>& tris,$/;"	f	class:TQMesh::TQAlgorithm::Quad
intersects_triangle	algorithm/Triangle.h	/^  bool intersects_triangle(const Container<T>& tris,$/;"	f	class:TQMesh::TQAlgorithm::Triangle
intersects_vertex	algorithm/Facet.h	/^  virtual bool intersects_vertex(const Vertex& v) const$/;"	f	class:TQMesh::TQAlgorithm::Facet
intersects_vertex	algorithm/Quad.h	/^  bool intersects_vertex(const Vertex& v) const$/;"	f	class:TQMesh::TQAlgorithm::Quad
intersects_vertex	algorithm/Triangle.h	/^  bool intersects_vertex(const Vertex& v) const$/;"	f	class:TQMesh::TQAlgorithm::Triangle
intersects_vertex	algorithm/Triangle.h	/^  bool intersects_vertex(const Vertices& verts,$/;"	f	class:TQMesh::TQAlgorithm::Triangle
inv_binary_op_map_	app/exprtk.h	/^         inv_binary_op_map_t*     inv_binary_op_map_;$/;"	m	class:exprtk::parser::expression_generator
inv_binary_op_map_	app/exprtk.h	/^      inv_binary_op_map_t inv_binary_op_map_;$/;"	m	class:exprtk::parser
inv_binary_op_map_t	app/exprtk.h	/^      typedef std::map<binary_functor_t,operator_t> inv_binary_op_map_t;$/;"	t	class:exprtk::parser
invalid_bracket_check	app/exprtk.h	/^            bool invalid_bracket_check(const lexer::token::token_type base, const lexer::token::token_type t)$/;"	f	class:exprtk::lexer::helper::sequence_validator
invalid_comb_	app/exprtk.h	/^            set_t invalid_comb_;$/;"	m	class:exprtk::lexer::helper::sequence_validator
invalid_comb_	app/exprtk.h	/^            set_t invalid_comb_;$/;"	m	class:exprtk::lexer::helper::sequence_validator_3tokens
invalid_range	app/exprtk.h	/^      inline bool invalid_range(const Vector& v, const std::size_t r0, const std::size_t r1)$/;"	f	namespace:exprtk::rtl::vecops::helper
invoke	app/exprtk.h	/^         struct invoke { static inline T execute(ifunction&, branch_t (&)[ParamCount]) { return std::numeric_limits<T_>::quiet_NaN(); } };$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,10>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,11>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,12>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,13>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,14>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,15>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,16>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,17>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,18>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,19>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,1>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,20>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,2>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,3>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,4>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,5>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,6>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,7>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,8>$/;"	s	class:exprtk::details::exprtk_final
invoke	app/exprtk.h	/^         struct invoke<T_,9>$/;"	s	class:exprtk::details::exprtk_final
io	app/exprtk.h	/^   namespace rtl { namespace io { namespace details$/;"	n	namespace:exprtk::rtl
io	app/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk::rtl
iota	app/exprtk.h	/^      iota()$/;"	f	class:exprtk::rtl::vecops::iota
iota	app/exprtk.h	/^   class iota : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
ip_index	app/exprtk.h	/^         std::size_t  ip_index;$/;"	m	struct:exprtk::parser::scope_element
ipow_node	app/exprtk.h	/^         explicit ipow_node(const T& v)$/;"	f	class:exprtk::details::exprtk_final
ipowinv_node	app/exprtk.h	/^         explicit ipowinv_node(const T& v)$/;"	f	class:exprtk::details::exprtk_final
irange_ptr	app/exprtk.h	/^         typedef irange_t*             irange_ptr;$/;"	t	class:exprtk::details::exprtk_final
irange_ptr	app/exprtk.h	/^         typedef irange_t*            irange_ptr;$/;"	t	class:exprtk::details::exprtk_final
irange_t	app/exprtk.h	/^         typedef range_interface  <T>  irange_t;$/;"	t	class:exprtk::details::exprtk_final
irange_t	app/exprtk.h	/^         typedef range_interface <T>  irange_t;$/;"	t	class:exprtk::details::exprtk_final
irange_t	app/exprtk.h	/^         typedef range_interface<T>   irange_t;$/;"	t	class:exprtk::details::exprtk_final
is_active	algorithm/Quad.h	/^  bool is_active() const { return active_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
is_active	algorithm/Quad.h	/^  void is_active(bool a) { active_ = a; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
is_active	algorithm/Triangle.h	/^  bool is_active() const { return active_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
is_active	algorithm/Triangle.h	/^  void is_active(bool a) { active_ = a; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
is_adjacent	algorithm/Vertex.h	/^  bool is_adjacent(const Edge& q) $/;"	f	class:TQMesh::TQAlgorithm::Vertex
is_adjacent	algorithm/Vertex.h	/^  bool is_adjacent(const Facet& q) $/;"	f	class:TQMesh::TQAlgorithm::Vertex
is_assignment_operation	app/exprtk.h	/^         inline bool is_assignment_operation(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
is_base_function	app/exprtk.h	/^      inline bool is_base_function(const std::string& function_name)$/;"	f	namespace:exprtk::details
is_binary	app/exprtk.h	/^      static inline bool is_binary(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_binary_node	app/exprtk.h	/^      inline bool is_binary_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_boc_node	app/exprtk.h	/^      inline bool is_boc_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_bracket	app/exprtk.h	/^      inline bool is_bracket(const char_t c)$/;"	f	namespace:exprtk::details
is_break_node	app/exprtk.h	/^      inline bool is_break_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ccw	algorithm/EdgeList.h	/^  bool is_ccw() const { return (orient_ == TQGeom::Orientation::CCW); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
is_closed	algorithm/QuadLayer.h	/^  bool is_closed() const { return is_closed_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
is_cob_node	app/exprtk.h	/^      inline bool is_cob_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_comment_start	app/exprtk.h	/^         inline bool is_comment_start(details::char_cptr itr)$/;"	f	class:exprtk::lexer::generator
is_comment_start	app/exprtk.h	/^         inline bool is_comment_start(details::char_cptr)$/;"	f	class:exprtk::lexer::generator
is_const	app/exprtk.h	/^      template <typename T> struct is_const                { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_const	app/exprtk.h	/^      template <typename T> struct is_const <const T>      { enum {result = 1}; };$/;"	s	namespace:exprtk::details
is_const_ref	app/exprtk.h	/^      template <typename T> struct is_const_ref            { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_const_ref	app/exprtk.h	/^      template <typename T> struct is_const_ref <const T&> { enum {result = 1}; };$/;"	s	namespace:exprtk::details
is_const_string_node	app/exprtk.h	/^      inline bool is_const_string_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_const_string_range_node	app/exprtk.h	/^      inline bool is_const_string_range_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_constant	app/exprtk.h	/^         inline bool is_constant(const std::string& symbol_name) const$/;"	f	struct:exprtk::symbol_table::type_store
is_constant	app/exprtk.h	/^      static inline bool is_constant(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_constant_foldable	app/exprtk.h	/^         inline bool is_constant_foldable(const Sequence<NodePtr,Allocator>& b) const$/;"	f	class:exprtk::parser::expression_generator
is_constant_node	app/exprtk.h	/^         inline bool is_constant_node(const std::string& symbol_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_constant_node	app/exprtk.h	/^      inline bool is_constant_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_constant_node	app/exprtk.h	/^      inline bool is_constant_node(const std::string& symbol_name) const$/;"	f	class:exprtk::symbol_table
is_constant_string	app/exprtk.h	/^         inline bool is_constant_string(const std::string& symbol_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_constant_string	app/exprtk.h	/^      inline bool is_constant_string(const std::string& symbol_name) const$/;"	f	class:exprtk::symbol_table
is_constpow_operation	app/exprtk.h	/^         inline bool is_constpow_operation(const details::operator_type& operation, expression_node_ptr(&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_conststr_stringvar	app/exprtk.h	/^         inline bool is_conststr_stringvar(const std::string& symbol_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_conststr_stringvar	app/exprtk.h	/^      inline bool is_conststr_stringvar(const std::string& symbol_name) const$/;"	f	class:exprtk::symbol_table
is_continue_node	app/exprtk.h	/^      inline bool is_continue_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_control_struct	app/exprtk.h	/^      inline bool is_control_struct(const std::string& cntrl_strct)$/;"	f	namespace:exprtk::details
is_cov_node	app/exprtk.h	/^      inline bool is_cov_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_digit	app/exprtk.h	/^      inline bool is_digit(const char_t c)$/;"	f	namespace:exprtk::details
is_end	app/exprtk.h	/^         inline bool is_end(details::char_cptr itr)$/;"	f	class:exprtk::lexer::generator
is_error	app/exprtk.h	/^         inline bool is_error() const$/;"	f	struct:exprtk::lexer::token
is_exterior	algorithm/Boundary.h	/^  bool is_exterior() const $/;"	f	class:TQMesh::TQAlgorithm::Boundary
is_false	app/exprtk.h	/^      inline bool is_false(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_false	app/exprtk.h	/^      inline bool is_false(const std::pair<expression_node<T>*,bool>& node)$/;"	f	namespace:exprtk::details
is_false_impl	app/exprtk.h	/^            inline bool is_false_impl(const T v)$/;"	f	namespace:exprtk::details::numeric::details
is_fixed	algorithm/Vertex.h	/^  bool is_fixed() const { return is_fixed_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
is_fixed	algorithm/Vertex.h	/^  void is_fixed( bool f ) { is_fixed_ = f; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
is_function	app/exprtk.h	/^         inline bool is_function(const std::string& function_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_function	app/exprtk.h	/^      inline bool is_function(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_function	app/exprtk.h	/^      inline bool is_function(const std::string& function_name) const$/;"	f	class:exprtk::symbol_table
is_function	app/exprtk.h	/^      static inline bool is_function(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_generally_string_node	app/exprtk.h	/^      inline bool is_generally_string_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_genricstring_range_node	app/exprtk.h	/^      inline bool is_genricstring_range_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_hex_digit	app/exprtk.h	/^      inline bool is_hex_digit(const uchar_t digit)$/;"	f	namespace:exprtk::details
is_inside	algorithm/Domain.h	/^  bool is_inside(const T& s) const $/;"	f	class:TQMesh::TQAlgorithm::Domain
is_inside	algorithm/EdgeList.h	/^  bool is_inside(const T& s) const $/;"	f	class:TQMesh::TQAlgorithm::EdgeList
is_integer	app/exprtk.h	/^         inline bool is_integer(const T v)$/;"	f	namespace:exprtk::details::numeric
is_integer_impl	app/exprtk.h	/^            inline bool is_integer_impl(const T& v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
is_integer_impl	app/exprtk.h	/^            inline bool is_integer_impl(const T&, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
is_interior	algorithm/Boundary.h	/^  bool is_interior() const$/;"	f	class:TQMesh::TQAlgorithm::Boundary
is_interior	algorithm/Edge.h	/^  bool is_interior() const$/;"	f	class:TQMesh::TQAlgorithm::Edge
is_invalid	app/exprtk.h	/^      inline bool is_invalid(const char_t c)$/;"	f	namespace:exprtk::details
is_invalid_arithmetic_operation	app/exprtk.h	/^      bool is_invalid_arithmetic_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_assignment_op	app/exprtk.h	/^         inline bool is_invalid_assignment_op(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_invalid_assignment_operation	app/exprtk.h	/^      bool is_invalid_assignment_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_inequality_operation	app/exprtk.h	/^      bool is_invalid_inequality_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_logic_operation	app/exprtk.h	/^      bool is_invalid_logic_operation(const details::operator_type operation) const$/;"	f	class:exprtk::parser
is_invalid_string_op	app/exprtk.h	/^         inline bool is_invalid_string_op(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_invalid_string_op	app/exprtk.h	/^         inline bool is_invalid_string_op(const details::operator_type& operation, expression_node_ptr (&branch)[3]) const$/;"	f	class:exprtk::parser::expression_generator
is_ivariable_node	app/exprtk.h	/^      inline bool is_ivariable_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ivector_node	app/exprtk.h	/^      inline bool is_ivector_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_left	utils/geometry.h	/^static inline bool is_left(const Vec2<T>& p,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
is_left_bracket	app/exprtk.h	/^      inline bool is_left_bracket(const char_t c)$/;"	f	namespace:exprtk::details
is_lefton	utils/geometry.h	/^static inline bool is_lefton(const Vec2<T>& p,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
is_letter	app/exprtk.h	/^      inline bool is_letter(const char_t c)$/;"	f	namespace:exprtk::details
is_letter_or_digit	app/exprtk.h	/^      inline bool is_letter_or_digit(const char_t c)$/;"	f	namespace:exprtk::details
is_logic_opr	app/exprtk.h	/^      inline bool is_logic_opr(const std::string& lgc_opr)$/;"	f	namespace:exprtk::details
is_nan	app/exprtk.h	/^         inline bool is_nan(const T v)$/;"	f	namespace:exprtk::details::numeric
is_nan_impl	app/exprtk.h	/^            inline bool is_nan_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
is_neg_unary_node	app/exprtk.h	/^      inline bool is_neg_unary_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_negate_node	app/exprtk.h	/^      inline bool is_negate_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_null	app/exprtk.h	/^      static inline bool is_null(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_null_node	app/exprtk.h	/^      inline bool is_null_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_operator_char	app/exprtk.h	/^      inline bool is_operator_char(const char_t c)$/;"	f	namespace:exprtk::details
is_rebasevector_celem_node	app/exprtk.h	/^      inline bool is_rebasevector_celem_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_rebasevector_elem_node	app/exprtk.h	/^      inline bool is_rebasevector_elem_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_ref	app/exprtk.h	/^      template <typename T> struct is_ref                  { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_ref	app/exprtk.h	/^      template <typename T> struct is_ref<T&>              { enum {result = 1}; };$/;"	s	namespace:exprtk::details
is_ref	app/exprtk.h	/^      template <typename T> struct is_ref<const T&>        { enum {result = 0}; };$/;"	s	namespace:exprtk::details
is_reserved_symbol	app/exprtk.h	/^            inline bool is_reserved_symbol(const std::string& symbol) const$/;"	f	struct:exprtk::symbol_table::control_block::st_data
is_reserved_symbol	app/exprtk.h	/^      inline bool is_reserved_symbol(const std::string& symbol)$/;"	f	namespace:exprtk::details
is_reserved_word	app/exprtk.h	/^      inline bool is_reserved_word(const std::string& symbol)$/;"	f	namespace:exprtk::details
is_return_node	app/exprtk.h	/^      inline bool is_return_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_right_bracket	app/exprtk.h	/^      inline bool is_right_bracket(const char_t c)$/;"	f	namespace:exprtk::details
is_sf3ext_node	app/exprtk.h	/^      inline bool is_sf3ext_node(const expression_node<T>* n)$/;"	f	namespace:exprtk::details
is_sf4ext_node	app/exprtk.h	/^      inline bool is_sf4ext_node(const expression_node<T>* n)$/;"	f	namespace:exprtk::details
is_shortcircuit_expression	app/exprtk.h	/^         inline bool is_shortcircuit_expression(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
is_shortcircuit_expression	app/exprtk.h	/^         inline bool is_shortcircuit_expression(const details::operator_type&) const$/;"	f	class:exprtk::parser::expression_generator
is_sign	app/exprtk.h	/^      inline bool is_sign(const char_t c)$/;"	f	namespace:exprtk::details
is_string_assignment_node	app/exprtk.h	/^      inline bool is_string_assignment_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_ccondition_node	app/exprtk.h	/^      inline bool is_string_ccondition_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_concat_node	app/exprtk.h	/^      inline bool is_string_concat_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_condition_node	app/exprtk.h	/^      inline bool is_string_condition_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_function_node	app/exprtk.h	/^      inline bool is_string_function_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_node	app/exprtk.h	/^      inline bool is_string_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_operation	app/exprtk.h	/^         inline bool is_string_operation(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_string_operation	app/exprtk.h	/^         inline bool is_string_operation(const details::operator_type& operation, expression_node_ptr (&branch)[3]) const$/;"	f	class:exprtk::parser::expression_generator
is_string_range_node	app/exprtk.h	/^      inline bool is_string_range_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_string_vararg_node	app/exprtk.h	/^      inline bool is_string_vararg_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_stringvar	app/exprtk.h	/^         inline bool is_stringvar(const std::string& stringvar_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_stringvar	app/exprtk.h	/^      inline bool is_stringvar(const std::string& stringvar_name) const$/;"	f	class:exprtk::symbol_table
is_swap_node	app/exprtk.h	/^      inline bool is_swap_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_t0ot1ot2_node	app/exprtk.h	/^      inline bool is_t0ot1ot2_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_t0ot1ot2ot3_node	app/exprtk.h	/^      inline bool is_t0ot1ot2ot3_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_traversable	algorithm/EdgeList.h	/^  bool is_traversable(Edge& e_start, Edge& e_end)$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
is_true	app/exprtk.h	/^      inline bool is_true(const double v)$/;"	f	namespace:exprtk::details
is_true	app/exprtk.h	/^      inline bool is_true(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_true	app/exprtk.h	/^      inline bool is_true(const float v)$/;"	f	namespace:exprtk::details
is_true	app/exprtk.h	/^      inline bool is_true(const long double v)$/;"	f	namespace:exprtk::details
is_true	app/exprtk.h	/^      inline bool is_true(const std::complex<T>& v)$/;"	f	namespace:exprtk::details
is_true	app/exprtk.h	/^      inline bool is_true(const std::pair<expression_node<T>*,bool>& node)$/;"	f	namespace:exprtk::details
is_true_impl	app/exprtk.h	/^            inline bool is_true_impl(const T v)$/;"	f	namespace:exprtk::details::numeric::details
is_unary	app/exprtk.h	/^      static inline bool is_unary(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_unary_node	app/exprtk.h	/^      inline bool is_unary_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_uv_node	app/exprtk.h	/^      inline bool is_uv_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_valid	algorithm/Quad.h	/^  bool is_valid() const$/;"	f	class:TQMesh::TQAlgorithm::Quad
is_valid	algorithm/Triangle.h	/^  bool is_valid() const$/;"	f	class:TQMesh::TQAlgorithm::Triangle
is_valid	app/exprtk.h	/^   inline bool is_valid(const expression<T>& expr)$/;"	f	namespace:exprtk
is_valid_sf_symbol	app/exprtk.h	/^      inline bool is_valid_sf_symbol(const std::string& symbol)$/;"	f	namespace:exprtk::details
is_valid_string_char	app/exprtk.h	/^      inline bool is_valid_string_char(const char_t c)$/;"	f	namespace:exprtk::details
is_vararg_function	app/exprtk.h	/^         inline bool is_vararg_function(const std::string& vararg_function_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_vararg_function	app/exprtk.h	/^      inline bool is_vararg_function(const std::string& vararg_function_name) const$/;"	f	class:exprtk::symbol_table
is_variable	app/exprtk.h	/^         inline bool is_variable(const std::string& variable_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_variable	app/exprtk.h	/^      inline bool is_variable(const std::string& variable_name) const$/;"	f	class:exprtk::symbol_table
is_variable	app/exprtk.h	/^      static inline bool is_variable(const expression<T>& expr)$/;"	f	class:exprtk::expression_helper
is_variable_node	app/exprtk.h	/^      inline bool is_variable_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_vector	app/exprtk.h	/^         inline bool is_vector(const std::string& vector_name) const$/;"	f	struct:exprtk::parser::symtab_store
is_vector	app/exprtk.h	/^      inline bool is_vector(const std::string& vector_name) const$/;"	f	class:exprtk::symbol_table
is_vector_arithmetic_operation	app/exprtk.h	/^         inline bool is_vector_arithmetic_operation(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_vector_elem_node	app/exprtk.h	/^      inline bool is_vector_elem_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_vector_eqineq_logic_operation	app/exprtk.h	/^         inline bool is_vector_eqineq_logic_operation(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
is_vector_node	app/exprtk.h	/^      inline bool is_vector_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_voc_node	app/exprtk.h	/^      inline bool is_voc_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_vov_node	app/exprtk.h	/^      inline bool is_vov_node(const expression_node<T>* node)$/;"	f	namespace:exprtk::details
is_whitespace	app/exprtk.h	/^      inline bool is_whitespace(const char_t c)$/;"	f	namespace:exprtk::details
items	utils/QTree.h	/^  const List& items() const { return items_; }$/;"	f	class:TQMesh::TQUtils::QTree
items_	utils/Container.h	/^  List            items_;$/;"	m	class:TQMesh::TQUtils::Container
items_	utils/QTree.h	/^  List         items_;$/;"	m	class:TQMesh::TQUtils::QTree
iteration_count	app/exprtk.h	/^         details::_uint64_t iteration_count;$/;"	m	struct:exprtk::loop_runtime_check::violation_context
iteration_count_	app/exprtk.h	/^         mutable _uint64_t iteration_count_;$/;"	m	struct:exprtk::details::loop_runtime_checker
ivararg_function	app/exprtk.h	/^   class ivararg_function : public function_traits$/;"	c	namespace:exprtk
ivararg_function_t	app/exprtk.h	/^         typedef ivararg_function<T>                 ivararg_function_t;$/;"	t	struct:exprtk::symbol_table::type_store
ivararg_function_t	app/exprtk.h	/^      typedef ivararg_function<T>                         ivararg_function_t;$/;"	t	class:exprtk::parser
ivariable	app/exprtk.h	/^      class ivariable$/;"	c	namespace:exprtk::details
ivariable_ptr	app/exprtk.h	/^         typedef ivariable<T>*       ivariable_ptr;$/;"	t	class:exprtk::details::exprtk_final
ivec_ptr_	app/exprtk.h	/^         vector_interface<T>* ivec_ptr_;$/;"	m	class:exprtk::details::exprtk_final
ivector_ptr	app/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_add_op
ivector_ptr	app/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_avg_op
ivector_ptr	app/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_max_op
ivector_ptr	app/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_min_op
ivector_ptr	app/exprtk.h	/^         typedef vector_interface<T>* ivector_ptr;$/;"	t	struct:exprtk::details::vec_mul_op
join	app/exprtk.h	/^            inline bool join(const lexer::token& t0, const lexer::token& t1, lexer::token& t)$/;"	f	class:exprtk::lexer::helper::operator_joiner
join	app/exprtk.h	/^            inline bool join(const lexer::token& t0,$/;"	f	class:exprtk::lexer::helper::operator_joiner
join	app/exprtk.h	/^         virtual bool join(const token&, const token&, const token&, token&) { return false; }$/;"	f	class:exprtk::lexer::token_joiner
join	app/exprtk.h	/^         virtual bool join(const token&, const token&, token&)               { return false; }$/;"	f	class:exprtk::lexer::token_joiner
joiner_enabled	app/exprtk.h	/^         bool joiner_enabled             () const { return enable_joiner_;             }$/;"	f	class:exprtk::parser::settings_store
kahan_sum	app/exprtk.h	/^      inline void kahan_sum(T& sum, T& error, const T v)$/;"	f	namespace:exprtk::rtl::vecops::details
key	utils/oldParaReader.h	/^  const string& key() const { return key_;   }$/;"	f	class:ListParameter
key	utils/oldParaReader.h	/^  const string& key() const { return key_;   }$/;"	f	class:ScalarParameter
key	utils/oldParaReader.h	/^  string& key() { return key_;   }$/;"	f	class:ListParameter
key	utils/oldParaReader.h	/^  string& key() { return key_;   }$/;"	f	class:ScalarParameter
key_	utils/oldParaReader.h	/^  string key_;$/;"	m	class:ListParameter
key_	utils/oldParaReader.h	/^  string key_;$/;"	m	class:ScalarParameter
left	app/exprtk.h	/^         precedence_level left;$/;"	m	struct:exprtk::parser::state_t
length	algorithm/Edge.h	/^  double length() const { return length_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
length	app/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
length	app/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon2
length	tests/container_test.cpp	/^  double length() const { return length_; }$/;"	f	class:ContainerTests::Edge
length	utils/Vec2.h	/^  double length() const $/;"	f	class:TQMesh::TQUtils::Vec2
length_	tests/container_test.cpp	/^  double      length_;$/;"	m	class:ContainerTests::Edge	file:
length_squared	utils/Vec2.h	/^  double length_squared() const $/;"	f	class:TQMesh::TQUtils::Vec2
lexer	app/exprtk.h	/^         inline const generator_t& lexer() const$/;"	f	class:exprtk::lexer::parser_helper
lexer	app/exprtk.h	/^         inline generator_t& lexer()$/;"	f	class:exprtk::lexer::parser_helper
lexer	app/exprtk.h	/^   namespace lexer$/;"	n	namespace:exprtk
lexer_	app/exprtk.h	/^         generator_t lexer_;$/;"	m	class:exprtk::lexer::parser_helper
library	app/exprtk.h	/^      static const char* library = "Mathematical Expression Toolkit";$/;"	m	namespace:exprtk::information
like_op	app/exprtk.h	/^      struct like_op : public opr_base<T>$/;"	s	namespace:exprtk::details
limit_exceeded_	app/exprtk.h	/^         bool limit_exceeded_;$/;"	m	class:exprtk::parser::stack_limit_handler
line_line_intersection	utils/geometry.h	/^static inline bool line_line_intersection(const Vec2<T>& p1,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
line_no	app/exprtk.h	/^         std::size_t line_no;$/;"	m	struct:exprtk::parser_error::type
line_quad_intersection	utils/geometry.h	/^static inline bool line_quad_intersection(const Vec2<T>& a,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
line_start_	utils/ParaReader.h	/^  size_t line_start_;$/;"	m	class:CppUtils::ParameterBase
line_start_	utils/oldParaReader.h	/^  size_t line_start_;$/;"	m	class:ListParameter
line_start_	utils/oldParaReader.h	/^  size_t line_start_;$/;"	m	class:ScalarParameter
line_to_start	utils/ParaReader.h	/^  int line_to_start() const { return line_start_; }$/;"	f	class:CppUtils::ParameterBase
line_to_start	utils/ParaReader.h	/^  void line_to_start(int l) { line_start_ = l; }$/;"	f	class:CppUtils::ParameterBase
line_to_start	utils/oldParaReader.h	/^  int line_to_start() const { return line_start_; }$/;"	f	class:ListParameter
line_to_start	utils/oldParaReader.h	/^  int line_to_start() const { return line_start_; }$/;"	f	class:ScalarParameter
line_to_start	utils/oldParaReader.h	/^  void line_to_start(int l) { line_start_ = l; }$/;"	f	class:ListParameter
line_to_start	utils/oldParaReader.h	/^  void line_to_start(int l) { line_start_ = l; }$/;"	f	class:ScalarParameter
line_tri_intersection	utils/geometry.h	/^static inline bool line_tri_intersection(const Vec2<T>& a,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
list_dbl_params_	utils/oldParaReader.h	/^  std::vector<ListParameter<double>>   list_dbl_params_;$/;"	m	class:ParaReader
list_int_params_	utils/oldParaReader.h	/^  std::vector<ListParameter<int>>      list_int_params_;$/;"	m	class:ParaReader
list_str_params_	utils/oldParaReader.h	/^  std::vector<ListParameter<string>>   list_str_params_;$/;"	m	class:ParaReader
literal_node	app/exprtk.h	/^         explicit literal_node(const T& v)$/;"	f	class:exprtk::details::exprtk_final
literal_node	app/exprtk.h	/^         literal_node(literal_node<T>&) {}$/;"	f	class:exprtk::details::exprtk_final
literal_node_t	app/exprtk.h	/^      typedef details::literal_node<T>                    literal_node_t;$/;"	t	class:exprtk::parser
load_binary_operations_map	app/exprtk.h	/^      inline void load_binary_operations_map(binary_op_map_t& m)$/;"	f	class:exprtk::parser
load_compile_options	app/exprtk.h	/^         void load_compile_options(const std::size_t compile_options)$/;"	f	class:exprtk::parser::settings_store
load_from	app/exprtk.h	/^      inline void load_from(const symbol_table<T>& st)$/;"	f	class:exprtk::symbol_table
load_inv_binary_operations_map	app/exprtk.h	/^      inline void load_inv_binary_operations_map(inv_binary_op_map_t& m)$/;"	f	class:exprtk::parser
load_operations_map	app/exprtk.h	/^      inline void load_operations_map(std::multimap<std::string,details::base_operation_t,details::ilesscompare>& m)$/;"	f	namespace:exprtk::details
load_sf3_map	app/exprtk.h	/^      inline void load_sf3_map(sf3_map_t& sf3_map)$/;"	f	class:exprtk::parser
load_sf4_map	app/exprtk.h	/^      inline void load_sf4_map(sf4_map_t& sf4_map)$/;"	f	class:exprtk::parser
load_unary_operations_map	app/exprtk.h	/^      inline void load_unary_operations_map(unary_op_map_t& m)$/;"	f	class:exprtk::parser
load_vector_range	app/exprtk.h	/^      struct load_vector_range$/;"	s	namespace:exprtk::rtl::vecops::helper
local_data	app/exprtk.h	/^         inline const local_data_t& local_data(const std::size_t& index = 0) const$/;"	f	struct:exprtk::parser::symtab_store
local_data	app/exprtk.h	/^         inline local_data_t& local_data(const std::size_t& index = 0)$/;"	f	struct:exprtk::parser::symtab_store
local_data	app/exprtk.h	/^      inline const local_data_t& local_data() const$/;"	f	class:exprtk::symbol_table
local_data	app/exprtk.h	/^      inline local_data_t& local_data()$/;"	f	class:exprtk::symbol_table
local_data_list	app/exprtk.h	/^         local_data_list_t local_data_list;$/;"	m	struct:exprtk::expression::control_block
local_data_list	app/exprtk.h	/^      inline const typename control_block::local_data_list_t& local_data_list()$/;"	f	class:exprtk::expression
local_data_list_t	app/exprtk.h	/^         typedef std::vector<data_pack> local_data_list_t;$/;"	t	struct:exprtk::expression::control_block
local_data_t	app/exprtk.h	/^         typedef typename symbol_table_t::local_data_t local_data_t;$/;"	t	struct:exprtk::parser::symtab_store
local_data_t	app/exprtk.h	/^      typedef typename control_block::st_data local_data_t;$/;"	t	class:exprtk::symbol_table
local_stack	app/exprtk.h	/^         std::deque<var_t> local_stack;$/;"	m	struct:exprtk::function_compositor::base_func
local_stringvar_list_	app/exprtk.h	/^            std::list<std::string>     local_stringvar_list_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
local_symbol_list_	app/exprtk.h	/^            std::list<T>               local_symbol_list_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
local_var_stack_size	app/exprtk.h	/^         std::size_t local_var_stack_size;$/;"	m	struct:exprtk::function_compositor::base_func
local_variable_is_shadowed	app/exprtk.h	/^      inline bool local_variable_is_shadowed(const std::string& symbol)$/;"	f	class:exprtk::parser
lodge_assignment	app/exprtk.h	/^         void lodge_assignment(symbol_type cst, expression_node_ptr node)$/;"	f	class:exprtk::parser::expression_generator
log10_impl	app/exprtk.h	/^            template <typename T> inline T log10_impl(const T v, int_type_tag) { return std::log10(v); }$/;"	f	namespace:exprtk::details::numeric::details
log10_impl	app/exprtk.h	/^            template <typename T> inline T log10_impl(const T v, real_type_tag) { return std::log10(v); }$/;"	f	namespace:exprtk::details::numeric::details
log1p_impl	app/exprtk.h	/^            inline T log1p_impl(const T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
log1p_impl	app/exprtk.h	/^            inline T log1p_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
log2	app/exprtk.h	/^            static const double log2    =  0.69314718055994530941723212145817656807550013436026;$/;"	m	namespace:exprtk::details::numeric::constant
log2_impl	app/exprtk.h	/^            template <typename T> inline T  log2_impl(const T v, int_type_tag) { return std::log(v)\/T(numeric::constant::log2); }$/;"	f	namespace:exprtk::details::numeric::details
log2_impl	app/exprtk.h	/^            template <typename T> inline T  log2_impl(const T v, real_type_tag) { return std::log(v)\/T(numeric::constant::log2); }$/;"	f	namespace:exprtk::details::numeric::details
log_impl	app/exprtk.h	/^            template <typename T> inline T   log_impl(const T v, int_type_tag) { return std::log  (v); }$/;"	f	namespace:exprtk::details::numeric::details
log_impl	app/exprtk.h	/^            template <typename T> inline T   log_impl(const T v, real_type_tag) { return std::log  (v); }$/;"	f	namespace:exprtk::details::numeric::details
logic_disabled	app/exprtk.h	/^         bool logic_disabled(const details::operator_type logic_operation) const$/;"	f	class:exprtk::parser::settings_store
logic_disabled	app/exprtk.h	/^         bool logic_disabled(const std::string& logic_operation) const$/;"	f	class:exprtk::parser::settings_store
logic_enabled	app/exprtk.h	/^         bool logic_enabled(const std::string& logic_operation) const$/;"	f	class:exprtk::parser::settings_store
logic_opr_to_string	app/exprtk.h	/^         std::string logic_opr_to_string(details::operator_type opr) const$/;"	f	class:exprtk::parser::settings_store
logic_ops_list	app/exprtk.h	/^      static const std::string logic_ops_list[] =$/;"	m	namespace:exprtk::details
logic_ops_list_size	app/exprtk.h	/^      static const std::size_t logic_ops_list_size = sizeof(logic_ops_list) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
logn	app/exprtk.h	/^         inline T logn(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
logn_impl	app/exprtk.h	/^            inline T logn_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
logn_impl	app/exprtk.h	/^            inline T logn_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
loop	app/exprtk.h	/^         loop_types loop;$/;"	m	struct:exprtk::loop_runtime_check::violation_context
loop_body_	app/exprtk.h	/^         branch_t loop_body_  ;$/;"	m	class:exprtk::details::for_loop_node
loop_body_	app/exprtk.h	/^         branch_t loop_body_;$/;"	m	class:exprtk::details::repeat_until_loop_node
loop_body_	app/exprtk.h	/^         branch_t loop_body_;$/;"	m	class:exprtk::details::while_loop_node
loop_runtime_check	app/exprtk.h	/^      loop_runtime_check()$/;"	f	struct:exprtk::loop_runtime_check
loop_runtime_check	app/exprtk.h	/^   struct loop_runtime_check$/;"	s	namespace:exprtk
loop_runtime_check_	app/exprtk.h	/^         mutable loop_runtime_check_ptr loop_runtime_check_;$/;"	m	struct:exprtk::details::loop_runtime_checker
loop_runtime_check_	app/exprtk.h	/^      loop_runtime_check_ptr loop_runtime_check_;$/;"	m	class:exprtk::parser
loop_runtime_check_ptr	app/exprtk.h	/^   typedef loop_runtime_check* loop_runtime_check_ptr;$/;"	t	namespace:exprtk
loop_runtime_checker	app/exprtk.h	/^         loop_runtime_checker(loop_runtime_check_ptr loop_runtime_check,$/;"	f	struct:exprtk::details::loop_runtime_checker
loop_runtime_checker	app/exprtk.h	/^      struct loop_runtime_checker$/;"	s	namespace:exprtk::details
loop_set	app/exprtk.h	/^      loop_types loop_set;$/;"	m	struct:exprtk::loop_runtime_check
loop_type_	app/exprtk.h	/^         loop_runtime_check::loop_types loop_type_;$/;"	m	struct:exprtk::details::loop_runtime_checker
loop_types	app/exprtk.h	/^      enum loop_types$/;"	g	struct:exprtk::loop_runtime_check
loop_unroll	app/exprtk.h	/^      namespace loop_unroll$/;"	n	namespace:exprtk::details
lowleft	utils/QTree.h	/^  const Vec2<V>& lowleft() const { return lowleft_; }$/;"	f	class:TQMesh::TQUtils::QTree
lt_op	app/exprtk.h	/^      struct lt_op : public opr_base<T>$/;"	s	namespace:exprtk::details
lte_op	app/exprtk.h	/^      struct lte_op : public opr_base<T>$/;"	s	namespace:exprtk::details
lut_size	app/exprtk.h	/^         enum { lut_size = 256 };$/;"	e	enum:exprtk::symbol_table::type_store::__anon14
lut_size	app/exprtk.h	/^      static const std::size_t lut_size = 256;$/;"	m	class:exprtk::symbol_table
lv	app/exprtk.h	/^         lvr_vec_t lv;$/;"	m	struct:exprtk::function_compositor::base_func
lvarref_t	app/exprtk.h	/^         typedef std::pair<T*,std::size_t> lvarref_t;$/;"	t	struct:exprtk::function_compositor::base_func
lvr_vec_t	app/exprtk.h	/^         typedef std::vector<lvarref_t>    lvr_vec_t;$/;"	t	struct:exprtk::function_compositor::base_func
main	app/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	tests/main.cpp	/^int main()$/;"	f
make	app/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(exprtk::vector_view<T>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_vecview
make	app/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(std::deque<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_stddeq
make	app/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(std::pair<T*,std::size_t> v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_array
make	app/exprtk.h	/^            static inline std::pair<bool,vector_t*> make(std::vector<T,Allocator>& v, const bool is_const = false)$/;"	f	struct:exprtk::symbol_table::type_store::tie_stdvec
make_error	app/exprtk.h	/^      inline type make_error(const error_mode mode,$/;"	f	namespace:exprtk::parser_error
make_handle	app/exprtk.h	/^      file_descriptor* make_handle(T v)$/;"	f	namespace:exprtk::rtl::io::file::details
make_vector_view	app/exprtk.h	/^   inline vector_view<T> make_vector_view(T* data,$/;"	f	namespace:exprtk
make_vector_view	app/exprtk.h	/^   inline vector_view<T> make_vector_view(std::vector<T>& v,$/;"	f	namespace:exprtk
map	app/exprtk.h	/^         type_map_t  map;$/;"	m	struct:exprtk::symbol_table::type_store
mark_objects	algorithm/EdgeList.h	/^  virtual void mark_objects(Vertex& v1, Vertex& v2, Edge& e) $/;"	f	class:TQMesh::TQAlgorithm::EdgeList
marker	algorithm/Edge.h	/^  int marker() const { return marker_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
match_impl	app/exprtk.h	/^      inline bool match_impl(const Iterator pattern_begin,$/;"	f	namespace:exprtk::details
match_sizes	app/exprtk.h	/^         static inline void match_sizes(type& vds0, type& vds1)$/;"	f	class:exprtk::details::vec_data_store
max	app/exprtk.h	/^         inline T max(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
max_angle	algorithm/Quad.h	/^  double max_angle() const { return max_angle_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
max_angle	algorithm/Triangle.h	/^  double max_angle() const { return max_angle_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
max_depth	utils/QTree.h	/^  size_t max_depth() const { return max_depth_; }$/;"	f	class:TQMesh::TQUtils::QTree
max_edge_length	algorithm/Quad.h	/^  double max_edge_length() const { return max_edge_len_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
max_exp	app/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
max_exp	app/exprtk.h	/^         template <> struct numeric_info<double     > { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon4
max_exp	app/exprtk.h	/^         template <> struct numeric_info<float      > { enum { min_exp =  -38, max_exp =  +38 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon3
max_exp	app/exprtk.h	/^         template <> struct numeric_info<long double> { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon5
max_impl	app/exprtk.h	/^            inline T max_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
max_items	utils/QTree.h	/^  size_t max_items() const { return max_item_; }$/;"	f	class:TQMesh::TQUtils::QTree
max_loop_iterations	app/exprtk.h	/^      details::_uint64_t max_loop_iterations;$/;"	m	struct:exprtk::loop_runtime_check
max_loop_iterations_	app/exprtk.h	/^         const details::_uint64_t& max_loop_iterations_;$/;"	m	struct:exprtk::details::loop_runtime_checker
max_node_depth_	app/exprtk.h	/^         std::size_t max_node_depth_;$/;"	m	class:exprtk::parser::settings_store
max_num_args	app/exprtk.h	/^      std::size_t& max_num_args()$/;"	f	class:exprtk::function_traits
max_num_args_	app/exprtk.h	/^      std::size_t max_num_args_;$/;"	m	class:exprtk::function_traits
max_stack_depth_	app/exprtk.h	/^         std::size_t max_stack_depth_;$/;"	m	class:exprtk::parser::settings_store
merge	utils/QTree.h	/^  bool merge()$/;"	f	class:TQMesh::TQUtils::QTree
merge_triangles_to_quads	algorithm/Mesh.h	/^  void merge_triangles_to_quads()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
mesh	app/unused.c	/^  std::cout << mesh;$/;"	v
meshing_time	tests/mesh_test.cpp	/^  std::vector<double>   meshing_time;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
meshing_type	app/unused.c	/^  std::string meshing_type = "Triangulation";$/;"	v
min	app/exprtk.h	/^         inline T min(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
min_angle	algorithm/Quad.h	/^  double min_angle() const { return min_angle_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
min_angle	algorithm/Triangle.h	/^  double min_angle() const { return min_angle_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
min_edge_length	algorithm/Quad.h	/^  double min_edge_length() const { return min_edge_len_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
min_exp	app/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
min_exp	app/exprtk.h	/^         template <> struct numeric_info<double     > { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon4
min_exp	app/exprtk.h	/^         template <> struct numeric_info<float      > { enum { min_exp =  -38, max_exp =  +38 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon3
min_exp	app/exprtk.h	/^         template <> struct numeric_info<long double> { enum { min_exp = -308, max_exp = +308 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon5
min_impl	app/exprtk.h	/^            inline T min_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
min_num_args	app/exprtk.h	/^      std::size_t& min_num_args()$/;"	f	class:exprtk::function_traits
min_num_args_	app/exprtk.h	/^      std::size_t min_num_args_;$/;"	m	class:exprtk::function_traits
min_size	app/exprtk.h	/^         static inline std::size_t min_size(control_block* cb0, control_block* cb1)$/;"	f	class:exprtk::details::vec_data_store
mod_op	app/exprtk.h	/^      struct mod_op : public opr_base<T>$/;"	s	namespace:exprtk::details
mode	app/exprtk.h	/^         error_mode mode;$/;"	m	struct:exprtk::parser_error::type
mode	app/exprtk.h	/^         file_mode   mode;$/;"	m	struct:exprtk::rtl::io::file::details::file_descriptor
mode	app/exprtk.h	/^         usr_mode mode;$/;"	m	struct:exprtk::parser::unknown_symbol_resolver
mode0	app/exprtk.h	/^         struct mode0$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode0	app/exprtk.h	/^         struct mode0$/;"	s	struct:exprtk::details::T0oT1oT2process
mode1	app/exprtk.h	/^         struct mode1$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode1	app/exprtk.h	/^         struct mode1$/;"	s	struct:exprtk::details::T0oT1oT2process
mode2	app/exprtk.h	/^         struct mode2$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode3	app/exprtk.h	/^         struct mode3$/;"	s	struct:exprtk::details::T0oT1oT20T3process
mode4	app/exprtk.h	/^         struct mode4$/;"	s	struct:exprtk::details::T0oT1oT20T3process
modify	app/exprtk.h	/^            bool modify(lexer::token& t)$/;"	f	class:exprtk::lexer::helper::symbol_replacer
modulus	app/exprtk.h	/^         inline T modulus(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
modulus_impl	app/exprtk.h	/^            inline T modulus_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
modulus_impl	app/exprtk.h	/^            inline T modulus_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
mul_op	app/exprtk.h	/^      struct mul_op : public opr_base<T>$/;"	s	namespace:exprtk::details
multi_line_definition	utils/ParaReader.h	/^  bool multi_line_definition() const { return multi_lines_; }$/;"	f	class:CppUtils::ParameterBase
multi_switch_node	app/exprtk.h	/^         explicit multi_switch_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
multi_switch_statement	app/exprtk.h	/^         inline expression_node_ptr multi_switch_statement(Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
multimode_genfunction_node	app/exprtk.h	/^         multimode_genfunction_node(GenericFunction* func,$/;"	f	class:exprtk::details::multimode_genfunction_node
multimode_genfunction_node	app/exprtk.h	/^      class multimode_genfunction_node : public generic_function_node<T,GenericFunction>$/;"	c	namespace:exprtk::details
multimode_strfunction_node	app/exprtk.h	/^         multimode_strfunction_node(StringFunction* func,$/;"	f	class:exprtk::details::exprtk_final
multiple_lines	utils/oldParaReader.h	/^  bool multiple_lines() const { return multi_lines_; }$/;"	f	class:ListParameter
n0_c	app/exprtk.h	/^         std::pair<bool,std::size_t        > n0_c;$/;"	m	struct:exprtk::details::range_pack
n0_e	app/exprtk.h	/^         std::pair<bool,expression_node_ptr> n0_e;$/;"	m	struct:exprtk::details::range_pack
n1_c	app/exprtk.h	/^         std::pair<bool,std::size_t        > n1_c;$/;"	m	struct:exprtk::details::range_pack
n1_e	app/exprtk.h	/^         std::pair<bool,expression_node_ptr> n1_e;$/;"	m	struct:exprtk::details::range_pack
n_bases	algorithm/QuadLayer.h	/^  int n_bases() const { return n_bases_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
n_bdry_edges	tests/mesh_test.cpp	/^  std::vector<int>      n_bdry_edges;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
n_extr_bdry	app/unused.c	/^  int n_extr_bdry = 0;$/;"	v
n_intr_edges	tests/mesh_test.cpp	/^  std::vector<int>      n_intr_edges;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
n_leafs	utils/QTree.h	/^  int n_leafs( int n = 0 ) const $/;"	f	class:TQMesh::TQUtils::QTree
n_quads	tests/mesh_test.cpp	/^  std::vector<int>      n_quads;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
n_tris	tests/mesh_test.cpp	/^  std::vector<int>      n_tris;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
n_vertices	algorithm/Facet.h	/^  virtual size_t n_vertices() const { return 0; }$/;"	f	class:TQMesh::TQAlgorithm::Facet
n_vertices	algorithm/Quad.h	/^  size_t n_vertices() const { return 4; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
n_vertices	algorithm/Triangle.h	/^  size_t n_vertices() const { return 3; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
n_vertices	tests/mesh_test.cpp	/^  std::vector<int>      n_vertices;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
name	app/exprtk.h	/^         inline function& name(const std::string& n)$/;"	f	struct:exprtk::function_compositor::function
name	app/exprtk.h	/^         std::string  name;$/;"	m	struct:exprtk::parser::scope_element
name	app/exprtk.h	/^      std::string name() const$/;"	f	class:exprtk::stringvar_base
name_	app/exprtk.h	/^         std::string name_;$/;"	m	struct:exprtk::function_compositor::function
name_	app/exprtk.h	/^      std::string name_;$/;"	m	class:exprtk::stringvar_base
nand_impl	app/exprtk.h	/^            inline T nand_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nand_impl	app/exprtk.h	/^            inline T nand_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nand_op	app/exprtk.h	/^      struct nand_op : public opr_base<T>$/;"	s	namespace:exprtk::details
nand_opr	app/exprtk.h	/^         inline T nand_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
nb_pair_t	app/exprtk.h	/^         typedef std::pair<node_ptr_t,bool> nb_pair_t;$/;"	t	struct:exprtk::details::node_depth_base
nb_pair_t	app/exprtk.h	/^         void collect(const nb_pair_t(&branch)[N],$/;"	m	struct:exprtk::details::node_depth_base
nbr1	algorithm/Quad.h	/^  Facet* nbr1() { return f_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr1	algorithm/Quad.h	/^  const Facet* nbr1() const { return f_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr1	algorithm/Quad.h	/^  void nbr1(Facet* f) { f_[0] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr1	algorithm/Triangle.h	/^  Facet* nbr1() { return f_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr1	algorithm/Triangle.h	/^  const Facet* nbr1() const { return f_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr1	algorithm/Triangle.h	/^  void nbr1(Facet* f) { f_[0] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr2	algorithm/Quad.h	/^  Facet* nbr2() { return f_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr2	algorithm/Quad.h	/^  const Facet* nbr2() const { return f_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr2	algorithm/Quad.h	/^  void nbr2(Facet* f) { f_[1] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr2	algorithm/Triangle.h	/^  Facet* nbr2() { return f_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr2	algorithm/Triangle.h	/^  const Facet* nbr2() const { return f_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr2	algorithm/Triangle.h	/^  void nbr2(Facet* f) { f_[1] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr3	algorithm/Quad.h	/^  Facet* nbr3() { return f_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr3	algorithm/Quad.h	/^  const Facet* nbr3() const { return f_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr3	algorithm/Quad.h	/^  void nbr3(Facet* f) { f_[2] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr3	algorithm/Triangle.h	/^  Facet* nbr3() { return f_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr3	algorithm/Triangle.h	/^  const Facet* nbr3() const { return f_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr3	algorithm/Triangle.h	/^  void nbr3(Facet* f) { f_[2] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nbr4	algorithm/Quad.h	/^  Facet* nbr4() { return f_[3]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr4	algorithm/Quad.h	/^  const Facet* nbr4() const { return f_[3]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
nbr4	algorithm/Quad.h	/^  void nbr4(Facet* f) { f_[3] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
ncdf_impl	app/exprtk.h	/^            inline T ncdf_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
ncdf_impl	app/exprtk.h	/^            inline T ncdf_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nci_t	app/exprtk.h	/^         typedef node_collector_interface<Node> nci_t;$/;"	t	class:exprtk::details::node_collection_destructor
nci_t	app/exprtk.h	/^         typedef node_collector_interface<expression_node<T> > nci_t;$/;"	t	class:exprtk::details::expression_node
ncol_	utils/ParaReader.h	/^  size_t ncol_;$/;"	m	class:CppUtils::Parameter
ndb_t	app/exprtk.h	/^         typedef node_depth_base<expression_node<T> > ndb_t;$/;"	t	class:exprtk::details::expression_node
ne	app/exprtk.h	/^      nthelement <T> ne;$/;"	m	struct:exprtk::rtl::vecops::package
ne_op	app/exprtk.h	/^      struct ne_op : public opr_base<T>$/;"	s	namespace:exprtk::details
near_zero_length	utils/Vec2.h	/^  bool near_zero_length(const T s=DBL_EPSILON) const$/;"	f	class:TQMesh::TQUtils::Vec2
near_zero_values	utils/Vec2.h	/^  bool near_zero_values(const T s=DBL_EPSILON) const$/;"	f	class:TQMesh::TQUtils::Vec2
neg_impl	app/exprtk.h	/^            template <typename T> inline T   neg_impl(const T v, int_type_tag) { return -v;            }$/;"	f	namespace:exprtk::details::numeric::details
neg_impl	app/exprtk.h	/^            template <typename T> inline T   neg_impl(const T v, real_type_tag) { return -v;            }$/;"	f	namespace:exprtk::details::numeric::details
neighbor	algorithm/Quad.h	/^  Facet* neighbor(size_t i) { return f_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
neighbor	algorithm/Quad.h	/^  const Facet* neighbor(size_t i) const { return f_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
neighbor	algorithm/Quad.h	/^  void neighbor(size_t i, Facet* f) { f_[i] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
neighbor	algorithm/Triangle.h	/^  Facet* neighbor(size_t i) { return f_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
neighbor	algorithm/Triangle.h	/^  const Facet* neighbor(size_t i) const { return f_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
neighbor	algorithm/Triangle.h	/^  void neighbor(size_t i, Facet* f) { f_[i] = f; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
nequal	app/exprtk.h	/^         inline T nequal(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
nequal_impl	app/exprtk.h	/^            inline T nequal_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nequal_impl	app/exprtk.h	/^            inline T nequal_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nequal_impl	app/exprtk.h	/^            inline float nequal_impl(const float v0, const float v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
new_bool_parameter	utils/oldParaReader.h	/^  new_bool_parameter(const string& key)$/;"	f	class:ParaReader
new_double_list_parameter	utils/oldParaReader.h	/^  new_double_list_parameter(const string& key)$/;"	f	class:ParaReader
new_double_list_parameter	utils/oldParaReader.h	/^  new_double_list_parameter(const string& start, const string& end)$/;"	f	class:ParaReader
new_double_parameter	utils/oldParaReader.h	/^  new_double_parameter(const string& key)$/;"	f	class:ParaReader
new_int_list_parameter	utils/oldParaReader.h	/^  new_int_list_parameter(const string& key)$/;"	f	class:ParaReader
new_int_list_parameter	utils/oldParaReader.h	/^  new_int_list_parameter(const string& start, const string& end)$/;"	f	class:ParaReader
new_int_parameter	utils/oldParaReader.h	/^  new_int_parameter(const string& key)$/;"	f	class:ParaReader
new_list_parameter	utils/ParaReader.h	/^  void new_list_parameter(const string& name, $/;"	f	class:CppUtils::ParaReader
new_list_parameter	utils/ParaReader.h	/^  void new_list_parameter(const string& name,$/;"	f	class:CppUtils::ParaReader
new_scalar_parameter	utils/ParaReader.h	/^  void new_scalar_parameter(const string& name, const string& key)$/;"	f	class:CppUtils::ParaReader
new_string_list_parameter	utils/oldParaReader.h	/^  new_string_list_parameter(const string& key)$/;"	f	class:ParaReader
new_string_list_parameter	utils/oldParaReader.h	/^  new_string_list_parameter(const string& start, const string& end)$/;"	f	class:ParaReader
new_string_parameter	utils/oldParaReader.h	/^  new_string_parameter(const string& key)$/;"	f	class:ParaReader
next_ip_index	app/exprtk.h	/^         inline std::size_t next_ip_index()$/;"	f	class:exprtk::parser::scope_element_manager
next_token	app/exprtk.h	/^         inline token_t& next_token()$/;"	f	class:exprtk::lexer::generator
next_token	app/exprtk.h	/^         inline void next_token()$/;"	f	class:exprtk::lexer::parser_helper
next_token	app/exprtk.h	/^      inline void next_token()$/;"	f	class:exprtk::parser
nf	app/exprtk.h	/^      any_false  <T> nf;$/;"	m	struct:exprtk::rtl::vecops::package
node_allocator	app/exprtk.h	/^      class node_allocator$/;"	c	namespace:exprtk::details
node_allocator_	app/exprtk.h	/^         details::node_allocator* node_allocator_;$/;"	m	class:exprtk::parser::expression_generator
node_allocator_	app/exprtk.h	/^      details::node_allocator node_allocator_;$/;"	m	class:exprtk::parser
node_collection_destructor	app/exprtk.h	/^      class node_collection_destructor$/;"	c	namespace:exprtk::details
node_collector_interface	app/exprtk.h	/^      struct node_collector_interface$/;"	s	namespace:exprtk::details
node_depth	app/exprtk.h	/^         virtual std::size_t node_depth() const { return 1; }$/;"	f	struct:exprtk::details::node_depth_base
node_depth_base	app/exprtk.h	/^         node_depth_base()$/;"	f	struct:exprtk::details::node_depth_base
node_depth_base	app/exprtk.h	/^      struct node_depth_base$/;"	s	namespace:exprtk::details
node_pp_t	app/exprtk.h	/^         typedef Node** node_pp_t;$/;"	t	struct:exprtk::details::node_collector_interface
node_pp_t	app/exprtk.h	/^         typedef typename nci_t::node_pp_t      node_pp_t;$/;"	t	class:exprtk::details::node_collection_destructor
node_ptr_t	app/exprtk.h	/^         typedef Node* node_ptr_t;$/;"	t	struct:exprtk::details::node_collector_interface
node_ptr_t	app/exprtk.h	/^         typedef Node* node_ptr_t;$/;"	t	struct:exprtk::details::node_depth_base
node_ptr_t	app/exprtk.h	/^         typedef typename nci_t::node_ptr_t     node_ptr_t;$/;"	t	class:exprtk::details::node_collection_destructor
node_type	app/exprtk.h	/^            typedef typename cocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_cocov_expression0
node_type	app/exprtk.h	/^            typedef typename cocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
node_type	app/exprtk.h	/^            typedef typename covoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
node_type	app/exprtk.h	/^            typedef typename covoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
node_type	app/exprtk.h	/^            typedef typename covocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
node_type	app/exprtk.h	/^            typedef typename covocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
node_type	app/exprtk.h	/^            typedef typename covocov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
node_type	app/exprtk.h	/^            typedef typename covocov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
node_type	app/exprtk.h	/^            typedef typename covocov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
node_type	app/exprtk.h	/^            typedef typename covov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
node_type	app/exprtk.h	/^            typedef typename covov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
node_type	app/exprtk.h	/^            typedef typename covovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
node_type	app/exprtk.h	/^            typedef typename covovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
node_type	app/exprtk.h	/^            typedef typename covovoc_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
node_type	app/exprtk.h	/^            typedef typename covovoc_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
node_type	app/exprtk.h	/^            typedef typename covovoc_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
node_type	app/exprtk.h	/^            typedef typename covovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
node_type	app/exprtk.h	/^            typedef typename covovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
node_type	app/exprtk.h	/^            typedef typename covovov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
node_type	app/exprtk.h	/^            typedef typename covovov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
node_type	app/exprtk.h	/^            typedef typename covovov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
node_type	app/exprtk.h	/^            typedef typename vococ_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
node_type	app/exprtk.h	/^            typedef typename vococ_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococ_expression1
node_type	app/exprtk.h	/^            typedef typename vococov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
node_type	app/exprtk.h	/^            typedef typename vococov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
node_type	app/exprtk.h	/^            typedef typename vococov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression2
node_type	app/exprtk.h	/^            typedef typename vococov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
node_type	app/exprtk.h	/^            typedef typename vococov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression4
node_type	app/exprtk.h	/^            typedef typename vocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
node_type	app/exprtk.h	/^            typedef typename vocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
node_type	app/exprtk.h	/^            typedef typename vocovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
node_type	app/exprtk.h	/^            typedef typename vocovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
node_type	app/exprtk.h	/^            typedef typename vocovoc_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
node_type	app/exprtk.h	/^            typedef typename vocovoc_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
node_type	app/exprtk.h	/^            typedef typename vocovoc_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
node_type	app/exprtk.h	/^            typedef typename vocovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
node_type	app/exprtk.h	/^            typedef typename vocovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
node_type	app/exprtk.h	/^            typedef typename vocovov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
node_type	app/exprtk.h	/^            typedef typename vocovov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
node_type	app/exprtk.h	/^            typedef typename vocovov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
node_type	app/exprtk.h	/^            typedef typename vovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
node_type	app/exprtk.h	/^            typedef typename vovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
node_type	app/exprtk.h	/^            typedef typename vovocov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
node_type	app/exprtk.h	/^            typedef typename vovocov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
node_type	app/exprtk.h	/^            typedef typename vovocov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
node_type	app/exprtk.h	/^            typedef typename vovocov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
node_type	app/exprtk.h	/^            typedef typename vovocov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
node_type	app/exprtk.h	/^            typedef typename vovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
node_type	app/exprtk.h	/^            typedef typename vovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
node_type	app/exprtk.h	/^            typedef typename vovovoc_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
node_type	app/exprtk.h	/^            typedef typename vovovoc_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
node_type	app/exprtk.h	/^            typedef typename vovovoc_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
node_type	app/exprtk.h	/^            typedef typename vovovoc_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
node_type	app/exprtk.h	/^            typedef typename vovovoc_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
node_type	app/exprtk.h	/^            typedef typename vovovov_t::type0 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
node_type	app/exprtk.h	/^            typedef typename vovovov_t::type1 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
node_type	app/exprtk.h	/^            typedef typename vovovov_t::type2 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
node_type	app/exprtk.h	/^            typedef typename vovovov_t::type3 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
node_type	app/exprtk.h	/^            typedef typename vovovov_t::type4 node_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
node_type	app/exprtk.h	/^         enum node_type$/;"	g	class:exprtk::details::expression_node
node_type	app/exprtk.h	/^         typedef T0oT1<T,T0,T1> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	app/exprtk.h	/^         typedef T0oT1oT2<T,T0,T1,T2,ProcessMode> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	app/exprtk.h	/^         typedef T0oT1oT2_sf3<T,T0,T1,T2> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	app/exprtk.h	/^         typedef T0oT1oT2_sf3ext<T,T0,T1,T2,SF3Operation> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	app/exprtk.h	/^         typedef T0oT1oT2oT3<T,T0,T1,T2,T3,ProcessMode> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	app/exprtk.h	/^         typedef T0oT1oT2oT3_sf4<T,T0,T1,T2,T3> node_type;$/;"	t	class:exprtk::details::exprtk_final
node_type	app/exprtk.h	/^         typedef T0oT1oT2oT3_sf4ext<T,T0,T1,T2,T3,SF4Operation> node_type;$/;"	t	class:exprtk::details::exprtk_final
noderef_list_t	app/exprtk.h	/^         typedef std::vector<node_pp_t> noderef_list_t;$/;"	t	struct:exprtk::details::node_collector_interface
noderef_list_t	app/exprtk.h	/^         typedef typename nci_t::noderef_list_t noderef_list_t;$/;"	t	class:exprtk::details::expression_node
noderef_list_t	app/exprtk.h	/^         typedef typename nci_t::noderef_list_t noderef_list_t;$/;"	t	class:exprtk::details::node_collection_destructor
nodetype_T0oT1	app/exprtk.h	/^      struct nodetype_T0oT1 { static const typename expression_node<T>::node_type result; };$/;"	s	namespace:exprtk::details
nodetype_T0oT1oT2	app/exprtk.h	/^      struct nodetype_T0oT1oT2 { static const typename expression_node<T>::node_type result; };$/;"	s	namespace:exprtk::details
nodetype_T0oT1oT2oT3	app/exprtk.h	/^      struct nodetype_T0oT1oT2oT3 { static const typename expression_node<T>::node_type result; };$/;"	s	namespace:exprtk::details
nor_impl	app/exprtk.h	/^            inline T nor_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nor_impl	app/exprtk.h	/^            inline T nor_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
nor_op	app/exprtk.h	/^      struct nor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
nor_opr	app/exprtk.h	/^         inline T nor_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
norm_	tests/container_test.cpp	/^  Vec2d       norm_;$/;"	m	class:ContainerTests::Edge	file:
normal	algorithm/Edge.h	/^  const Vec2d& normal() const { return norm_;}$/;"	f	class:TQMesh::TQAlgorithm::Edge
normal	tests/container_test.cpp	/^  const Vec2d& normal() const { return norm_;}$/;"	f	class:ContainerTests::Edge
notl_impl	app/exprtk.h	/^            template <typename T> inline T  notl_impl(const T v, int_type_tag) { return !v;            }$/;"	f	namespace:exprtk::details::numeric::details
notl_impl	app/exprtk.h	/^            template <typename T> inline T  notl_impl(const T v, real_type_tag) { return (std::not_equal_to<T>()(T(0),v) ? T(0) : T(1)); }$/;"	f	namespace:exprtk::details::numeric::details
nrow_	utils/ParaReader.h	/^  size_t nrow_;$/;"	m	class:CppUtils::Parameter
nt	app/exprtk.h	/^      any_true   <T> nt;$/;"	m	struct:exprtk::rtl::vecops::package
nthelement	app/exprtk.h	/^      nthelement()$/;"	f	class:exprtk::rtl::vecops::nthelement
nthelement	app/exprtk.h	/^   class nthelement : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
null_element_	app/exprtk.h	/^         scope_element null_element_;$/;"	m	class:exprtk::parser::scope_element_manager
null_igenfunc	app/exprtk.h	/^      class null_igenfunc$/;"	c	namespace:exprtk::details
null_value	app/exprtk.h	/^         static T null_value;$/;"	m	class:exprtk::details::exprtk_final
null_value	app/exprtk.h	/^         static std::string null_value;$/;"	m	class:exprtk::details::exprtk_final
null_value	app/exprtk.h	/^      T variable_node<T>::null_value = T(std::numeric_limits<T>::quiet_NaN());$/;"	m	class:exprtk::details::variable_node
null_value	app/exprtk.h	/^      std::string string_range_node<T>::null_value = std::string("");$/;"	m	class:exprtk::details::string_range_node
null_value	app/exprtk.h	/^      std::string stringvar_node<T>::null_value = std::string("");$/;"	m	class:exprtk::details::stringvar_node
null_value	app/exprtk.h	/^      std::string stringvar_size_node<T>::null_value = std::string("");$/;"	m	class:exprtk::details::stringvar_size_node
num_params	app/exprtk.h	/^         unsigned int num_params;$/;"	m	struct:exprtk::details::base_operation_t
num_type	app/exprtk.h	/^         typedef typename exprtk::details::numeric::details::number_type<T>::type num_type;$/;"	t	struct:exprtk::rtl::io::details::print_impl
number_type	app/exprtk.h	/^               number_type() {}$/;"	f	struct:exprtk::details::numeric::details::number_type
number_type	app/exprtk.h	/^            struct number_type$/;"	s	namespace:exprtk::details::numeric::details
numeric	app/exprtk.h	/^      namespace numeric$/;"	n	namespace:exprtk::details
numeric_check_enabled	app/exprtk.h	/^         bool numeric_check_enabled      () const { return enable_numeric_check_;      }$/;"	f	class:exprtk::parser::settings_store
numeric_checker	app/exprtk.h	/^            numeric_checker()$/;"	f	class:exprtk::lexer::helper::numeric_checker
numeric_checker	app/exprtk.h	/^         class numeric_checker : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
numeric_checker_	app/exprtk.h	/^      lexer::helper::numeric_checker            numeric_checker_;$/;"	m	class:exprtk::parser
numeric_info	app/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	app/exprtk.h	/^         template <> struct numeric_info<double     > { enum { min_exp = -308, max_exp = +308 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	app/exprtk.h	/^         template <> struct numeric_info<float      > { enum { min_exp =  -38, max_exp =  +38 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	app/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	s	namespace:exprtk::details::numeric
numeric_info	app/exprtk.h	/^         template <> struct numeric_info<long double> { enum { min_exp = -308, max_exp = +308 }; };$/;"	s	namespace:exprtk::details::numeric
o	app/exprtk.h	/^      open   <T> o;$/;"	m	struct:exprtk::rtl::io::file::package
on_boundary	algorithm/Edge.h	/^  bool on_boundary() const $/;"	f	class:TQMesh::TQAlgorithm::Edge
on_boundary	algorithm/Vertex.h	/^  bool on_boundary() const { return on_bdry_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
on_boundary	algorithm/Vertex.h	/^  void on_boundary( bool b ) { on_bdry_ = b; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
on_front	algorithm/Vertex.h	/^  bool on_front() const { return on_front_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
on_front	algorithm/Vertex.h	/^  void on_front( bool f ) { on_front_ = f; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
open	app/exprtk.h	/^         bool open()$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
open	app/exprtk.h	/^      open()$/;"	f	class:exprtk::rtl::io::file::open
open	app/exprtk.h	/^   class open : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
operation	app/exprtk.h	/^         details::operator_type operation;$/;"	m	struct:exprtk::parser::state_t
operation	app/exprtk.h	/^         inline operator_type operation()$/;"	f	class:exprtk::details::binary_node
operation	app/exprtk.h	/^         inline operator_type operation()$/;"	f	class:exprtk::details::exprtk_final
operation	app/exprtk.h	/^         inline operator_type operation()$/;"	f	class:exprtk::details::unary_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::boc_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::cob_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::cov_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::sos_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::sosos_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::uv_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::voc_base_node
operation	app/exprtk.h	/^         inline virtual operator_type operation() const$/;"	f	class:exprtk::details::vov_base_node
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_add; }$/;"	f	struct:exprtk::details::add_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_and; }$/;"	f	struct:exprtk::details::and_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_div; }$/;"	f	struct:exprtk::details::div_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_eq; }$/;"	f	struct:exprtk::details::eq_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_equal; }$/;"	f	struct:exprtk::details::equal_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_gt; }$/;"	f	struct:exprtk::details::gt_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_gte; }$/;"	f	struct:exprtk::details::gte_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_ilike; }$/;"	f	struct:exprtk::details::ilike_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_in; }$/;"	f	struct:exprtk::details::in_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_inrange; }$/;"	f	struct:exprtk::details::inrange_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_like; }$/;"	f	struct:exprtk::details::like_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_lt; }$/;"	f	struct:exprtk::details::lt_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_lte; }$/;"	f	struct:exprtk::details::lte_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_mod; }$/;"	f	struct:exprtk::details::mod_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_mul; }$/;"	f	struct:exprtk::details::mul_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_nand; }$/;"	f	struct:exprtk::details::nand_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_ne; }$/;"	f	struct:exprtk::details::ne_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_nor; }$/;"	f	struct:exprtk::details::nor_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_or; }$/;"	f	struct:exprtk::details::or_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_pow; }$/;"	f	struct:exprtk::details::pow_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_sub; }$/;"	f	struct:exprtk::details::sub_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_xnor; }$/;"	f	struct:exprtk::details::xnor_op
operation	app/exprtk.h	/^         static inline details::operator_type operation() { return details::e_xor; }$/;"	f	struct:exprtk::details::xor_op
operation_	app/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::binary_node
operation_	app/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::quaternary_node
operation_	app/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::trinary_node
operation_	app/exprtk.h	/^         operator_type operation_;$/;"	m	class:exprtk::details::unary_node
operation_optimisable	app/exprtk.h	/^         inline bool operation_optimisable(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
operation_t	app/exprtk.h	/^         typedef Operation                      operation_t;$/;"	t	class:exprtk::details::exprtk_final
operation_t	app/exprtk.h	/^         typedef Operation operation_t;$/;"	t	class:exprtk::details::exprtk_final
operation_t	app/exprtk.h	/^         typedef PowOp operation_t;$/;"	t	class:exprtk::details::exprtk_final
operator !	app/exprtk.h	/^         bool operator!()$/;"	f	class:exprtk::parser::stack_limit_handler
operator !	app/exprtk.h	/^      inline bool operator!() const$/;"	f	class:exprtk::expression
operator !=	algorithm/Edge.h	/^static bool operator!=(const Edge& e1, const Edge& e2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator !=	algorithm/Quad.h	/^static bool operator!=(const Quad& q1, const Quad& q2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator !=	algorithm/Triangle.h	/^static bool operator!=(const Triangle& t1, const Triangle& t2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator !=	algorithm/Vertex.h	/^static bool operator!=(const Vertex& v1, const Vertex& v2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator !=	tests/container_test.cpp	/^static bool operator!=(const Edge& e1, const Edge& e2)$/;"	f	namespace:ContainerTests
operator !=	tests/container_test.cpp	/^static bool operator!=(const Vertex& v1, const Vertex& v2)$/;"	f	namespace:ContainerTests
operator !=	utils/Vec2.h	/^inline bool operator!=(const Vec2<T>& a, const Vec2<T>& b)$/;"	f	namespace:TQMesh::TQUtils
operator ()	app/exprtk.h	/^            bool operator() (const lexer::token& t)$/;"	f	class:exprtk::lexer::helper::bracket_checker
operator ()	app/exprtk.h	/^            bool operator() (const lexer::token& t)$/;"	f	class:exprtk::lexer::helper::numeric_checker
operator ()	app/exprtk.h	/^            bool operator() (const lexer::token& t0, const lexer::token& t1)$/;"	f	class:exprtk::lexer::helper::sequence_validator
operator ()	app/exprtk.h	/^            bool operator() (const lexer::token& t0, const lexer::token& t1, const lexer::token& t2)$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
operator ()	app/exprtk.h	/^          inline T operator() ()$/;"	f	struct:exprtk::symbol_table::freefunc00
operator ()	app/exprtk.h	/^         bool operator() (std::size_t& r0, std::size_t& r1,$/;"	f	struct:exprtk::details::range_pack
operator ()	app/exprtk.h	/^         inline T operator() ()$/;"	f	struct:exprtk::function_compositor::func_0param
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0)$/;"	f	struct:exprtk::symbol_table::freefunc01
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1)$/;"	f	struct:exprtk::symbol_table::freefunc02
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2)$/;"	f	struct:exprtk::symbol_table::freefunc03
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3)$/;"	f	struct:exprtk::symbol_table::freefunc04
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4)$/;"	f	struct:exprtk::symbol_table::freefunc05
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4, const T& v5)$/;"	f	struct:exprtk::symbol_table::freefunc06
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc07
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc08
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc09
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc10
operator ()	app/exprtk.h	/^         inline T operator() (const T& v0, const T& v1, const T& v2, const T& v3, const T& v4,$/;"	f	struct:exprtk::symbol_table::freefunc11
operator ()	app/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc12
operator ()	app/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc13
operator ()	app/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc14
operator ()	app/exprtk.h	/^         inline T operator() (const T& v00, const T& v01, const T& v02, const T& v03, const T& v04,$/;"	f	struct:exprtk::symbol_table::freefunc15
operator ()	app/exprtk.h	/^         inline T operator() (type v0)$/;"	f	struct:exprtk::function_compositor::func_1param
operator ()	app/exprtk.h	/^         inline T operator() (type v0, type v1)$/;"	f	struct:exprtk::function_compositor::func_2param
operator ()	app/exprtk.h	/^         inline T operator() (type v0, type v1, type v2)$/;"	f	struct:exprtk::function_compositor::func_3param
operator ()	app/exprtk.h	/^         inline T operator() (type v0, type v1, type v2, type v3)$/;"	f	struct:exprtk::function_compositor::func_4param
operator ()	app/exprtk.h	/^         inline T operator() (type v0, type v1, type v2, type v3, type v4)$/;"	f	struct:exprtk::function_compositor::func_5param
operator ()	app/exprtk.h	/^         inline T operator() (type v0, type v1, type v2, type v3, type v4, type v5)$/;"	f	struct:exprtk::function_compositor::func_6param
operator ()	app/exprtk.h	/^         inline bool operator() (const std::string& s1, const std::string& s2) const$/;"	f	struct:exprtk::details::ilesscompare
operator ()	app/exprtk.h	/^         inline const value_t& operator() () const$/;"	f	struct:exprtk::type_store::scalar_view
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const Type& v) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[1])$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr b0)$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const details::operator_type& operation, expression_node_ptr& b0, expression_node_ptr& b1)$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const std::string& s) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (const std::string& s, range_t& rp) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (expression_node_ptr branch, range_t& rp) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline expression_node_ptr operator() (std::string& s, range_t& rp) const$/;"	f	class:exprtk::parser::expression_generator
operator ()	app/exprtk.h	/^         inline value_t& operator() ()$/;"	f	struct:exprtk::type_store::scalar_view
operator ()	app/exprtk.h	/^         inline virtual T operator() (parameter_list_t)$/;"	f	class:exprtk::details::null_igenfunc
operator ()	app/exprtk.h	/^         virtual bool operator() (const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	app/exprtk.h	/^         virtual bool operator() (const token&, const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	app/exprtk.h	/^         virtual bool operator() (const token&, const token&, const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	app/exprtk.h	/^         virtual bool operator() (const token&, const token&, const token&, const token&)$/;"	f	class:exprtk::lexer::token_scanner
operator ()	app/exprtk.h	/^      inline T operator() () const$/;"	f	class:exprtk::expression
operator ()	app/exprtk.h	/^      inline T operator() (const T& v)$/;"	f	struct:exprtk::rtl::io::file::close
operator ()	app/exprtk.h	/^      inline T operator() (const T& v)$/;"	f	struct:exprtk::rtl::io::file::eof
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::io::file::open
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::io::file::read
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::io::file::write
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::all_false
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::all_true
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::any_false
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::any_true
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpby
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpbyz
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpbz
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpy
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::axpyz
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::copy
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::count
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::dot
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::dotk
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::iota
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::nthelement
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::rol
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::ror
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::shift_left
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::shift_right
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::sort
operator ()	app/exprtk.h	/^      inline T operator() (const std::size_t& ps_index, parameter_list_t parameters)$/;"	f	class:exprtk::rtl::vecops::sumk
operator ()	app/exprtk.h	/^      inline T operator() (parameter_list_t parameters)$/;"	f	struct:exprtk::rtl::io::print
operator ()	app/exprtk.h	/^      inline T operator() (parameter_list_t parameters)$/;"	f	struct:exprtk::rtl::io::println
operator ()	app/exprtk.h	/^      inline T operator() (std::string& result,$/;"	f	class:exprtk::rtl::io::file::getline
operator ()	app/exprtk.h	/^      inline virtual T operator() ()$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c1, const T& c0)$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c10, const T& c9, const T& c8, const T& c7,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c11, const T& c10, const T& c9, const T& c8,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c12, const T& c11, const T& c10, const T& c9,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c2, const T& c1, const T& c0)$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c3, const T& c2, const T& c1, const T& c0)$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c4, const T& c3, const T& c2, const T& c1,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c5, const T& c4, const T& c3, const T& c2,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c6, const T& c5, const T& c4, const T& c3,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c7, const T& c6, const T& c5, const T& c4,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c8, const T& c7, const T& c6, const T& c5,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T& x, const T& c9, const T& c8, const T& c7, const T& c6,$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T&)$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const T&, const T&)$/;"	f	class:exprtk::polynomial
operator ()	app/exprtk.h	/^      inline virtual T operator() (const std::vector<T>&)$/;"	f	class:exprtk::ivararg_function
operator *	utils/Vec2.h	/^inline Vec2<T> operator*(const T v, const Vec2<T> &u)$/;"	f	namespace:TQMesh::TQUtils
operator *	utils/Vec2.h	/^inline Vec2<T> operator*(const Vec2<T> &u, const T v)$/;"	f	namespace:TQMesh::TQUtils
operator *	utils/Vec2.h	/^inline Vec2<T> operator*(const Vec2<T> &u,const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
operator *=	utils/Vec2.h	/^  Vec2<T>& operator*=(const T t)$/;"	f	class:TQMesh::TQUtils::Vec2
operator *=	utils/Vec2.h	/^  Vec2<T>& operator*=(const Vec2<T> &v)$/;"	f	class:TQMesh::TQUtils::Vec2
operator +	utils/Vec2.h	/^inline Vec2<T> operator+(const T v, const Vec2<T> &u)$/;"	f	namespace:TQMesh::TQUtils
operator +	utils/Vec2.h	/^inline Vec2<T> operator+(const Vec2<T> &u, const T v)$/;"	f	namespace:TQMesh::TQUtils
operator +	utils/Vec2.h	/^inline Vec2<T> operator+(const Vec2<T> &u,const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
operator +=	utils/Vec2.h	/^  Vec2<T>& operator+=(const T t)$/;"	f	class:TQMesh::TQUtils::Vec2
operator +=	utils/Vec2.h	/^  Vec2<T>& operator+=(const Vec2<T> &v)$/;"	f	class:TQMesh::TQUtils::Vec2
operator -	utils/Vec2.h	/^  Vec2<T> operator-() const { return Vec2(-x,-y); }$/;"	f	class:TQMesh::TQUtils::Vec2
operator -	utils/Vec2.h	/^inline Vec2<T> operator-(const T v, const Vec2<T> &u)$/;"	f	namespace:TQMesh::TQUtils
operator -	utils/Vec2.h	/^inline Vec2<T> operator-(const Vec2<T> &u, const T v)$/;"	f	namespace:TQMesh::TQUtils
operator -	utils/Vec2.h	/^inline Vec2<T> operator-(const Vec2<T> &u,const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
operator -=	utils/Vec2.h	/^  Vec2<T>& operator-=(const T t)$/;"	f	class:TQMesh::TQUtils::Vec2
operator -=	utils/Vec2.h	/^  Vec2<T>& operator-=(const Vec2<T> &v)$/;"	f	class:TQMesh::TQUtils::Vec2
operator /	utils/Vec2.h	/^inline Vec2<T> operator\/(const T v, const Vec2<T> &u)$/;"	f	namespace:TQMesh::TQUtils
operator /	utils/Vec2.h	/^inline Vec2<T> operator\/(const Vec2<T> &u, const T v)$/;"	f	namespace:TQMesh::TQUtils
operator /	utils/Vec2.h	/^inline Vec2<T> operator\/(const Vec2<T> &u,const Vec2<T> &v)$/;"	f	namespace:TQMesh::TQUtils
operator /=	utils/Vec2.h	/^  Vec2<T>& operator\/=(const T t)$/;"	f	class:TQMesh::TQUtils::Vec2
operator /=	utils/Vec2.h	/^  Vec2<T>& operator\/=(const Vec2<T> &v)$/;"	f	class:TQMesh::TQUtils::Vec2
operator <	app/exprtk.h	/^         bool operator < (const scope_element& se) const$/;"	f	struct:exprtk::parser::scope_element
operator <	app/exprtk.h	/^         inline bool operator <(const function_N_node<T,IFunction,0>& fn) const$/;"	f	class:exprtk::details::exprtk_final
operator <	app/exprtk.h	/^         inline bool operator <(const function_N_node<T,IFunction,N>& fn) const$/;"	f	class:exprtk::details::exprtk_final
operator <	app/exprtk.h	/^         inline bool operator <(const generic_function_node<T,GenericFunction>& fn) const$/;"	f	class:exprtk::details::generic_function_node
operator <	app/exprtk.h	/^         inline bool operator <(const string_function_node<T,StringFunction>& fn) const$/;"	f	class:exprtk::details::string_function_node
operator <	app/exprtk.h	/^         inline bool operator <(const string_range_node<T>& v) const$/;"	f	class:exprtk::details::exprtk_final
operator <	app/exprtk.h	/^         inline bool operator <(const stringvar_node<T>& v) const$/;"	f	class:exprtk::details::exprtk_final
operator <	app/exprtk.h	/^         inline bool operator <(const vararg_function_node<T,VarArgFunction>& fn) const$/;"	f	class:exprtk::details::exprtk_final
operator <	app/exprtk.h	/^         inline bool operator <(const variable_node<T>& v) const$/;"	f	class:exprtk::details::exprtk_final
operator <<	algorithm/Edge.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQAlgorithm
operator <<	algorithm/EdgeList.h	/^static inline std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQAlgorithm
operator <<	algorithm/Mesh.h	/^static inline std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQAlgorithm
operator <<	algorithm/Quad.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQAlgorithm
operator <<	algorithm/Triangle.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQAlgorithm
operator <<	algorithm/Vertex.h	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQAlgorithm
operator <<	app/exprtk.h	/^         inline build_string& operator << (char_cptr s)$/;"	f	class:exprtk::details::build_string
operator <<	app/exprtk.h	/^         inline build_string& operator << (const std::string& s)$/;"	f	class:exprtk::details::build_string
operator <<	tests/container_test.cpp	/^static std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:ContainerTests
operator <<	utils/ProgressBar.h	/^static inline std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQUtils
operator <<	utils/QTree.h	/^std::ostream& operator<<(std::ostream& os, $/;"	f	namespace:TQMesh::TQUtils
operator <<	utils/Vec2.h	/^inline std::ostream& operator<<(std::ostream &out, $/;"	f	namespace:TQMesh::TQUtils
operator =	app/exprtk.h	/^         T0oT1<T,T0,T1>& operator=(T0oT1<T,T0,T1>&) { return (*this); }$/;"	f	class:exprtk::details::exprtk_final
operator =	app/exprtk.h	/^         literal_node<T>& operator=(literal_node<T>&) { return (*this); }$/;"	f	class:exprtk::details::exprtk_final
operator =	app/exprtk.h	/^         node_type& operator=(node_type&) { return (*this); }$/;"	f	class:exprtk::details::exprtk_final
operator =	app/exprtk.h	/^         type& operator=(const type& vds)$/;"	f	class:exprtk::details::vec_data_store
operator =	app/exprtk.h	/^      inline expression<T>& operator=(const expression<T>& e)$/;"	f	class:exprtk::expression
operator =	app/exprtk.h	/^      inline symbol_table<T>& operator=(const symbol_table<T>& st)$/;"	f	class:exprtk::symbol_table
operator =	utils/Vec2.h	/^  Vec2<T>& operator=(Vec2<T>&& v) $/;"	f	class:TQMesh::TQUtils::Vec2
operator =	utils/Vec2.h	/^  Vec2<T>& operator=(const Vec2<T>& v) $/;"	f	class:TQMesh::TQUtils::Vec2
operator ==	algorithm/Edge.h	/^static bool operator==(const Edge& e1, const Edge& e2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator ==	algorithm/Quad.h	/^static bool operator==(const Quad& q1, const Quad& q2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator ==	algorithm/Triangle.h	/^static bool operator==(const Triangle& t1, const Triangle& t2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator ==	algorithm/Vertex.h	/^static bool operator==(const Vertex& v1, const Vertex& v2)$/;"	f	namespace:TQMesh::TQAlgorithm
operator ==	app/exprtk.h	/^      inline bool operator==(const expression<T>& e) const$/;"	f	class:exprtk::expression
operator ==	app/exprtk.h	/^      inline bool operator==(const symbol_table<T>& st) const$/;"	f	class:exprtk::symbol_table
operator ==	tests/container_test.cpp	/^static bool operator==(const Edge& e1, const Edge& e2)$/;"	f	namespace:ContainerTests
operator ==	tests/container_test.cpp	/^static bool operator==(const Vertex& v1, const Vertex& v2)$/;"	f	namespace:ContainerTests
operator ==	utils/Vec2.h	/^inline bool operator==(const Vec2<T>& a, const Vec2<T>& b)$/;"	f	namespace:TQMesh::TQUtils
operator T	app/exprtk.h	/^      inline operator T() const$/;"	f	class:exprtk::expression
operator []	algorithm/Domain.h	/^  Boundary& operator[](size_t i) const $/;"	f	class:TQMesh::TQAlgorithm::Domain
operator []	algorithm/EdgeList.h	/^  Edge& operator[](int i) { return edges_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
operator []	algorithm/EdgeList.h	/^  const Edge& operator[](int i) const { return edges_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
operator []	app/exprtk.h	/^            inline value_ptr operator[](const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
operator []	app/exprtk.h	/^         inline const type_store& operator[](const std::size_t& index) const$/;"	f	class:exprtk::type_store::parameter_list
operator []	app/exprtk.h	/^         inline const value_t& operator[](const std::size_t& i) const$/;"	f	struct:exprtk::type_store::type_view
operator []	app/exprtk.h	/^         inline token_t operator[](const std::size_t& index) const$/;"	f	class:exprtk::lexer::generator
operator []	app/exprtk.h	/^         inline token_t& operator[](const std::size_t& index)$/;"	f	class:exprtk::lexer::generator
operator []	app/exprtk.h	/^         inline type_store& operator[](const std::size_t& index)$/;"	f	class:exprtk::type_store::parameter_list
operator []	app/exprtk.h	/^         inline value_ptr operator[](const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder
operator []	app/exprtk.h	/^         inline value_t& operator[](const std::size_t& i)$/;"	f	struct:exprtk::type_store::type_view
operator []	app/exprtk.h	/^      inline T& operator[](const std::size_t index)$/;"	f	class:exprtk::vector_view
operator []	app/exprtk.h	/^      inline const T& operator[](const std::size_t index) const$/;"	f	class:exprtk::vector_view
operator []	app/exprtk.h	/^      inline const type_store_t& operator[](const std::size_t& index) const$/;"	f	class:exprtk::results_context
operator []	app/exprtk.h	/^      inline type_store_t& operator[](const std::size_t& index)$/;"	f	class:exprtk::results_context
operator []	utils/Container.h	/^  T& operator[](size_t i)$/;"	f	class:TQMesh::TQUtils::Container
operator []	utils/Container.h	/^  const T& operator[](size_t i) const$/;"	f	class:TQMesh::TQUtils::Container
operator []	utils/Vec2.h	/^  T operator[](int i) const $/;"	f	class:TQMesh::TQUtils::Vec2
operator []	utils/Vec2.h	/^  T& operator[](int i) $/;"	f	class:TQMesh::TQUtils::Vec2
operator bool	app/exprtk.h	/^      inline operator bool() const$/;"	f	class:exprtk::expression
operator std::string	app/exprtk.h	/^         inline operator std::string () const$/;"	f	class:exprtk::details::build_string
operator_joiner	app/exprtk.h	/^            explicit operator_joiner(const std::size_t& stride)$/;"	f	class:exprtk::lexer::helper::operator_joiner
operator_joiner	app/exprtk.h	/^         class operator_joiner : public token_joiner$/;"	c	namespace:exprtk::lexer::helper
operator_joiner_2_	app/exprtk.h	/^      lexer::helper::operator_joiner            operator_joiner_2_;$/;"	m	class:exprtk::parser
operator_joiner_3_	app/exprtk.h	/^      lexer::helper::operator_joiner            operator_joiner_3_;$/;"	m	class:exprtk::parser
operator_t	app/exprtk.h	/^      typedef details::operator_type operator_t;$/;"	t	class:exprtk::parser
operator_type	app/exprtk.h	/^      enum operator_type$/;"	g	namespace:exprtk::details
opr_base	app/exprtk.h	/^      struct opr_base$/;"	s	namespace:exprtk::details
options_	app/exprtk.h	/^         std::size_t options_;$/;"	m	class:exprtk::parser::dependent_entity_collector
or_impl	app/exprtk.h	/^            inline T or_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
or_impl	app/exprtk.h	/^            inline T or_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
or_op	app/exprtk.h	/^      struct or_op : public opr_base<T>$/;"	s	namespace:exprtk::details
or_opr	app/exprtk.h	/^         inline T or_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
orient	algorithm/EdgeList.h	/^  TQGeom::Orientation orient() const { return orient_; }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
orient_	algorithm/EdgeList.h	/^  TQGeom::Orientation orient_;$/;"	m	class:TQMesh::TQAlgorithm::EdgeList
orientation	utils/geometry.h	/^static inline Orientation orientation(const Vec2<T>& p,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
original_value_	app/exprtk.h	/^         bool original_value_;$/;"	m	struct:exprtk::parser::scoped_bool_or_restorer
overload_function_store	app/exprtk.h	/^            type_store<generic_function_t, generic_function_t> overload_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
p	app/exprtk.h	/^      print  <T> p;$/;"	m	struct:exprtk::rtl::io::package
p1	algorithm/QuadLayer.h	/^  const std::vector<Vertex*>& p1() const { return p1_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p1	algorithm/QuadLayer.h	/^  std::vector<Vertex*>& p1() { return p1_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p1_xy	algorithm/QuadLayer.h	/^  const std::vector<Vec2d>& p1_xy() const { return p1_xy_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p1_xy	algorithm/QuadLayer.h	/^  std::vector<Vec2d>& p1_xy() { return p1_xy_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p2	algorithm/QuadLayer.h	/^  const std::vector<Vertex*>& p2() const { return p2_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p2	algorithm/QuadLayer.h	/^  std::vector<Vertex*>& p2() { return p2_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p2_xy	algorithm/QuadLayer.h	/^  const std::vector<Vec2d>& p2_xy() const { return p2_xy_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p2_xy	algorithm/QuadLayer.h	/^  std::vector<Vec2d>& p2_xy() { return p2_xy_; }$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
p_	app/exprtk.h	/^         ptr_t* p_;$/;"	m	struct:exprtk::parser::scoped_delete
package	app/exprtk.h	/^   struct package$/;"	s	namespace:exprtk::rtl::io
package	app/exprtk.h	/^   struct package$/;"	s	namespace:exprtk::rtl::io::file
package	app/exprtk.h	/^   struct package$/;"	s	namespace:exprtk::rtl::vecops
pair	app/exprtk.h	/^      inline void construct_branch_pair(std::pair<expression_node<T>*,bool> (&branch)[N],$/;"	m	namespace:exprtk::details
pair	app/exprtk.h	/^      inline void init_branches(std::pair<expression_node<T>*,bool> (&branch)[N],$/;"	m	namespace:exprtk::details
para_extr_bdry	app/unused.c	/^  auto para_extr_bdry = reader.new_int_list_parameter($/;"	v
para_fixed_vertices	app/unused.c	/^  auto para_fixed_vertices = reader.new_double_list_parameter($/;"	v
para_intr_bdry	app/unused.c	/^  auto para_intr_bdry = reader.new_int_list_parameter($/;"	v
para_intr_circ_bdry	app/unused.c	/^  auto para_intr_circ_bdry = reader.new_double_list_parameter($/;"	v
para_intr_rect_bdry	app/unused.c	/^  auto para_intr_rect_bdry = reader.new_double_list_parameter($/;"	v
para_meshing_algorithm	app/unused.c	/^  auto para_meshing_algorithm = reader.new_string_parameter($/;"	v
para_quad_layers	app/unused.c	/^  auto para_quad_layers = reader.new_double_list_parameter($/;"	v
para_quad_refinements	app/unused.c	/^  auto para_quad_refinements = reader.new_int_parameter($/;"	v
para_size_fun	app/unused.c	/^  auto para_size_fun = reader.new_string_parameter($/;"	v
para_vertices	app/unused.c	/^  auto para_vertices = reader.new_double_list_parameter($/;"	v
param_count	app/exprtk.h	/^      std::size_t param_count;$/;"	m	class:exprtk::ifunction
param_list_	utils/ParaReader.h	/^  ParameterList   param_list_; $/;"	m	class:CppUtils::ParaReader
param_map_	utils/ParaReader.h	/^  ParameterMap    param_map_;$/;"	m	class:CppUtils::ParaReader
param_seq_index_	app/exprtk.h	/^         const std::size_t param_seq_index_;$/;"	m	class:exprtk::details::exprtk_final
param_seq_index_	app/exprtk.h	/^         std::size_t param_seq_index_;$/;"	m	class:exprtk::details::multimode_genfunction_node
param_stack	app/exprtk.h	/^         std::deque<var_t> param_stack;$/;"	m	struct:exprtk::function_compositor::base_func
param_to_str	app/exprtk.h	/^      struct param_to_str { static std::string result() { static const std::string r("v"); return r; } };$/;"	s	namespace:exprtk::details
param_to_str	app/exprtk.h	/^      struct param_to_str<0> { static std::string result() { static const std::string r("c"); return r; } };$/;"	s	namespace:exprtk::details
parameter_count_	app/exprtk.h	/^         std::size_t parameter_count_;$/;"	m	class:exprtk::details::exprtk_final
parameter_list	app/exprtk.h	/^         explicit parameter_list(std::vector<type_store>& pl)$/;"	f	class:exprtk::type_store::parameter_list
parameter_list	app/exprtk.h	/^      class parameter_list$/;"	c	struct:exprtk::type_store
parameter_list_	app/exprtk.h	/^         std::vector<type_store>& parameter_list_;$/;"	m	class:exprtk::type_store::parameter_list
parameter_list_	app/exprtk.h	/^      ts_list_t parameter_list_;$/;"	m	class:exprtk::results_context
parameter_list_t	app/exprtk.h	/^         typedef typename generic_type::parameter_list parameter_list_t;$/;"	t	class:exprtk::details::null_igenfunc
parameter_list_t	app/exprtk.h	/^         typedef typename igeneric_function<T>::parameter_list_t parameter_list_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
parameter_list_t	app/exprtk.h	/^         typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
parameter_list_t	app/exprtk.h	/^      typedef typename generic_type::parameter_list parameter_list_t;$/;"	t	class:exprtk::igeneric_function
parameter_list_t	app/exprtk.h	/^      typedef typename igeneric_function<T>::parameter_list_t parameter_list_t;$/;"	t	struct:exprtk::rtl::io::print
parameter_list_t	app/exprtk.h	/^      typedef typename igeneric_function<T>::parameter_list_t parameter_list_t;$/;"	t	struct:exprtk::rtl::io::println
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::getline
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::open
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::read
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::io::file::write
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::all_false
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::all_true
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::any_false
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::any_true
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpby
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpy
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::copy
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::count
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::dot
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::dotk
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::iota
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::rol
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::ror
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::sort
parameter_list_t	app/exprtk.h	/^      typedef typename igfun_t::parameter_list_t    parameter_list_t;$/;"	t	class:exprtk::rtl::vecops::sumk
parameter_list_t	app/exprtk.h	/^      typedef typename type_store_t::parameter_list parameter_list_t;$/;"	t	class:exprtk::results_context
parameter_sequence	app/exprtk.h	/^      std::string parameter_sequence;$/;"	m	class:exprtk::igeneric_function
parent_t	app/exprtk.h	/^         typedef for_loop_bc_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	app/exprtk.h	/^         typedef for_loop_node<T>    parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	app/exprtk.h	/^         typedef for_loop_node<T>    parent_t;$/;"	t	class:exprtk::details::for_loop_bc_node
parent_t	app/exprtk.h	/^         typedef repeat_until_loop_bc_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	app/exprtk.h	/^         typedef repeat_until_loop_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	app/exprtk.h	/^         typedef repeat_until_loop_node<T> parent_t;$/;"	t	class:exprtk::details::repeat_until_loop_bc_node
parent_t	app/exprtk.h	/^         typedef while_loop_bc_node<T> parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	app/exprtk.h	/^         typedef while_loop_node<T>  parent_t;$/;"	t	class:exprtk::details::exprtk_final
parent_t	app/exprtk.h	/^         typedef while_loop_node<T>  parent_t;$/;"	t	class:exprtk::details::while_loop_bc_node
parse_branch	app/exprtk.h	/^      inline expression_node_ptr parse_branch(precedence_level precedence = e_level00)$/;"	f	class:exprtk::parser
parse_break_statement	app/exprtk.h	/^      inline expression_node_ptr parse_break_statement()$/;"	f	class:exprtk::parser
parse_continue_statement	app/exprtk.h	/^      inline expression_node_ptr parse_continue_statement()$/;"	f	class:exprtk::parser
parse_corpus	app/exprtk.h	/^      inline expression_node_ptr parse_corpus()$/;"	f	class:exprtk::parser
parse_define_string_statement	app/exprtk.h	/^      inline expression_node_ptr parse_define_string_statement(const std::string& str_name, expression_node_ptr initialisation_expression)$/;"	f	class:exprtk::parser
parse_define_string_statement	app/exprtk.h	/^      inline expression_node_ptr parse_define_string_statement(const std::string&, expression_node_ptr)$/;"	f	class:exprtk::parser
parse_define_var_statement	app/exprtk.h	/^      inline expression_node_ptr parse_define_var_statement()$/;"	f	class:exprtk::parser
parse_define_vector_statement	app/exprtk.h	/^      inline expression_node_ptr parse_define_vector_statement(const std::string& vec_name)$/;"	f	class:exprtk::parser
parse_digit_1	app/exprtk.h	1869;"	d
parse_digit_1	app/exprtk.h	1929;"	d
parse_digit_2	app/exprtk.h	1876;"	d
parse_digit_2	app/exprtk.h	1930;"	d
parse_expression	app/exprtk.h	/^      inline expression_node_ptr parse_expression(precedence_level precedence = e_level00)$/;"	f	class:exprtk::parser
parse_function_call	app/exprtk.h	/^      inline expression_node_ptr parse_function_call(ifunction<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_function_call_0	app/exprtk.h	/^      inline expression_node_ptr parse_function_call_0(ifunction<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_function_invocation	app/exprtk.h	/^      inline expression_node_ptr parse_function_invocation(ifunction<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_generic_function_call	app/exprtk.h	/^      inline expression_node_ptr parse_generic_function_call(igeneric_function<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_hex	app/exprtk.h	/^      inline bool parse_hex(Iterator& itr, Iterator end,$/;"	f	namespace:exprtk::details
parse_igeneric_function_params	app/exprtk.h	/^      inline bool parse_igeneric_function_params(std::string& param_type_list,$/;"	f	class:exprtk::parser
parse_inf	app/exprtk.h	/^      static inline bool parse_inf(Iterator& itr, const Iterator end, T& t, bool negative)$/;"	f	namespace:exprtk::details
parse_nan	app/exprtk.h	/^      static inline bool parse_nan(Iterator& itr, const Iterator end, T& t)$/;"	f	namespace:exprtk::details
parse_null_statement	app/exprtk.h	/^      inline expression_node_ptr parse_null_statement()$/;"	f	class:exprtk::parser
parse_overload_function_call	app/exprtk.h	/^      inline expression_node_ptr parse_overload_function_call(igeneric_function<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_return_statement	app/exprtk.h	/^      inline expression_node_ptr parse_return_statement()$/;"	f	class:exprtk::parser
parse_special_function	app/exprtk.h	/^      inline expression_node_ptr parse_special_function()$/;"	f	class:exprtk::parser
parse_special_function_impl	app/exprtk.h	/^      struct parse_special_function_impl$/;"	s	class:exprtk::parser
parse_string_function_call	app/exprtk.h	/^      inline expression_node_ptr parse_string_function_call(igeneric_function<T>* function, const std::string& function_name)$/;"	f	class:exprtk::parser
parse_swap_statement	app/exprtk.h	/^      inline expression_node_ptr parse_swap_statement()$/;"	f	class:exprtk::parser
parse_symbol	app/exprtk.h	/^      inline expression_node_ptr parse_symbol()$/;"	f	class:exprtk::parser
parse_symtab_symbol	app/exprtk.h	/^      inline expression_node_ptr parse_symtab_symbol()$/;"	f	class:exprtk::parser
parse_uninitialised_var_statement	app/exprtk.h	/^      inline expression_node_ptr parse_uninitialised_var_statement(const std::string& var_name)$/;"	f	class:exprtk::parser
parser	app/exprtk.h	/^      parser(const settings_t& settings = settings_t())$/;"	f	class:exprtk::parser
parser	app/exprtk.h	/^   class parser : public lexer::parser_helper$/;"	c	namespace:exprtk
parser	app/size_function.cpp	/^static exprtk::parser<double>       parser;$/;"	v	file:
parser_	app/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_delete
parser_	app/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_deq_delete
parser_	app/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_expression_delete
parser_	app/exprtk.h	/^         parser<T>& parser_;$/;"	m	struct:exprtk::parser::scoped_vec_delete
parser_	app/exprtk.h	/^         parser_t& parser_;$/;"	m	class:exprtk::parser::scope_element_manager
parser_	app/exprtk.h	/^         parser_t& parser_;$/;"	m	class:exprtk::parser::scope_handler
parser_	app/exprtk.h	/^         parser_t& parser_;$/;"	m	class:exprtk::parser::stack_limit_handler
parser_	app/exprtk.h	/^         parser_t*                parser_;$/;"	m	class:exprtk::parser::expression_generator
parser_	app/exprtk.h	/^      parser_t parser_;$/;"	m	class:exprtk::function_compositor
parser_error	app/exprtk.h	/^   namespace parser_error$/;"	n	namespace:exprtk
parser_helper	app/exprtk.h	/^      class parser_helper$/;"	c	namespace:exprtk::lexer
parser_state	app/exprtk.h	/^         parser_state()$/;"	f	struct:exprtk::parser::parser_state
parser_state	app/exprtk.h	/^      struct parser_state$/;"	s	class:exprtk::parser
parser_t	app/exprtk.h	/^            typedef exprtk::parser<T> parser_t;$/;"	t	struct:exprtk::details::collector_helper::resolve_as_vector
parser_t	app/exprtk.h	/^         typedef exprtk::parser<T>       parser_t;$/;"	t	struct:exprtk::details::collector_helper
parser_t	app/exprtk.h	/^         typedef parser<T>          parser_t;$/;"	t	class:exprtk::parser::scope_element_manager
parser_t	app/exprtk.h	/^         typedef parser<T> parser_t;$/;"	t	class:exprtk::parser::scope_handler
parser_t	app/exprtk.h	/^         typedef parser<T> parser_t;$/;"	t	class:exprtk::parser::stack_limit_handler
parser_t	app/exprtk.h	/^         typedef typename exprtk::parser<Type> parser_t;$/;"	t	class:exprtk::parser::expression_generator
parser_t	app/exprtk.h	/^      typedef exprtk::parser<T>                 parser_t;$/;"	t	class:exprtk::function_compositor
parser_t	app/exprtk.h	/^      typedef parser<T>               parser_t;$/;"	t	struct:exprtk::type_defs
parsing_break_stmt	app/exprtk.h	/^         bool parsing_break_stmt;$/;"	m	struct:exprtk::parser::parser_state
parsing_loop_stmt_count	app/exprtk.h	/^         std::size_t parsing_loop_stmt_count;$/;"	m	struct:exprtk::parser::parser_state
parsing_return_stmt	app/exprtk.h	/^         bool parsing_return_stmt;$/;"	m	struct:exprtk::parser::parser_state
pass_children	utils/QTree.h	/^  bool pass_children(T* item)$/;"	f	class:TQMesh::TQUtils::QTree
pave	algorithm/Mesh.h	/^  bool pave()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
peek_next_token	app/exprtk.h	/^         inline token_t& peek_next_token()$/;"	f	class:exprtk::lexer::generator
peek_token_is	app/exprtk.h	/^         inline bool peek_token_is(const std::string& s)$/;"	f	class:exprtk::lexer::parser_helper
peek_token_is	app/exprtk.h	/^         inline bool peek_token_is(const token_t::token_type& ttype)$/;"	f	class:exprtk::lexer::parser_helper
perform_check	app/exprtk.h	/^      void perform_check()$/;"	f	namespace:exprtk::rtl::io::file::details
pgo_primer	app/exprtk.h	/^   inline bool pgo_primer()$/;"	f	namespace:exprtk
pi	app/exprtk.h	/^            static const double pi      =  3.14159265358979323846264338327950288419716939937510;$/;"	m	namespace:exprtk::details::numeric::constant
pi_180	app/exprtk.h	/^            static const double pi_180  =  0.01745329251994329576923690768488612713442871888542;$/;"	m	namespace:exprtk::details::numeric::constant
pi_2	app/exprtk.h	/^            static const double pi_2    =  1.57079632679489661923132169163975144209858469968755;$/;"	m	namespace:exprtk::details::numeric::constant
pi_4	app/exprtk.h	/^            static const double pi_4    =  0.78539816339744830961566084581987572104929234984378;$/;"	m	namespace:exprtk::details::numeric::constant
pl	app/exprtk.h	/^      println<T> pl;$/;"	m	struct:exprtk::rtl::io::package
place_end_vertex	algorithm/QuadLayer.h	/^  void place_end_vertex(Vertices& verts, $/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
place_start_vertex	algorithm/QuadLayer.h	/^  void place_start_vertex(Vertices& verts, $/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
pointer	app/exprtk.h	/^            void*       pointer;$/;"	m	struct:exprtk::expression::control_block::data_pack
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,10>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,11>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,12>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,1>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,2>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,3>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,4>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,5>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,6>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,7>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,8>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl <Type,9>$/;"	s	class:exprtk::polynomial
poly_impl	app/exprtk.h	/^      struct poly_impl { };$/;"	s	class:exprtk::polynomial
poly_rtrn	app/exprtk.h	37684;"	d
poly_rtrn	app/exprtk.h	37760;"	d
polynomial	app/exprtk.h	/^      polynomial()$/;"	f	class:exprtk::polynomial
polynomial	app/exprtk.h	/^   class polynomial : public ifunction<T>$/;"	c	namespace:exprtk
populate_value_list	app/exprtk.h	/^         inline virtual bool populate_value_list() const$/;"	f	class:exprtk::details::generic_function_node
populate_value_list	app/exprtk.h	/^         inline void populate_value_list() const$/;"	f	class:exprtk::details::exprtk_final
pos	algorithm/Edge.h	/^  const ContainerIterator& pos() const { return pos_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
pos	algorithm/Quad.h	/^  const ContainerIterator& pos() const { return pos_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
pos	algorithm/Triangle.h	/^  const ContainerIterator& pos() const { return pos_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
pos	algorithm/Vertex.h	/^  const ContainerIterator& pos() const { return pos_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
pos	tests/container_test.cpp	/^  const Iterator& pos() const { return pos_; }$/;"	f	class:ContainerTests::Edge
pos	tests/container_test.cpp	/^  const Iterator& pos() const { return pos_; }$/;"	f	class:ContainerTests::Vertex
pos_	algorithm/Edge.h	/^  ContainerIterator   pos_;$/;"	m	class:TQMesh::TQAlgorithm::Edge
pos_	algorithm/Quad.h	/^  ContainerIterator    pos_;$/;"	m	class:TQMesh::TQAlgorithm::Quad
pos_	algorithm/Triangle.h	/^  ContainerIterator    pos_;$/;"	m	class:TQMesh::TQAlgorithm::Triangle
pos_	algorithm/Vertex.h	/^  ContainerIterator   pos_;$/;"	m	class:TQMesh::TQAlgorithm::Vertex
pos_impl	app/exprtk.h	/^            template <typename T> inline T   pos_impl(const T v, int_type_tag) { return +v;            }$/;"	f	namespace:exprtk::details::numeric::details
pos_impl	app/exprtk.h	/^            template <typename T> inline T   pos_impl(const T v, real_type_tag) { return +v;            }$/;"	f	namespace:exprtk::details::numeric::details
position	app/exprtk.h	/^         std::size_t position;$/;"	m	struct:exprtk::lexer::token
post	app/exprtk.h	/^         inline void post()$/;"	f	struct:exprtk::function_compositor::base_func
post_bracket_process	app/exprtk.h	/^      inline bool post_bracket_process(const typename token_t::token_type& token, expression_node_ptr& branch)$/;"	f	class:exprtk::parser
post_variable_process	app/exprtk.h	/^      inline bool post_variable_process(const std::string& symbol)$/;"	f	class:exprtk::parser
pow	app/exprtk.h	/^         inline T pow(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
pow10	app/exprtk.h	/^      static const double pow10[] = {$/;"	m	namespace:exprtk::details
pow10_size	app/exprtk.h	/^      static const std::size_t pow10_size = sizeof(pow10) \/ sizeof(double);$/;"	m	namespace:exprtk::details
pow_impl	app/exprtk.h	/^            inline T pow_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
pow_impl	app/exprtk.h	/^            inline T pow_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
pow_op	app/exprtk.h	/^      struct pow_op : public opr_base<T>$/;"	s	namespace:exprtk::details
pre	app/exprtk.h	/^         inline void pre()$/;"	f	struct:exprtk::function_compositor::base_func
precedence_level	app/exprtk.h	/^      enum precedence_level$/;"	g	class:exprtk::parser
prepare_quad_layer_front	algorithm/Mesh.h	/^  void prepare_quad_layer_front(Edge*& e_start, Edge*& e_end, $/;"	f	class:TQMesh::TQAlgorithm::Mesh
print	app/exprtk.h	/^         static inline void print(const std::string& scalar_format, const scalar_t& s)$/;"	f	struct:exprtk::rtl::io::details::print_impl
print	app/exprtk.h	/^         static inline void print(const std::string& scalar_format, const vector_t& v)$/;"	f	struct:exprtk::rtl::io::details::print_impl
print	app/exprtk.h	/^         static inline void print(const string_t& s)$/;"	f	struct:exprtk::rtl::io::details::print_impl
print	app/exprtk.h	/^      print(const std::string& scalar_format = "%10.5f")$/;"	f	struct:exprtk::rtl::io::print
print	app/exprtk.h	/^   struct print : public exprtk::igeneric_function<T>$/;"	s	namespace:exprtk::rtl::io
print_header	app/main.cpp	/^static void print_header()$/;"	f	file:
print_impl	app/exprtk.h	/^      struct print_impl$/;"	s	namespace:exprtk::rtl::io::details
print_parameter	app/main.cpp	/^static void print_parameter(CppUtils::ParaReader& reader, $/;"	f	file:
print_type	app/exprtk.h	/^      inline void print_type(const std::string& fmt,$/;"	f	namespace:exprtk::rtl::io::details
println	app/exprtk.h	/^      println(const std::string& scalar_format = "%10.5f")$/;"	f	struct:exprtk::rtl::io::println
println	app/exprtk.h	/^   struct println : public exprtk::igeneric_function<T>$/;"	s	namespace:exprtk::rtl::io
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_1
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_2
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_3
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_4
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_5
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_6
process	app/exprtk.h	/^               static inline T process(const arg_list_t& arg)$/;"	f	struct:exprtk::parser::expression_generator::switch_nodes::switch_impl_7
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1, const T& t2, const bfunc_t bf0, const bfunc_t bf1)$/;"	f	struct:exprtk::details::T0oT1oT2process::mode0
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1, const T& t2, const bfunc_t bf0, const bfunc_t bf1)$/;"	f	struct:exprtk::details::T0oT1oT2process::mode1
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode0
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode1
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode2
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode3
process	app/exprtk.h	/^            static inline T process(const T& t0, const T& t1,$/;"	f	struct:exprtk::details::T0oT1oT20T3process::mode4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_binary_ext_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_boc_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_bov_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cob_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_coboc_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocob_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cov_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf3ext_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_sf4ext_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vob_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_voc_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vov_expression
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>& expr_gen,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_cocov_expression0
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococ_expression1
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression2
process	app/exprtk.h	/^            static inline expression_node_ptr process(expression_generator<Type>&,$/;"	f	struct:exprtk::parser::expression_generator::synthesize_vococov_expression4
process	app/exprtk.h	/^            static inline void process(std::pair<bool,DeleteType*>&)$/;"	f	struct:exprtk::symbol_table::type_store::deleter
process	app/exprtk.h	/^            virtual bool process(const std::string& unknown_symbol,$/;"	f	struct:exprtk::details::collector_helper::resolve_as_vector
process	app/exprtk.h	/^         inline T process(const operator_type operation, const T arg)$/;"	f	namespace:exprtk::details::numeric
process	app/exprtk.h	/^         inline T process(const operator_type operation, const T arg0, const T arg1)$/;"	f	namespace:exprtk::details::numeric
process	app/exprtk.h	/^         inline bool process(const std::string& str)$/;"	f	class:exprtk::lexer::generator
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 < t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lt_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 <= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lte_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 > t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gt_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return ((t1 >= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gte_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) && details::is_true(t2)) ? T(0) : T(1); }$/;"	f	struct:exprtk::details::nand_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) && details::is_true(t2)) ? T(1) : T(0); }$/;"	f	struct:exprtk::details::and_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) || details::is_true(t2)) ? T(0) : T(1); }$/;"	f	struct:exprtk::details::nor_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (details::is_true(t1) || details::is_true(t2)) ? T(1) : T(0); }$/;"	f	struct:exprtk::details::or_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (std::equal_to<T>()(t1,t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::eq_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return (std::not_equal_to<T>()(t1,t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::ne_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::equal(t1,t2); }$/;"	f	struct:exprtk::details::equal_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::modulus<T>(t1,t2); }$/;"	f	struct:exprtk::details::mod_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::pow<T>(t1,t2); }$/;"	f	struct:exprtk::details::pow_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::xnor_opr<T>(t1,t2); }$/;"	f	struct:exprtk::details::xnor_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return numeric::xor_opr<T>(t1,t2); }$/;"	f	struct:exprtk::details::xor_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 * t2; }$/;"	f	struct:exprtk::details::mul_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 + t2; }$/;"	f	struct:exprtk::details::add_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 - t2; }$/;"	f	struct:exprtk::details::sub_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2) { return t1 \/ t2; }$/;"	f	struct:exprtk::details::div_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 * t2 * t3; }$/;"	f	struct:exprtk::details::mul_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 + t2 + t3; }$/;"	f	struct:exprtk::details::add_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 - t2 - t3; }$/;"	f	struct:exprtk::details::sub_op
process	app/exprtk.h	/^         static inline T process(Type t1, Type t2, Type t3) { return t1 \/ t2 \/ t3; }$/;"	f	struct:exprtk::details::div_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process	app/exprtk.h	/^         static inline T process(const Sequence<Type,Allocator>& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process	app/exprtk.h	/^         static inline T process(const T& t0, const T& t1, const T& t2) { return ((t0 <= t1) && (t1 <= t2)) ? T(1) : T(0); }$/;"	f	struct:exprtk::details::inrange_op
process	app/exprtk.h	/^         static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	struct:exprtk::details::ilike_op
process	app/exprtk.h	/^         static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	struct:exprtk::details::in_op
process	app/exprtk.h	/^         static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	struct:exprtk::details::like_op
process	app/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_add_op
process	app/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_avg_op
process	app/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_max_op
process	app/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_min_op
process	app/exprtk.h	/^         static inline T process(const ivector_ptr v)$/;"	f	struct:exprtk::details::vec_mul_op
process	app/exprtk.h	/^         static inline T process(const std::string& t0, const std::string& t1, const std::string& t2)$/;"	f	struct:exprtk::details::inrange_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((std::string::npos != t2.find(t1)) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::in_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 != t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::ne_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 < t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lt_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 <= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::lte_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 == t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::eq_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 == t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::equal_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 > t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gt_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return ((t1 >= t2) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::gte_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return (details::wc_imatch(t2,t1) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::ilike_op
process	app/exprtk.h	/^         static inline T process(const std::string& t1, const std::string& t2) { return (details::wc_match(t2,t1) ? T(1) : T(0)); }$/;"	f	struct:exprtk::details::like_op
process	app/exprtk.h	/^         static inline bool process(parameter_list_t& parameters,$/;"	f	struct:exprtk::rtl::vecops::helper::load_vector_range
process	app/exprtk.h	/^         static inline expression_node_ptr process(parser<Type>& p, const details::operator_type opt_type, const std::string& sf_name)$/;"	f	struct:exprtk::parser::parse_special_function_impl
process	app/exprtk.h	/^         static void process(const std::string& scalar_format, parameter_list_t parameters)$/;"	f	struct:exprtk::rtl::io::details::print_impl
process	app/exprtk.h	/^         virtual bool process(const std::string& \/* unknown_symbol *\/,$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
process	app/exprtk.h	/^         virtual bool process(const std::string& \/*unknown_symbol*\/,$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
process	app/exprtk.h	/^         virtual std::size_t process(generator&) { return 0;    }$/;"	f	class:exprtk::lexer::helper_interface
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_1	app/exprtk.h	/^         static inline T process_1(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_2	app/exprtk.h	/^         static inline T process_2(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_3	app/exprtk.h	/^         static inline T process_3(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_4	app/exprtk.h	/^         static inline T process_4(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_add_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_avg_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mand_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_max_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_min_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mor_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_mul_op
process_5	app/exprtk.h	/^         static inline T process_5(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_6	app/exprtk.h	/^         static inline T process_6(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_7	app/exprtk.h	/^         static inline T process_7(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_8	app/exprtk.h	/^         static inline T process_8(const Sequence& arg_list)$/;"	f	struct:exprtk::details::vararg_multi_op
process_impl	app/exprtk.h	/^            inline T process_impl(const operator_type operation, const T arg)$/;"	f	namespace:exprtk::details::numeric::details
process_impl	app/exprtk.h	/^            inline T process_impl(const operator_type operation, const T arg0, const T arg1)$/;"	f	namespace:exprtk::details::numeric::details
process_impl	app/exprtk.h	/^            inline T process_impl(const operator_type operation, const T arg0, const T arg1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
process_lexer_errors	app/exprtk.h	/^      void process_lexer_errors()$/;"	f	class:exprtk::parser
process_mode_t	app/exprtk.h	/^         typedef ProcessMode process_mode_t;$/;"	t	class:exprtk::details::exprtk_final
process_stride_2	app/exprtk.h	/^         inline std::size_t process_stride_2(generator& g)$/;"	f	class:exprtk::lexer::token_joiner
process_stride_3	app/exprtk.h	/^         inline std::size_t process_stride_3(generator& g)$/;"	f	class:exprtk::lexer::token_joiner
project_base_vertices	algorithm/QuadLayer.h	/^  void project_base_vertices(int i, int j)$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
prsrhlpr_t	app/exprtk.h	/^      typedef parser_helper prsrhlpr_t;$/;"	t	class:exprtk::parser
ptr_match	app/exprtk.h	/^         struct ptr_match$/;"	s	struct:exprtk::symbol_table::type_store
ptr_match	app/exprtk.h	/^         struct ptr_match<TType,TRawType,variable_node_t*>$/;"	s	struct:exprtk::symbol_table::type_store
ptr_t	app/exprtk.h	/^         typedef Type* ptr_t;$/;"	t	struct:exprtk::parser::scoped_delete
ptr_t	app/exprtk.h	/^         typedef Type* ptr_t;$/;"	t	struct:exprtk::parser::scoped_deq_delete
ptr_t	app/exprtk.h	/^         typedef Type* ptr_t;$/;"	t	struct:exprtk::parser::scoped_vec_delete
push_back	utils/Container.h	/^  T& push_back( Args&&... args )$/;"	f	class:TQMesh::TQUtils::Container
qfunc_t	app/exprtk.h	/^         typedef T (*qfunc_t)(Type t0, Type t1, Type t2, Type t3);$/;"	t	struct:exprtk::details::functor_t
qfunc_t	app/exprtk.h	/^         typedef typename functor_t::qfunc_t    qfunc_t;$/;"	t	class:exprtk::details::exprtk_final
qtree	utils/Container.h	/^  const QTree<T,double>& qtree() const { return qtree_; }$/;"	f	class:TQMesh::TQUtils::Container
qtree_	utils/Container.h	/^  QTree<T,double> qtree_;$/;"	m	class:TQMesh::TQUtils::Container
quad_layer_time	tests/mesh_test.cpp	/^  std::vector<double>   quad_layer_time;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
quad_quad_intersection	utils/geometry.h	/^static inline bool quad_quad_intersection(const Vec2<T>& p1,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
quads	algorithm/Mesh.h	/^  Quads& quads() { return quads_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
quads	algorithm/Mesh.h	/^  const Quads& quads() const { return quads_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
quads_	algorithm/Mesh.h	/^  Quads      quads_;$/;"	m	class:TQMesh::TQAlgorithm::Mesh
quality	algorithm/Triangle.h	/^  double quality(const double h) const $/;"	f	class:TQMesh::TQAlgorithm::Triangle
quaternary_functor_t	app/exprtk.h	/^         typedef typename functor_t::qfunc_t    quaternary_functor_t;$/;"	t	struct:exprtk::details::opr_base
quaternary_functor_t	app/exprtk.h	/^         typedef typename functor_t::qfunc_t quaternary_functor_t;$/;"	t	struct:exprtk::details::sf_base
quaternary_functor_t	app/exprtk.h	/^      typedef typename functor_t::qfunc_t    quaternary_functor_t;$/;"	t	class:exprtk::parser
quaternary_node	app/exprtk.h	/^         quaternary_node(const operator_type& opr,$/;"	f	class:exprtk::details::quaternary_node
quaternary_node	app/exprtk.h	/^      class quaternary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
quaternary_node_t	app/exprtk.h	/^      typedef details::quaternary_node<T>                 quaternary_node_t;$/;"	t	class:exprtk::parser
query	utils/ParaReader.h	/^  bool query(const string& name)$/;"	f	class:CppUtils::ParaReader
query	utils/oldParaReader.h	/^  bool query(ListParameter<T>& param)$/;"	f	class:ParaReader
query	utils/oldParaReader.h	/^  bool query(ScalarParameter<T>& param)$/;"	f	class:ParaReader
query_multiple_lines	utils/ParaReader.h	/^  bool query_multiple_lines(Parameter<T>& param)$/;"	f	class:CppUtils::ParaReader
query_multiple_lines	utils/oldParaReader.h	/^  bool query_multiple_lines(ListParameter<T>& param)$/;"	f	class:ParaReader
query_scalar	utils/ParaReader.h	/^  bool query_scalar(Parameter<T>& param)$/;"	f	class:CppUtils::ParaReader
query_single_line	utils/ParaReader.h	/^  bool query_single_line(Parameter<T>& param)$/;"	f	class:CppUtils::ParaReader
query_single_line	utils/oldParaReader.h	/^  bool query_single_line(ListParameter<T>& param)$/;"	f	class:ParaReader
r	app/exprtk.h	/^      read   <T> r;$/;"	m	struct:exprtk::rtl::io::file::package
r2d_impl	app/exprtk.h	/^            template <typename T> inline T   r2d_impl(const T v, real_type_tag) { return (v * T(numeric::constant::_180_pi)); }$/;"	f	namespace:exprtk::details::numeric::details
range	algorithm/Vertex.h	/^  double range() const { return range_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
range	app/exprtk.h	/^         inline range_t range() const$/;"	f	class:exprtk::details::exprtk_final
range	app/exprtk.h	/^         range_t range() const$/;"	f	class:exprtk::details::exprtk_final
range	app/exprtk.h	/^         range_t*      range;$/;"	m	struct:exprtk::details::range_data_type
range_	app/exprtk.h	/^         mutable range_t     range_;$/;"	m	class:exprtk::details::exprtk_final
range_	app/exprtk.h	/^         mutable range_t     range_;$/;"	m	class:exprtk::details::string_function_node
range_data_type	app/exprtk.h	/^         range_data_type()$/;"	f	struct:exprtk::details::range_data_type
range_data_type	app/exprtk.h	/^      struct range_data_type$/;"	s	namespace:exprtk::details
range_data_type_t	app/exprtk.h	/^         typedef range_data_type<T>  range_data_type_t;$/;"	t	class:exprtk::details::generic_function_node
range_data_type_t	app/exprtk.h	/^         typedef range_data_type<T> range_data_type_t;$/;"	t	class:exprtk::details::string_base_node
range_interface	app/exprtk.h	/^      class range_interface$/;"	c	namespace:exprtk::details
range_interface_t	app/exprtk.h	/^         typedef range_interface<T>  range_interface_t;$/;"	t	class:exprtk::details::generic_function_node
range_list_	app/exprtk.h	/^         mutable range_list_t      range_list_;$/;"	m	class:exprtk::details::generic_function_node
range_list_t	app/exprtk.h	/^         typedef std::vector<range_data_type_t> range_list_t;$/;"	t	class:exprtk::details::generic_function_node
range_pack	app/exprtk.h	/^         range_pack()$/;"	f	struct:exprtk::details::range_pack
range_pack	app/exprtk.h	/^      struct range_pack$/;"	s	namespace:exprtk::details
range_ptr	app/exprtk.h	/^         typedef range_t*              range_ptr;$/;"	t	class:exprtk::details::exprtk_final
range_ptr	app/exprtk.h	/^         typedef range_t*             range_ptr;$/;"	t	class:exprtk::details::exprtk_final
range_ref	app/exprtk.h	/^         const range_t& range_ref() const$/;"	f	class:exprtk::details::exprtk_final
range_ref	app/exprtk.h	/^         range_t& range_ref()$/;"	f	class:exprtk::details::exprtk_final
range_runtime_check	app/exprtk.h	/^         bool range_runtime_check(const std::size_t r0,$/;"	f	struct:exprtk::details::range_pack
range_t	app/exprtk.h	/^         typedef range_pack      <T>  range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	app/exprtk.h	/^         typedef range_pack<T> range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	app/exprtk.h	/^         typedef range_pack<T> range_t;$/;"	t	class:exprtk::details::range_interface
range_t	app/exprtk.h	/^         typedef range_pack<T> range_t;$/;"	t	struct:exprtk::details::range_data_type
range_t	app/exprtk.h	/^         typedef typename gen_function_t::range_t         range_t;$/;"	t	class:exprtk::details::multimode_genfunction_node
range_t	app/exprtk.h	/^         typedef typename range_interface<T>::range_t range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	app/exprtk.h	/^         typedef typename range_interface<T>::range_t range_t;$/;"	t	class:exprtk::details::generic_function_node
range_t	app/exprtk.h	/^         typedef typename range_interface<T>::range_t range_t;$/;"	t	class:exprtk::details::string_function_node
range_t	app/exprtk.h	/^         typedef typename str_function_t::range_t range_t;$/;"	t	class:exprtk::details::exprtk_final
range_t	app/exprtk.h	/^      typedef details::range_pack<T>                      range_t;$/;"	t	class:exprtk::parser
rbvec_node_ptr_	app/exprtk.h	/^         rebasevector_celem_node<T>* rbvec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
rbvec_node_ptr_	app/exprtk.h	/^         rebasevector_elem_node<T>* rbvec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
read	app/exprtk.h	/^         bool read(View& view, const std::size_t amount, const std::size_t offset = 0)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
read	app/exprtk.h	/^      read()$/;"	f	class:exprtk::rtl::io::file::read
read	app/exprtk.h	/^   class read : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
real_type_tag	app/exprtk.h	/^            struct real_type_tag    { real_type_tag   () {} };$/;"	f	struct:exprtk::details::numeric::details::real_type_tag
real_type_tag	app/exprtk.h	/^            struct real_type_tag    { real_type_tag   () {} };$/;"	s	namespace:exprtk::details::numeric::details
rebase	app/exprtk.h	/^         void rebase(std::string& s)$/;"	f	class:exprtk::details::exprtk_final
rebase	app/exprtk.h	/^      inline void rebase(data_ptr_t data)$/;"	f	class:exprtk::vector_view
rebase	app/exprtk.h	/^      void rebase(std::string& s)$/;"	f	class:exprtk::stringvar_base
rebaseable	app/exprtk.h	/^            virtual inline bool rebaseable() const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
rebaseable	app/exprtk.h	/^            virtual inline bool rebaseable() const$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
rebaseable	app/exprtk.h	/^         bool rebaseable() const$/;"	f	class:exprtk::details::vector_holder
rebasevector_celem_node	app/exprtk.h	/^         rebasevector_celem_node(const std::size_t index, vector_holder_ptr vec_holder)$/;"	f	class:exprtk::details::exprtk_final
rebasevector_celem_node_t	app/exprtk.h	/^      typedef details::rebasevector_celem_node<T>         rebasevector_celem_node_t;$/;"	t	class:exprtk::parser
rebasevector_elem_node	app/exprtk.h	/^         rebasevector_elem_node(expression_ptr index, vector_holder_ptr vec_holder)$/;"	f	class:exprtk::details::exprtk_final
rebasevector_elem_node_t	app/exprtk.h	/^      typedef details::rebasevector_elem_node<T>          rebasevector_elem_node_t;$/;"	t	class:exprtk::parser
rect_overlap	utils/geometry.h	/^inline bool rect_overlap(const Vec2<T>& a_lowleft, $/;"	f	namespace:TQMesh::TQUtils::TQGeom
ref	app/exprtk.h	/^         const std::string& ref() const$/;"	f	class:exprtk::details::exprtk_final
ref	app/exprtk.h	/^         inline data_t& ref()$/;"	f	class:exprtk::details::vec_data_store
ref	app/exprtk.h	/^         inline virtual const std::string& ref() const$/;"	f	class:exprtk::details::exprtk_final
ref	app/exprtk.h	/^         inline virtual std::string& ref()$/;"	f	class:exprtk::details::exprtk_final
ref	app/exprtk.h	/^         std::string& ref()$/;"	f	class:exprtk::details::exprtk_final
ref_count	app/exprtk.h	/^            std::size_t ref_count;$/;"	m	struct:exprtk::details::vec_data_store::control_block
ref_count	app/exprtk.h	/^         std::size_t  ref_count;$/;"	m	struct:exprtk::parser::scope_element
ref_count	app/exprtk.h	/^         std::size_t ref_count;$/;"	m	struct:exprtk::expression::control_block
ref_count	app/exprtk.h	/^         std::size_t ref_count;$/;"	m	struct:exprtk::symbol_table::control_block
refine	algorithm/Front.h	/^  int refine(const Domain& domain, Vertices& vertices)$/;"	f	class:TQMesh::TQAlgorithm::Front
refine_to_quads	algorithm/Mesh.h	/^  bool refine_to_quads()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
register_binary_op	app/exprtk.h	36829;"	d
register_binary_op	app/exprtk.h	36850;"	d
register_binary_op	app/exprtk.h	36857;"	d
register_binary_op	app/exprtk.h	36878;"	d
register_inserter	app/exprtk.h	/^            inline bool register_inserter(lexer::token_inserter* inserter)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_joiner	app/exprtk.h	/^            inline bool register_joiner(lexer::token_joiner* joiner)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_local_data	app/exprtk.h	/^      inline void register_local_data(void* data, const std::size_t& size = 0, const std::size_t data_mode = 0)$/;"	f	class:exprtk::expression
register_local_var	app/exprtk.h	/^      inline void register_local_var(expression_ptr expr)$/;"	f	class:exprtk::expression
register_local_var	app/exprtk.h	/^      inline void register_local_var(vector_holder_ptr vec_holder)$/;"	f	class:exprtk::expression
register_local_vars	app/exprtk.h	/^      inline void register_local_vars(expression<T>& e)$/;"	f	class:exprtk::parser
register_loop_runtime_check	app/exprtk.h	/^      inline void register_loop_runtime_check(loop_runtime_check& lrtchk)$/;"	f	class:exprtk::parser
register_modifier	app/exprtk.h	/^            inline bool register_modifier(lexer::token_modifier* modifier)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_op	app/exprtk.h	16940;"	d
register_op	app/exprtk.h	16995;"	d
register_package	app/exprtk.h	/^      bool register_package(exprtk::symbol_table<T>& symtab)$/;"	f	struct:exprtk::rtl::io::file::package
register_package	app/exprtk.h	/^      bool register_package(exprtk::symbol_table<T>& symtab)$/;"	f	struct:exprtk::rtl::io::package
register_package	app/exprtk.h	/^      bool register_package(exprtk::symbol_table<T>& symtab)$/;"	f	struct:exprtk::rtl::vecops::package
register_return_results	app/exprtk.h	/^      inline void register_return_results(expression<T>& e)$/;"	f	class:exprtk::parser
register_return_results	app/exprtk.h	/^      inline void register_return_results(results_context_t* rc)$/;"	f	class:exprtk::expression
register_scanner	app/exprtk.h	/^            inline bool register_scanner(lexer::token_scanner* scanner)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
register_sf3	app/exprtk.h	36885;"	d
register_sf3	app/exprtk.h	36896;"	d
register_sf3_extid	app/exprtk.h	36898;"	d
register_sf3_extid	app/exprtk.h	36902;"	d
register_sf4	app/exprtk.h	36909;"	d
register_sf4	app/exprtk.h	36921;"	d
register_sf4ext	app/exprtk.h	36923;"	d
register_sf4ext	app/exprtk.h	36942;"	d
register_symbol_table	app/exprtk.h	/^      inline void register_symbol_table(symbol_table<T>& st)$/;"	f	class:exprtk::expression
register_synthezier	app/exprtk.h	27365;"	d
register_unary_op	app/exprtk.h	36780;"	d
register_unary_op	app/exprtk.h	36822;"	d
release	app/exprtk.h	/^         inline void release()$/;"	f	class:exprtk::details::exprtk_final
release	app/exprtk.h	/^         inline void release()$/;"	f	class:exprtk::details::unary_node
release	app/exprtk.h	/^      inline expression<T>& release()$/;"	f	class:exprtk::expression
remainder	app/exprtk.h	/^            int remainder;$/;"	m	struct:exprtk::details::loop_unroll::details
remaining	app/exprtk.h	/^         inline std::string remaining() const$/;"	f	class:exprtk::lexer::generator
remove	algorithm/EdgeList.h	/^  bool remove(Edge& edge) { return edges_.remove( edge ); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
remove	app/exprtk.h	/^            bool remove(const std::string& target_symbol)$/;"	f	class:exprtk::lexer::helper::symbol_replacer
remove	app/exprtk.h	/^         inline bool remove(const std::string& symbol_name, const bool delete_node = true)$/;"	f	struct:exprtk::symbol_table::type_store
remove	app/exprtk.h	/^      inline void remove(const std::string& name, const std::size_t& arg_count)$/;"	f	class:exprtk::function_compositor
remove	utils/Container.h	/^  bool remove(T& item) $/;"	f	class:TQMesh::TQUtils::Container
remove	utils/QTree.h	/^  bool remove(T* item)$/;"	f	class:TQMesh::TQUtils::QTree
remove_boundary	algorithm/Domain.h	/^  void remove_boundary(size_t pos) $/;"	f	class:TQMesh::TQAlgorithm::Domain
remove_edge	algorithm/Vertex.h	/^  void remove_edge(Edge& e) { edges_.remove(&e); }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
remove_edge	tests/container_test.cpp	/^  void remove_edge(Edge* e) { edges_.remove(e); }$/;"	f	class:ContainerTests::Vertex
remove_facet	algorithm/Vertex.h	/^  void remove_facet(Facet& t) { facets_.remove(&t); }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
remove_fixed_vertex	algorithm/Domain.h	/^  void remove_fixed_vertex(Vertex& v) $/;"	f	class:TQMesh::TQAlgorithm::Domain
remove_function	app/exprtk.h	/^      inline bool remove_function(const std::string& function_name)$/;"	f	class:exprtk::symbol_table
remove_last_error	app/exprtk.h	/^      inline void remove_last_error()$/;"	f	class:exprtk::parser
remove_replace_symbol	app/exprtk.h	/^      inline bool remove_replace_symbol(const std::string& symbol)$/;"	f	class:exprtk::parser
remove_stringvar	app/exprtk.h	/^      inline bool remove_stringvar(const std::string& string_name)$/;"	f	class:exprtk::symbol_table
remove_vararg_function	app/exprtk.h	/^      inline bool remove_vararg_function(const std::string& vararg_function_name)$/;"	f	class:exprtk::symbol_table
remove_variable	app/exprtk.h	/^      inline bool remove_variable(const std::string& variable_name, const bool delete_node = true)$/;"	f	class:exprtk::symbol_table
remove_vector	app/exprtk.h	/^      inline bool remove_vector(const std::string& vector_name)$/;"	f	class:exprtk::symbol_table
remove_vertex	algorithm/Domain.h	/^  void remove_vertex(Vertex& v) $/;"	f	class:TQMesh::TQAlgorithm::Domain
repeat_until_loop	app/exprtk.h	/^         inline expression_node_ptr repeat_until_loop(expression_node_ptr& condition,$/;"	f	class:exprtk::parser::expression_generator
repeat_until_loop_bc_node	app/exprtk.h	/^         repeat_until_loop_bc_node(expression_ptr condition,$/;"	f	class:exprtk::details::repeat_until_loop_bc_node
repeat_until_loop_bc_node	app/exprtk.h	/^      class repeat_until_loop_bc_node : public repeat_until_loop_node<T>$/;"	c	namespace:exprtk::details
repeat_until_loop_bc_node_t	app/exprtk.h	/^      typedef details::repeat_until_loop_bc_node<T>       repeat_until_loop_bc_node_t;$/;"	t	class:exprtk::parser
repeat_until_loop_bc_rtc_node	app/exprtk.h	/^         repeat_until_loop_bc_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
repeat_until_loop_bc_rtc_node_t	app/exprtk.h	/^      typedef details::repeat_until_loop_bc_rtc_node<T>   repeat_until_loop_bc_rtc_node_t;$/;"	t	class:exprtk::parser
repeat_until_loop_node	app/exprtk.h	/^         repeat_until_loop_node(expression_ptr condition,$/;"	f	class:exprtk::details::repeat_until_loop_node
repeat_until_loop_node	app/exprtk.h	/^      class repeat_until_loop_node : public expression_node<T>$/;"	c	namespace:exprtk::details
repeat_until_loop_node_t	app/exprtk.h	/^      typedef details::repeat_until_loop_node<T>          repeat_until_loop_node_t;$/;"	t	class:exprtk::parser
repeat_until_loop_rtc_node	app/exprtk.h	/^         repeat_until_loop_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
repeat_until_loop_rtc_node_t	app/exprtk.h	/^      typedef details::repeat_until_loop_rtc_node<T>      repeat_until_loop_rtc_node_t;$/;"	t	class:exprtk::parser
replace_map_	app/exprtk.h	/^            replace_map_t replace_map_;$/;"	m	class:exprtk::lexer::helper::symbol_replacer
replace_map_t	app/exprtk.h	/^            typedef std::map<std::string,std::pair<std::string,token::token_type>,details::ilesscompare> replace_map_t;$/;"	t	class:exprtk::lexer::helper::symbol_replacer
replace_symbol	app/exprtk.h	/^      inline bool replace_symbol(const std::string& old_symbol, const std::string& new_symbol)$/;"	f	class:exprtk::parser
replacer_enabled	app/exprtk.h	/^         bool replacer_enabled           () const { return enable_replacer_;           }$/;"	f	class:exprtk::parser::settings_store
reserved_symbol_table_	app/exprtk.h	/^            std::set<std::string>      reserved_symbol_table_;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
reserved_symbols	app/exprtk.h	/^      static const std::string reserved_symbols[] =$/;"	m	namespace:exprtk::details
reserved_symbols_size	app/exprtk.h	/^      static const std::size_t reserved_symbols_size = sizeof(reserved_symbols) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
reserved_words	app/exprtk.h	/^      static const std::string reserved_words[] =$/;"	m	namespace:exprtk::details
reserved_words_size	app/exprtk.h	/^      static const std::size_t reserved_words_size = sizeof(reserved_words) \/ sizeof(std::string);$/;"	m	namespace:exprtk::details
reset	app/exprtk.h	/^            void reset()$/;"	f	class:exprtk::lexer::helper::bracket_checker
reset	app/exprtk.h	/^            void reset()$/;"	f	class:exprtk::lexer::helper::numeric_checker
reset	app/exprtk.h	/^         inline void reset()$/;"	f	struct:exprtk::parser::state_t
reset	app/exprtk.h	/^         inline void reset(const _uint64_t initial_value = 0) const$/;"	f	struct:exprtk::details::loop_runtime_checker
reset	app/exprtk.h	/^         virtual void reset()                    {              }$/;"	f	class:exprtk::lexer::helper_interface
reset	app/exprtk.h	/^         void reset()$/;"	f	struct:exprtk::parser::parser_state
resolve_as_vector	app/exprtk.h	/^            resolve_as_vector()$/;"	f	struct:exprtk::details::collector_helper::resolve_as_vector
resolve_as_vector	app/exprtk.h	/^         struct resolve_as_vector : public parser_t::unknown_symbol_resolver$/;"	s	struct:exprtk::details::collector_helper
resolve_unknown_symbol_	app/exprtk.h	/^      bool resolve_unknown_symbol_;$/;"	m	class:exprtk::parser
restore	app/exprtk.h	/^         inline void restore()$/;"	f	class:exprtk::lexer::generator
restore_token	app/exprtk.h	/^         inline void restore_token()$/;"	f	class:exprtk::lexer::parser_helper
result	app/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::bracket_checker
result	app/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::numeric_checker
result	app/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::sequence_validator
result	app/exprtk.h	/^            bool result()$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
result	app/exprtk.h	/^            static inline T result(T v)$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 0> { static inline T result(const T  ) { return T(1);      } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 1> { static inline T result(const T v) { return v;         } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 2> { static inline T result(const T v) { return v * v;     } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 3> { static inline T result(const T v) { return v * v * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 4> { static inline T result(const T v) { T v_2 = v * v; return v_2 * v_2; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 5> { static inline T result(const T v) { return fast_exp<T,4>::result(v) * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 6> { static inline T result(const T v) { T v_3 = fast_exp<T,3>::result(v); return v_3 * v_3; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 7> { static inline T result(const T v) { return fast_exp<T,6>::result(v) * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 8> { static inline T result(const T v) { T v_4 = fast_exp<T,4>::result(v); return v_4 * v_4; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T, 9> { static inline T result(const T v) { return fast_exp<T,8>::result(v) * v; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         template <typename T> struct fast_exp<T,10> { static inline T result(const T v) { T v_5 = fast_exp<T,5>::result(v); return v_5 * v_5; } };$/;"	f	struct:exprtk::details::numeric::fast_exp
result	app/exprtk.h	/^         virtual bool result()                   { return true; }$/;"	f	class:exprtk::lexer::helper_interface
result	app/exprtk.h	/^      const typename expression_node<T>::node_type nodetype_T0oT1<T,T0,T1>::result = expression_node<T>::e_none;$/;"	m	class:exprtk::details::nodetype_T0oT1
result	app/exprtk.h	/^      const typename expression_node<T>::node_type nodetype_T0oT1oT2<T,T0,T1,T2>::result = expression_node<T>::e_none;$/;"	m	class:exprtk::details::nodetype_T0oT1oT2
result	app/exprtk.h	/^      const typename expression_node<T>::node_type nodetype_T0oT1oT2oT3<T,T0,T1,T2,T3>::result = expression_node<T>::e_none;$/;"	m	class:exprtk::details::nodetype_T0oT1oT2oT3
result	app/exprtk.h	/^      struct nodetype_T0oT1 { static const typename expression_node<T>::node_type result; };$/;"	m	struct:exprtk::details::nodetype_T0oT1
result	app/exprtk.h	/^      struct nodetype_T0oT1oT2 { static const typename expression_node<T>::node_type result; };$/;"	m	struct:exprtk::details::nodetype_T0oT1oT2
result	app/exprtk.h	/^      struct nodetype_T0oT1oT2oT3 { static const typename expression_node<T>::node_type result; };$/;"	m	struct:exprtk::details::nodetype_T0oT1oT2oT3
result	app/exprtk.h	/^      struct param_to_str { static std::string result() { static const std::string r("v"); return r; } };$/;"	f	struct:exprtk::details::param_to_str
result	app/exprtk.h	/^      struct param_to_str<0> { static std::string result() { static const std::string r("c"); return r; } };$/;"	f	struct:exprtk::details::param_to_str
result	app/exprtk.h	/^      template <typename T> struct is_const                { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_const::__anon7
result	app/exprtk.h	/^      template <typename T> struct is_const <const T>      { enum {result = 1}; };$/;"	e	enum:exprtk::details::is_const::__anon8
result	app/exprtk.h	/^      template <typename T> struct is_const_ref            { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_const_ref::__anon9
result	app/exprtk.h	/^      template <typename T> struct is_const_ref <const T&> { enum {result = 1}; };$/;"	e	enum:exprtk::details::is_const_ref::__anon10
result	app/exprtk.h	/^      template <typename T> struct is_ref                  { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_ref::__anon11
result	app/exprtk.h	/^      template <typename T> struct is_ref<T&>              { enum {result = 1}; };$/;"	e	enum:exprtk::details::is_ref::__anon12
result	app/exprtk.h	/^      template <typename T> struct is_ref<const T&>        { enum {result = 0}; };$/;"	e	enum:exprtk::details::is_ref::__anon13
results	app/exprtk.h	/^         results_context_t* results;$/;"	m	struct:exprtk::expression::control_block
results	app/exprtk.h	/^      inline const results_context_t& results() const$/;"	f	class:exprtk::expression
results_available_	app/exprtk.h	/^      bool results_available_;$/;"	m	class:exprtk::results_context
results_context	app/exprtk.h	/^      results_context()$/;"	f	class:exprtk::results_context
results_context	app/exprtk.h	/^   class results_context$/;"	c	namespace:exprtk
results_context_	app/exprtk.h	/^         results_context_t* results_context_;$/;"	m	class:exprtk::details::exprtk_final
results_context_	app/exprtk.h	/^      results_context_t* results_context_;$/;"	m	class:exprtk::parser
results_context_t	app/exprtk.h	/^         typedef results_context<T>     results_context_t;$/;"	t	struct:exprtk::expression::control_block
results_context_t	app/exprtk.h	/^         typedef results_context<T>   results_context_t;$/;"	t	class:exprtk::details::exprtk_final
results_context_t	app/exprtk.h	/^         typedef results_context<T>  results_context_t;$/;"	t	class:exprtk::details::exprtk_final
results_context_t	app/exprtk.h	/^      typedef results_context<T> results_context_t;$/;"	t	class:exprtk::expression
results_context_t	app/exprtk.h	/^      typedef results_context<T> results_context_t;$/;"	t	class:exprtk::parser
results_ctx	app/exprtk.h	/^      inline results_context_t& results_ctx()$/;"	f	class:exprtk::parser
ret_string_	app/exprtk.h	/^         mutable std::string ret_string_;$/;"	m	class:exprtk::details::string_function_node
retinv_null	app/exprtk.h	/^         bool  retinv_null;$/;"	m	struct:exprtk::expression::control_block
retinvk_ptr	app/exprtk.h	/^         inline bool* retinvk_ptr()$/;"	f	class:exprtk::details::exprtk_final
retparam_list_	app/exprtk.h	/^         retparam_list_t retparam_list_;$/;"	m	class:exprtk::parser::dependent_entity_collector
retparam_list_t	app/exprtk.h	/^         typedef std::vector<std::string> retparam_list_t;$/;"	t	class:exprtk::parser::dependent_entity_collector
return_	app/exprtk.h	/^         branch_t return_;$/;"	m	class:exprtk::details::exprtk_final
return_call	app/exprtk.h	/^         inline expression_node_ptr return_call(std::vector<expression_node_ptr>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
return_call	app/exprtk.h	/^         inline expression_node_ptr return_call(std::vector<expression_node_ptr>&)$/;"	f	class:exprtk::parser::expression_generator
return_cleanup	app/exprtk.h	/^      inline void return_cleanup()$/;"	f	class:exprtk::parser
return_envelope	app/exprtk.h	/^         inline expression_node_ptr return_envelope(expression_node_ptr body,$/;"	f	class:exprtk::parser::expression_generator
return_envelope	app/exprtk.h	/^         inline expression_node_ptr return_envelope(expression_node_ptr,$/;"	f	class:exprtk::parser::expression_generator
return_envelope_node	app/exprtk.h	/^         return_envelope_node(expression_ptr body, results_context_t& rc)$/;"	f	class:exprtk::details::exprtk_final
return_exception	app/exprtk.h	/^      class return_exception$/;"	c	namespace:exprtk::details
return_invoked	app/exprtk.h	/^         bool* return_invoked;$/;"	m	struct:exprtk::expression::control_block
return_invoked	app/exprtk.h	/^      inline bool return_invoked() const$/;"	f	class:exprtk::expression
return_invoked_	app/exprtk.h	/^         mutable bool        return_invoked_;$/;"	m	class:exprtk::details::exprtk_final
return_node	app/exprtk.h	/^         return_node(const std::vector<typename gen_function_t::expression_ptr>& arg_list,$/;"	f	class:exprtk::details::exprtk_final
return_param_type_list	app/exprtk.h	/^         retparam_list_t return_param_type_list() const$/;"	f	class:exprtk::parser::dependent_entity_collector
return_present	app/exprtk.h	/^         bool return_present() const$/;"	f	class:exprtk::parser::dependent_entity_collector
return_present_	app/exprtk.h	/^         bool return_present_;$/;"	m	class:exprtk::parser::dependent_entity_collector
return_stmt_present	app/exprtk.h	/^         bool return_stmt_present;$/;"	m	struct:exprtk::parser::parser_state
return_type	app/exprtk.h	/^      enum return_type$/;"	g	class:exprtk::igeneric_function
return_value	app/exprtk.h	/^      static T return_value(expression_t& e)$/;"	f	class:exprtk::function_compositor
right	app/exprtk.h	/^         precedence_level right;$/;"	m	struct:exprtk::parser::state_t
rl	app/exprtk.h	/^      rol        <T> rl;$/;"	m	struct:exprtk::rtl::vecops::package
rol	app/exprtk.h	/^      rol()$/;"	f	class:exprtk::rtl::vecops::rol
rol	app/exprtk.h	/^   class rol : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
root	app/exprtk.h	/^         inline T root(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
root_impl	app/exprtk.h	/^            inline T root_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
root_impl	app/exprtk.h	/^            inline T root_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
ror	app/exprtk.h	/^      ror()$/;"	f	class:exprtk::rtl::vecops::ror
ror	app/exprtk.h	/^   class ror : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
round_impl	app/exprtk.h	/^            inline T round_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
round_impl	app/exprtk.h	/^            template <typename T> inline T round_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
roundn	app/exprtk.h	/^         inline T roundn(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
roundn_impl	app/exprtk.h	/^            inline T roundn_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
roundn_impl	app/exprtk.h	/^            inline T roundn_impl(const T v0, const T, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
rows	utils/ParaReader.h	/^  size_t rows() const { return nrow_; }$/;"	f	class:CppUtils::Parameter
rows	utils/oldParaReader.h	/^  size_t rows() const { return nrow_; }$/;"	f	class:ListParameter
rows	utils/oldParaReader.h	/^  void rows(size_t i) { nrow_ = i; }$/;"	f	class:ListParameter
rp0_	app/exprtk.h	/^         RangePack rp0_;$/;"	m	class:exprtk::details::exprtk_final
rp1_	app/exprtk.h	/^         RangePack rp1_;$/;"	m	class:exprtk::details::exprtk_final
rp_	app/exprtk.h	/^         mutable range_t rp_;$/;"	m	class:exprtk::details::exprtk_final
rp_	app/exprtk.h	/^         range_t      rp_;$/;"	m	class:exprtk::details::exprtk_final
rp_	app/exprtk.h	/^         range_t rp_;$/;"	m	class:exprtk::details::exprtk_final
rr	app/exprtk.h	/^      ror        <T> rr;$/;"	m	struct:exprtk::rtl::vecops::package
rsrvd_sym_usr_disabled	app/exprtk.h	/^         bool rsrvd_sym_usr_disabled     () const { return disable_rsrvd_sym_usr_;     }$/;"	f	class:exprtk::parser::settings_store
rtl	app/exprtk.h	/^   namespace rtl { namespace io { namespace details$/;"	n	namespace:exprtk
rtl	app/exprtk.h	/^   namespace rtl { namespace io { namespace file { namespace details$/;"	n	namespace:exprtk
rtl	app/exprtk.h	/^   namespace rtl { namespace vecops {$/;"	n	namespace:exprtk
rtrn_type	app/exprtk.h	/^      return_type rtrn_type;$/;"	m	class:exprtk::igeneric_function
run_assemblies	app/exprtk.h	/^      inline bool run_assemblies()$/;"	f	class:exprtk::parser
run_boundary_tests	tests/boundary_test.cpp	/^void run_boundary_tests()$/;"	f
run_container_tests	tests/container_test.cpp	/^void run_container_tests(bool benchmark)$/;"	f
run_edgelist_tests	tests/edgelist_test.cpp	/^void run_edgelist_tests()$/;"	f
run_front_tests	tests/front_test.cpp	/^void run_front_tests()$/;"	f
run_geometry_tests	tests/geometry_test.cpp	/^void run_geometry_tests()$/;"	f
run_inserters	app/exprtk.h	/^            inline bool run_inserters(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_joiners	app/exprtk.h	/^            inline bool run_joiners(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_mesh_tests	tests/mesh_test.cpp	/^void run_mesh_tests(bool benchmark)$/;"	f
run_modifiers	app/exprtk.h	/^            inline bool run_modifiers(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_qtree_tests	tests/qtree_test.cpp	/^void run_qtree_tests(bool benchmark)$/;"	f
run_quad_tests	tests/quad_test.cpp	/^void run_quad_tests()$/;"	f
run_scanners	app/exprtk.h	/^            inline bool run_scanners(lexer::generator& g)$/;"	f	struct:exprtk::lexer::helper::helper_assembly
run_sizefunction_tests	tests/sizefunction_test.cpp	/^void run_sizefunction_tests()$/;"	f
run_smoother_tests	tests/smoother_test.cpp	/^void run_smoother_tests()$/;"	f
run_triangle_tests	tests/triangle_test.cpp	/^void run_triangle_tests()$/;"	f
run_vertex_tests	tests/vertex_test.cpp	/^void run_vertex_tests()$/;"	f
s0	app/exprtk.h	/^         inline std::string& s0()$/;"	f	class:exprtk::details::exprtk_final
s0_	app/exprtk.h	/^         SType0    s0_;$/;"	m	class:exprtk::details::exprtk_final
s0_	app/exprtk.h	/^         SType0 s0_;$/;"	m	class:exprtk::details::exprtk_final
s1	app/exprtk.h	/^         inline std::string& s1()$/;"	f	class:exprtk::details::exprtk_final
s1_	app/exprtk.h	/^         SType1    s1_;$/;"	m	class:exprtk::details::exprtk_final
s1_	app/exprtk.h	/^         SType1 s1_;$/;"	m	class:exprtk::details::exprtk_final
s2	app/exprtk.h	/^         inline std::string& s2()$/;"	f	class:exprtk::details::exprtk_final
s2_	app/exprtk.h	/^         SType2 s2_;$/;"	m	class:exprtk::details::exprtk_final
s_end_	app/exprtk.h	/^         details::char_cptr s_end_;$/;"	m	class:exprtk::lexer::generator
s_itr_	app/exprtk.h	/^         details::char_cptr s_itr_;$/;"	m	class:exprtk::lexer::generator
scalar_bool_params_	utils/oldParaReader.h	/^  std::vector<ScalarParameter<bool>>   scalar_bool_params_;$/;"	m	class:ParaReader
scalar_dbl_params_	utils/oldParaReader.h	/^  std::vector<ScalarParameter<double>> scalar_dbl_params_;$/;"	m	class:ParaReader
scalar_format_	app/exprtk.h	/^      std::string scalar_format_;$/;"	m	struct:exprtk::rtl::io::print
scalar_format_	app/exprtk.h	/^      std::string scalar_format_;$/;"	m	struct:exprtk::rtl::io::println
scalar_int_params_	utils/oldParaReader.h	/^  std::vector<ScalarParameter<int>>    scalar_int_params_;$/;"	m	class:ParaReader
scalar_str_params_	utils/oldParaReader.h	/^  std::vector<ScalarParameter<string>> scalar_str_params_;$/;"	m	class:ParaReader
scalar_t	app/exprtk.h	/^         typedef typename generic_type::scalar_view    scalar_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
scalar_t	app/exprtk.h	/^         typedef typename generic_type::scalar_view scalar_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::io::file::getline
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::io::file::read
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::io::file::write
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpby
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpy
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::copy
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::dot
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::dotk
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::iota
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::rol
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::ror
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
scalar_t	app/exprtk.h	/^      typedef typename generic_type::scalar_view    scalar_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
scalar_view	app/exprtk.h	/^         explicit scalar_view(const type_store_t& ts)$/;"	f	struct:exprtk::type_store::scalar_view
scalar_view	app/exprtk.h	/^         explicit scalar_view(type_store_t& ts)$/;"	f	struct:exprtk::type_store::scalar_view
scalar_view	app/exprtk.h	/^      struct scalar_view$/;"	s	struct:exprtk::type_store
scale	utils/QTree.h	/^  double scale() const { return scale_; }$/;"	f	class:TQMesh::TQUtils::QTree
scan_number	app/exprtk.h	/^         inline void scan_number()$/;"	f	class:exprtk::lexer::generator
scan_operator	app/exprtk.h	/^         inline void scan_operator()$/;"	f	class:exprtk::lexer::generator
scan_special_function	app/exprtk.h	/^         inline void scan_special_function()$/;"	f	class:exprtk::lexer::generator
scan_string	app/exprtk.h	/^         inline void scan_string()$/;"	f	class:exprtk::lexer::generator
scan_symbol	app/exprtk.h	/^         inline void scan_symbol()$/;"	f	class:exprtk::lexer::generator
scan_token	app/exprtk.h	/^         inline void scan_token()$/;"	f	class:exprtk::lexer::generator
scand_node	app/exprtk.h	/^         scand_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
scand_node_t	app/exprtk.h	/^      typedef details::scand_node<T>                      scand_node_t;$/;"	t	class:exprtk::parser
scope_depth	app/exprtk.h	/^         std::size_t scope_depth;$/;"	m	struct:exprtk::parser::parser_state
scope_element	app/exprtk.h	/^         scope_element()$/;"	f	struct:exprtk::parser::scope_element
scope_element	app/exprtk.h	/^      struct scope_element$/;"	s	class:exprtk::parser
scope_element_manager	app/exprtk.h	/^         explicit scope_element_manager(parser<T>& p)$/;"	f	class:exprtk::parser::scope_element_manager
scope_element_manager	app/exprtk.h	/^      class scope_element_manager$/;"	c	class:exprtk::parser
scope_handler	app/exprtk.h	/^         explicit scope_handler(parser<T>& p)$/;"	f	class:exprtk::parser::scope_handler
scope_handler	app/exprtk.h	/^      class scope_handler$/;"	c	class:exprtk::parser
scoped_bft	app/exprtk.h	/^         explicit scoped_bft(BaseFuncType& bft)$/;"	f	struct:exprtk::function_compositor::scoped_bft
scoped_bft	app/exprtk.h	/^      struct scoped_bft$/;"	s	class:exprtk::function_compositor
scoped_bool_negator	app/exprtk.h	/^         explicit scoped_bool_negator(bool& bb)$/;"	f	struct:exprtk::parser::scoped_bool_negator
scoped_bool_negator	app/exprtk.h	/^      struct scoped_bool_negator$/;"	s	class:exprtk::parser
scoped_bool_or_restorer	app/exprtk.h	/^         explicit scoped_bool_or_restorer(bool& bb)$/;"	f	struct:exprtk::parser::scoped_bool_or_restorer
scoped_bool_or_restorer	app/exprtk.h	/^      struct scoped_bool_or_restorer$/;"	s	class:exprtk::parser
scoped_delete	app/exprtk.h	/^         scoped_delete(parser<T>& pr, ptr_t (&p)[N])$/;"	f	struct:exprtk::parser::scoped_delete
scoped_delete	app/exprtk.h	/^         scoped_delete(parser<T>& pr, ptr_t& p)$/;"	f	struct:exprtk::parser::scoped_delete
scoped_delete	app/exprtk.h	/^      struct scoped_delete$/;"	s	class:exprtk::parser
scoped_deq_delete	app/exprtk.h	/^         scoped_deq_delete(parser<T>& pr, std::deque<ptr_t>& deq)$/;"	f	struct:exprtk::parser::scoped_deq_delete
scoped_deq_delete	app/exprtk.h	/^      struct scoped_deq_delete$/;"	s	class:exprtk::parser
scoped_expression_delete	app/exprtk.h	/^         scoped_expression_delete(parser<T>& pr, expression_node_ptr& expression)$/;"	f	struct:exprtk::parser::scoped_expression_delete
scoped_expression_delete	app/exprtk.h	/^      struct scoped_expression_delete$/;"	s	class:exprtk::parser
scoped_inc_dec	app/exprtk.h	/^         explicit scoped_inc_dec(std::size_t& v)$/;"	f	struct:exprtk::parser::scoped_inc_dec
scoped_inc_dec	app/exprtk.h	/^      struct scoped_inc_dec$/;"	s	class:exprtk::parser
scoped_vec_delete	app/exprtk.h	/^         scoped_vec_delete(parser<T>& pr, std::vector<ptr_t>& vec)$/;"	f	struct:exprtk::parser::scoped_vec_delete
scoped_vec_delete	app/exprtk.h	/^      struct scoped_vec_delete$/;"	s	class:exprtk::parser
scor_node	app/exprtk.h	/^         scor_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
scor_node_t	app/exprtk.h	/^      typedef details::scor_node<T>                       scor_node_t;$/;"	t	class:exprtk::parser
sec_impl	app/exprtk.h	/^            template <typename T> inline T   sec_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
sec_impl	app/exprtk.h	/^            template <typename T> inline T   sec_impl(const T v, real_type_tag) { return T(1) \/ std::cos(v); }$/;"	f	namespace:exprtk::details::numeric::details
second_derivative	app/exprtk.h	/^   inline T second_derivative(const expression<T>& e,$/;"	f	namespace:exprtk
sem_	app/exprtk.h	/^      scope_element_manager sem_;$/;"	m	class:exprtk::parser
sequence_	app/exprtk.h	/^            sequence_t& sequence_;$/;"	m	class:exprtk::details::vector_holder::sequence_vector_impl
sequence_check_enabled	app/exprtk.h	/^         bool sequence_check_enabled     () const { return enable_sequence_check_;     }$/;"	f	class:exprtk::parser::settings_store
sequence_match	app/exprtk.h	/^      inline bool sequence_match(const std::string& pattern,$/;"	f	namespace:exprtk::details
sequence_t	app/exprtk.h	/^            typedef Sequence<Type,Allocator> sequence_t;$/;"	t	class:exprtk::details::vector_holder::sequence_vector_impl
sequence_validator	app/exprtk.h	/^            sequence_validator()$/;"	f	class:exprtk::lexer::helper::sequence_validator
sequence_validator	app/exprtk.h	/^         class sequence_validator : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
sequence_validator_	app/exprtk.h	/^      lexer::helper::sequence_validator         sequence_validator_;$/;"	m	class:exprtk::parser
sequence_validator_3tkns_	app/exprtk.h	/^      lexer::helper::sequence_validator_3tokens sequence_validator_3tkns_;$/;"	m	class:exprtk::parser
sequence_validator_3tokens	app/exprtk.h	/^            sequence_validator_3tokens()$/;"	f	class:exprtk::lexer::helper::sequence_validator_3tokens
sequence_validator_3tokens	app/exprtk.h	/^         class sequence_validator_3tokens : public lexer::token_scanner$/;"	c	namespace:exprtk::lexer::helper
sequence_vector_impl	app/exprtk.h	/^            sequence_vector_impl(sequence_t& seq)$/;"	f	class:exprtk::details::vector_holder::sequence_vector_impl
sequence_vector_impl	app/exprtk.h	/^         class sequence_vector_impl : public vector_holder_base$/;"	c	class:exprtk::details::vector_holder
set	app/exprtk.h	/^         inline void set(const precedence_level& l,$/;"	f	struct:exprtk::parser::state_t
set_allocator	app/exprtk.h	/^         inline void set_allocator(details::node_allocator& na)$/;"	f	class:exprtk::parser::expression_generator
set_base_first	algorithm/Front.h	/^  void set_base_first()$/;"	f	class:TQMesh::TQAlgorithm::Front
set_base_next	algorithm/Front.h	/^  void set_base_next()$/;"	f	class:TQMesh::TQAlgorithm::Front
set_bom	app/exprtk.h	/^         inline void set_bom(binary_op_map_t& binary_op_map)$/;"	f	class:exprtk::parser::expression_generator
set_error	app/exprtk.h	/^         inline token& set_error(const token_type et,$/;"	f	struct:exprtk::lexer::token
set_error	app/exprtk.h	/^      inline void set_error(const parser_error::type& error_type)$/;"	f	class:exprtk::parser
set_expression	app/exprtk.h	/^      inline void set_expression(const expression_ptr expr)$/;"	f	class:exprtk::expression
set_ibom	app/exprtk.h	/^         inline void set_ibom(inv_binary_op_map_t& inv_binary_op_map)$/;"	f	class:exprtk::parser::expression_generator
set_max_node_depth	app/exprtk.h	/^         void set_max_node_depth(const std::size_t max_node_depth)$/;"	f	class:exprtk::parser::settings_store
set_max_num_args	app/exprtk.h	/^   void set_max_num_args(FunctionType& func, const std::size_t& num_args)$/;"	f	namespace:exprtk
set_max_stack_depth	app/exprtk.h	/^         void set_max_stack_depth(const std::size_t max_stack_depth)$/;"	f	class:exprtk::parser::settings_store
set_min_num_args	app/exprtk.h	/^   void set_min_num_args(FunctionType& func, const std::size_t& num_args)$/;"	f	namespace:exprtk
set_numeric	app/exprtk.h	/^         inline token& set_numeric(const Iterator begin, const Iterator end, const Iterator base_begin = Iterator(0))$/;"	f	struct:exprtk::lexer::token
set_operator	app/exprtk.h	/^         inline token& set_operator(const token_type tt,$/;"	f	struct:exprtk::lexer::token
set_parser	app/exprtk.h	/^         inline void set_parser(parser_t& p)$/;"	f	class:exprtk::parser::expression_generator
set_ref	app/exprtk.h	/^            virtual void set_ref(value_ptr*) {}$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
set_ref	app/exprtk.h	/^            void set_ref(value_ptr* ref)$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
set_ref	app/exprtk.h	/^         void set_ref(value_ptr* ref)$/;"	f	class:exprtk::details::vector_holder
set_ref	app/exprtk.h	/^      void set_ref(data_ptr_t* data_ref)$/;"	f	class:exprtk::vector_view
set_retinvk	app/exprtk.h	/^      inline void set_retinvk(bool* retinvk_ptr)$/;"	f	class:exprtk::expression
set_sf3m	app/exprtk.h	/^         inline void set_sf3m(sf3_map_t& sf3_map)$/;"	f	class:exprtk::parser::expression_generator
set_sf4m	app/exprtk.h	/^         inline void set_sf4m(sf4_map_t& sf4_map)$/;"	f	class:exprtk::parser::expression_generator
set_shape_circle	algorithm/Boundary.h	/^  void set_shape_circle(Vertices& vertices, int marker,$/;"	f	class:TQMesh::TQAlgorithm::Boundary
set_shape_rectangle	algorithm/Boundary.h	/^  void set_shape_rectangle(Vertices& vertices, int marker,$/;"	f	class:TQMesh::TQAlgorithm::Boundary
set_shape_square	algorithm/Boundary.h	/^  void set_shape_square(Vertices& vertices, int marker, $/;"	f	class:TQMesh::TQAlgorithm::Boundary
set_shape_triangle	algorithm/Boundary.h	/^  void set_shape_triangle(Vertices& vertices, int marker,$/;"	f	class:TQMesh::TQAlgorithm::Boundary
set_strength_reduction_state	app/exprtk.h	/^         inline void set_strength_reduction_state(const bool enabled)$/;"	f	class:exprtk::parser::expression_generator
set_string	app/exprtk.h	/^         inline token& set_string(const Iterator begin, const Iterator end, const Iterator base_begin = Iterator(0))$/;"	f	struct:exprtk::lexer::token
set_string	app/exprtk.h	/^         inline token& set_string(const std::string& s, const std::size_t p)$/;"	f	struct:exprtk::lexer::token
set_symbol	app/exprtk.h	/^         inline token& set_symbol(const Iterator begin, const Iterator end, const Iterator base_begin = Iterator(0))$/;"	f	struct:exprtk::lexer::token
set_synthesis_error	app/exprtk.h	/^      inline void set_synthesis_error(const std::string& synthesis_error_message)$/;"	f	class:exprtk::parser
set_t	app/exprtk.h	/^            typedef std::set<token_pair_t> set_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator
set_t	app/exprtk.h	/^            typedef std::set<token_triplet_t> set_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator_3tokens
set_uom	app/exprtk.h	/^         inline void set_uom(unary_op_map_t& unary_op_map)$/;"	f	class:exprtk::parser::expression_generator
set_value	utils/ParaReader.h	/^  void set_value(size_t i, T val) $/;"	f	class:CppUtils::Parameter
set_value	utils/ParaReader.h	/^  void set_value(size_t i, size_t j, T val) $/;"	f	class:CppUtils::Parameter
settings	app/exprtk.h	/^      inline settings_store& settings()$/;"	f	class:exprtk::parser
settings_	app/exprtk.h	/^      settings_store settings_;$/;"	m	class:exprtk::parser
settings_arithmetic_opr	app/exprtk.h	/^         enum settings_arithmetic_opr$/;"	g	class:exprtk::parser::settings_store
settings_assignment_opr	app/exprtk.h	/^         enum settings_assignment_opr$/;"	g	class:exprtk::parser::settings_store
settings_base_funcs	app/exprtk.h	/^         enum settings_base_funcs$/;"	g	class:exprtk::parser::settings_store
settings_compilation_options	app/exprtk.h	/^         enum settings_compilation_options$/;"	g	class:exprtk::parser::settings_store
settings_control_structs	app/exprtk.h	/^         enum settings_control_structs$/;"	g	class:exprtk::parser::settings_store
settings_inequality_opr	app/exprtk.h	/^         enum settings_inequality_opr$/;"	g	class:exprtk::parser::settings_store
settings_logic_opr	app/exprtk.h	/^         enum settings_logic_opr$/;"	g	class:exprtk::parser::settings_store
settings_store	app/exprtk.h	/^         settings_store(const std::size_t compile_options = compile_all_opts)$/;"	f	class:exprtk::parser::settings_store
settings_store	app/exprtk.h	/^      class settings_store$/;"	c	class:exprtk::parser
settings_t	app/exprtk.h	/^      typedef settings_store settings_t;$/;"	t	class:exprtk::parser
settings_t	app/exprtk.h	/^      typedef typename parser_t::settings_store settings_t;$/;"	t	class:exprtk::function_compositor
setup	app/exprtk.h	/^         inline function_t& setup(expression_t& expr)$/;"	f	struct:exprtk::function_compositor::base_func
setup_facet_connectivity	algorithm/Mesh.h	/^  void setup_facet_connectivity()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
setup_vertex_connectivity	algorithm/Mesh.h	/^  void setup_vertex_connectivity()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
setup_vertex_projection	algorithm/QuadLayer.h	/^  void setup_vertex_projection(Vertices& verts, $/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
sf3_map_	app/exprtk.h	/^         sf3_map_t*               sf3_map_;$/;"	m	class:exprtk::parser::expression_generator
sf3_map_	app/exprtk.h	/^      sf3_map_t sf3_map_;$/;"	m	class:exprtk::parser
sf3_map_t	app/exprtk.h	/^      typedef std::map<std::string,std::pair<trinary_functor_t   ,operator_t> > sf3_map_t;$/;"	t	class:exprtk::parser
sf3_node	app/exprtk.h	/^         sf3_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
sf3_optimisable	app/exprtk.h	/^         inline bool sf3_optimisable(const std::string& sf3id, details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
sf3_optimisable	app/exprtk.h	/^         inline bool sf3_optimisable(const std::string& sf3id, trinary_functor_t& tfunc) const$/;"	f	class:exprtk::parser::expression_generator
sf3_type	app/exprtk.h	/^            typedef typename cocov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_cocov_expression1
sf3_type	app/exprtk.h	/^            typedef typename covoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression0
sf3_type	app/exprtk.h	/^            typedef typename covoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covoc_expression1
sf3_type	app/exprtk.h	/^            typedef typename covov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression0
sf3_type	app/exprtk.h	/^            typedef typename covov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covov_expression1
sf3_type	app/exprtk.h	/^            typedef typename vococ_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococ_expression0
sf3_type	app/exprtk.h	/^            typedef typename vocov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression0
sf3_type	app/exprtk.h	/^            typedef typename vocov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocov_expression1
sf3_type	app/exprtk.h	/^            typedef typename vovoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression0
sf3_type	app/exprtk.h	/^            typedef typename vovoc_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovoc_expression1
sf3_type	app/exprtk.h	/^            typedef typename vovov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression0
sf3_type	app/exprtk.h	/^            typedef typename vovov_t::sf3_type sf3_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovov_expression1
sf3_type	app/exprtk.h	/^         typedef details::T0oT1oT2_sf3<T, T0, T1, T2> sf3_type;$/;"	t	struct:exprtk::details::T0oT1oT2_define
sf3_type_node	app/exprtk.h	/^         typedef details::sf3ext_type_node<T, T0, T1, T2> sf3_type_node;$/;"	t	struct:exprtk::details::T0oT1oT2_define
sf3_var_node	app/exprtk.h	/^         sf3_var_node(const T& v0, const T& v1, const T& v2)$/;"	f	class:exprtk::details::exprtk_final
sf3ext_type_node	app/exprtk.h	/^      class sf3ext_type_node : public T0oT1oT2_base_node<T>$/;"	c	namespace:exprtk::details
sf4_map_	app/exprtk.h	/^         sf4_map_t*               sf4_map_;$/;"	m	class:exprtk::parser::expression_generator
sf4_map_	app/exprtk.h	/^      sf4_map_t sf4_map_;$/;"	m	class:exprtk::parser
sf4_map_t	app/exprtk.h	/^      typedef std::map<std::string,std::pair<quaternary_functor_t,operator_t> > sf4_map_t;$/;"	t	class:exprtk::parser
sf4_node	app/exprtk.h	/^         sf4_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
sf4_optimisable	app/exprtk.h	/^         inline bool sf4_optimisable(const std::string& sf4id, details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
sf4_optimisable	app/exprtk.h	/^         inline bool sf4_optimisable(const std::string& sf4id, quaternary_functor_t& qfunc) const$/;"	f	class:exprtk::parser::expression_generator
sf4_type	app/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression0
sf4_type	app/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression1
sf4_type	app/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression2
sf4_type	app/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression3
sf4_type	app/exprtk.h	/^            typedef typename covocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covocov_expression4
sf4_type	app/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression0
sf4_type	app/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression1
sf4_type	app/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression2
sf4_type	app/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression3
sf4_type	app/exprtk.h	/^            typedef typename covovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovoc_expression4
sf4_type	app/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression0
sf4_type	app/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression1
sf4_type	app/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression2
sf4_type	app/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression3
sf4_type	app/exprtk.h	/^            typedef typename covovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_covovov_expression4
sf4_type	app/exprtk.h	/^            typedef typename vococov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression0
sf4_type	app/exprtk.h	/^            typedef typename vococov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression1
sf4_type	app/exprtk.h	/^            typedef typename vococov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vococov_expression3
sf4_type	app/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression0
sf4_type	app/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression1
sf4_type	app/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression2
sf4_type	app/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression3
sf4_type	app/exprtk.h	/^            typedef typename vocovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovoc_expression4
sf4_type	app/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression0
sf4_type	app/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression1
sf4_type	app/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression2
sf4_type	app/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression3
sf4_type	app/exprtk.h	/^            typedef typename vocovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vocovov_expression4
sf4_type	app/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression0
sf4_type	app/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression1
sf4_type	app/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression2
sf4_type	app/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression3
sf4_type	app/exprtk.h	/^            typedef typename vovocov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovocov_expression4
sf4_type	app/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression0
sf4_type	app/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression1
sf4_type	app/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression2
sf4_type	app/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression3
sf4_type	app/exprtk.h	/^            typedef typename vovovoc_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovoc_expression4
sf4_type	app/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression0
sf4_type	app/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression1
sf4_type	app/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression2
sf4_type	app/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression3
sf4_type	app/exprtk.h	/^            typedef typename vovovov_t::sf4_type sf4_type;$/;"	t	struct:exprtk::parser::expression_generator::synthesize_vovovov_expression4
sf4_type	app/exprtk.h	/^         typedef details::T0oT1oT2oT3_sf4<T, T0, T1, T2, T3> sf4_type;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
sf4_var_node	app/exprtk.h	/^         sf4_var_node(const T& v0, const T& v1, const T& v2, const T& v3)$/;"	f	class:exprtk::details::exprtk_final
sf_base	app/exprtk.h	/^      struct sf_base$/;"	s	namespace:exprtk::details
sgn_impl	app/exprtk.h	/^            inline T sgn_impl(const T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
sgn_impl	app/exprtk.h	/^            inline T sgn_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
shift_left	app/exprtk.h	/^      shift_left()$/;"	f	class:exprtk::rtl::vecops::shift_left
shift_left	app/exprtk.h	/^   class shift_left : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
shift_right	app/exprtk.h	/^      shift_right()$/;"	f	class:exprtk::rtl::vecops::shift_right
shift_right	app/exprtk.h	/^   class shift_right : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
shl	app/exprtk.h	/^         inline T shl(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
shl_impl	app/exprtk.h	/^            inline T shl_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
shl_impl	app/exprtk.h	/^            inline T shl_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
show	utils/ProgressBar.h	/^  void show(std::ostream& os) const$/;"	f	class:TQMesh::TQUtils::ProgressBar
shr	app/exprtk.h	/^         inline T shr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
shr_impl	app/exprtk.h	/^            inline T shr_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
shr_impl	app/exprtk.h	/^            inline T shr_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
side_effect	app/exprtk.h	/^         virtual bool side_effect   () const { return false; }$/;"	f	class:exprtk::details::vector_interface
side_effect_present	app/exprtk.h	/^         bool side_effect_present;$/;"	m	struct:exprtk::parser::parser_state
simplify_unary_negation_branch	app/exprtk.h	/^      bool simplify_unary_negation_branch(expression_node_ptr& node)$/;"	f	class:exprtk::parser
sin_impl	app/exprtk.h	/^            template <typename T> inline T   sin_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
sin_impl	app/exprtk.h	/^            template <typename T> inline T   sin_impl(const T v, real_type_tag) { return std::sin  (v); }$/;"	f	namespace:exprtk::details::numeric::details
sinc_impl	app/exprtk.h	/^            inline T sinc_impl(T v, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
sinc_impl	app/exprtk.h	/^            inline T sinc_impl(T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
single_key	utils/ParaReader.h	/^  const string& single_key() const { return single_key_;   }$/;"	f	class:CppUtils::ParameterBase
single_key	utils/ParaReader.h	/^  string& single_key() { return single_key_;   }$/;"	f	class:CppUtils::ParameterBase
single_key_	utils/ParaReader.h	/^  string single_key_;$/;"	m	class:CppUtils::ParameterBase
single_value_initialse_	app/exprtk.h	/^         const bool single_value_initialse_;$/;"	m	class:exprtk::details::exprtk_final
sinh_impl	app/exprtk.h	/^            template <typename T> inline T  sinh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
sinh_impl	app/exprtk.h	/^            template <typename T> inline T  sinh_impl(const T v, real_type_tag) { return std::sinh (v); }$/;"	f	namespace:exprtk::details::numeric::details
size	algorithm/Domain.h	/^  size_type size() const { return boundaries_.size(); }$/;"	f	class:TQMesh::TQAlgorithm::Domain
size	algorithm/EdgeList.h	/^  size_t size() const { return edges_.size(); }$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
size	app/exprtk.h	/^            inline std::size_t size() const$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
size	app/exprtk.h	/^            std::size_t size;$/;"	m	struct:exprtk::details::vec_data_store::control_block
size	app/exprtk.h	/^            std::size_t size;$/;"	m	struct:exprtk::expression::control_block::data_pack
size	app/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::details::vec_data_store
size	app/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::details::vector_holder
size	app/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::lexer::generator
size	app/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::parser::scope_element_manager
size	app/exprtk.h	/^         inline std::size_t size() const$/;"	f	class:exprtk::type_store::parameter_list
size	app/exprtk.h	/^         inline std::size_t size() const$/;"	f	struct:exprtk::type_store::type_view
size	app/exprtk.h	/^         inline std::size_t size()$/;"	f	class:exprtk::details::vec_data_store
size	app/exprtk.h	/^         std::size_t   size;$/;"	m	struct:exprtk::details::range_data_type
size	app/exprtk.h	/^         std::size_t  size;$/;"	m	struct:exprtk::parser::scope_element
size	app/exprtk.h	/^         std::size_t size() const$/;"	f	class:exprtk::details::exprtk_final
size	app/exprtk.h	/^         std::size_t size;$/;"	m	struct:exprtk::symbol_table::type_store
size	app/exprtk.h	/^         struct numeric_info { enum { length = 0, size = 32, bound_length = 0, min_exp = 0, max_exp = 0 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon1
size	app/exprtk.h	/^         template <> struct numeric_info<int        > { enum { length = 10, size = 16, bound_length = 9 }; };$/;"	e	enum:exprtk::details::numeric::numeric_info::__anon2
size	app/exprtk.h	/^      inline std::size_t size() const$/;"	f	class:exprtk::vector_view
size	app/exprtk.h	/^      std::size_t size;$/;"	m	struct:exprtk::type_store
size	utils/Container.h	/^  size_type size() const { return items_.size(); }$/;"	f	class:TQMesh::TQUtils::Container
size	utils/QTree.h	/^  size_t size() const { return n_items_; }$/;"	f	class:TQMesh::TQUtils::QTree
size_	app/exprtk.h	/^            const std::size_t size_;$/;"	m	class:exprtk::details::vector_holder::array_vector_impl
size_	app/exprtk.h	/^         const std::size_t size_;$/;"	m	class:exprtk::details::exprtk_final
size_	app/exprtk.h	/^      const std::size_t size_;$/;"	m	class:exprtk::vector_view
size_fun	app/unused.c	/^  UserSizeFunction size_fun;$/;"	v
size_function	algorithm/Domain.h	/^  inline double size_function(const Vec2d& xy) const$/;"	f	class:TQMesh::TQAlgorithm::Domain
sizing	algorithm/Vertex.h	/^  double sizing() const { return sizing_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
sk	app/exprtk.h	/^      sumk       <T> sk;$/;"	m	struct:exprtk::rtl::vecops::package
skip_comments	app/exprtk.h	/^         inline void skip_comments()$/;"	f	class:exprtk::lexer::generator
skip_whitespace	app/exprtk.h	/^         inline void skip_whitespace()$/;"	f	class:exprtk::lexer::generator
sl	app/exprtk.h	/^      shift_left <T> sl;$/;"	m	struct:exprtk::rtl::vecops::package
smooth	algorithm/Smoother.h	/^  void smooth(const Domain& domain, Mesh& mesh, int iterations,$/;"	f	class:TQMesh::TQAlgorithm::Smoother
smooth_heights	algorithm/QuadLayer.h	/^  void smooth_heights(const Domain& domain)$/;"	f	class:TQMesh::TQAlgorithm::QuadLayer
smooth_laplace	algorithm/Smoother.h	/^  void smooth_laplace(const Domain& domain, Mesh& mesh, $/;"	f	class:TQMesh::TQAlgorithm::Smoother
smooth_torsion	algorithm/Smoother.h	/^  void smooth_torsion(const Domain& domain, Mesh& mesh, $/;"	f	class:TQMesh::TQAlgorithm::Smoother
smoothing_time	tests/mesh_test.cpp	/^  std::vector<double>   smoothing_time;$/;"	m	struct:MeshTests::BenchmarkContainer	file:
sort	app/exprtk.h	/^      sort()$/;"	f	class:exprtk::rtl::vecops::sort
sort	app/exprtk.h	/^   class sort : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
sort	utils/Container.h	/^  void sort(Compare comp)$/;"	f	class:TQMesh::TQUtils::Container
sort_edges	algorithm/Front.h	/^  void sort_edges(bool ascending = true)$/;"	f	class:TQMesh::TQAlgorithm::Front
sos_base_node	app/exprtk.h	/^      class sos_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
sos_node	app/exprtk.h	/^         explicit sos_node(SType0 p0, SType1 p1)$/;"	f	class:exprtk::details::exprtk_final
sosos_base_node	app/exprtk.h	/^      class sosos_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
sosos_node	app/exprtk.h	/^         explicit sosos_node(SType0 p0, SType1 p1, SType2 p2)$/;"	f	class:exprtk::details::exprtk_final
special_function	app/exprtk.h	/^         inline expression_node_ptr special_function(const details::operator_type& operation, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
special_function	app/exprtk.h	/^         inline expression_node_ptr special_function(const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
special_one_parameter_vararg	app/exprtk.h	/^         inline bool special_one_parameter_vararg(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
split	utils/QTree.h	/^  bool split() const { return split_; }$/;"	f	class:TQMesh::TQUtils::QTree
split_edge	algorithm/EdgeList.h	/^  split_edge(Edge& edge, Vertices& vertices, const double s,$/;"	f	class:TQMesh::TQAlgorithm::EdgeList
split_qtree	utils/QTree.h	/^  void split_qtree() $/;"	f	class:TQMesh::TQUtils::QTree
sqrt2	app/exprtk.h	/^            static const double sqrt2   =  1.41421356237309504880168872420969807856967187537695;$/;"	m	namespace:exprtk::details::numeric::constant
sqrt_impl	app/exprtk.h	/^            template <typename T> inline T  sqrt_impl(const T v, int_type_tag) { return std::sqrt (v); }$/;"	f	namespace:exprtk::details::numeric::details
sqrt_impl	app/exprtk.h	/^            template <typename T> inline T  sqrt_impl(const T v, real_type_tag) { return std::sqrt (v); }$/;"	f	namespace:exprtk::details::numeric::details
sr	app/exprtk.h	/^      shift_right<T> sr;$/;"	m	struct:exprtk::rtl::vecops::package
src_is_ivec_	app/exprtk.h	/^         bool            src_is_ivec_;$/;"	m	class:exprtk::details::exprtk_final
src_location	app/exprtk.h	/^         std::string src_location;$/;"	m	struct:exprtk::parser_error::type
st	app/exprtk.h	/^      sort       <T> st;$/;"	m	struct:exprtk::rtl::vecops::package
st_data	app/exprtk.h	/^            st_data()$/;"	f	struct:exprtk::symbol_table::control_block::st_data
st_data	app/exprtk.h	/^         struct st_data$/;"	s	struct:exprtk::symbol_table::control_block
stack_	app/exprtk.h	/^            std::stack<std::pair<char,std::size_t> > stack_;$/;"	m	class:exprtk::lexer::helper::bracket_checker
stack_depth	app/exprtk.h	/^         std::size_t stack_depth;$/;"	m	struct:exprtk::function_compositor::base_func
stack_depth	app/exprtk.h	/^         std::size_t stack_depth;$/;"	m	struct:exprtk::parser::parser_state
stack_limit_handler	app/exprtk.h	/^         explicit stack_limit_handler(parser<T>& p)$/;"	f	class:exprtk::parser::stack_limit_handler
stack_limit_handler	app/exprtk.h	/^      class stack_limit_handler$/;"	c	class:exprtk::parser
start	app/exprtk.h	/^      inline void start()$/;"	f	class:exprtk::timer
start	utils/oldParaReader.h	/^  const string& start() const { return start_; }$/;"	f	class:ListParameter
start	utils/oldParaReader.h	/^  string& start() { return start_; }$/;"	f	class:ListParameter
start_	utils/oldParaReader.h	/^  string start_;$/;"	m	class:ListParameter
start_key	utils/ParaReader.h	/^  const string& start_key() const { return start_key_; }$/;"	f	class:CppUtils::ParameterBase
start_key	utils/ParaReader.h	/^  string& start_key() { return start_key_; }$/;"	f	class:CppUtils::ParameterBase
start_key_	utils/ParaReader.h	/^  string start_key_;$/;"	m	class:CppUtils::ParameterBase
start_time_	app/exprtk.h	/^         LARGE_INTEGER start_time_;$/;"	m	class:exprtk::timer
start_time_	app/exprtk.h	/^         struct timeval start_time_;$/;"	m	class:exprtk::timer	typeref:struct:exprtk::timer::timeval
state_	app/exprtk.h	/^            bool state_;$/;"	m	class:exprtk::lexer::helper::bracket_checker
state_	app/exprtk.h	/^      parser_state state_;$/;"	m	class:exprtk::parser
state_t	app/exprtk.h	/^      struct state_t$/;"	s	class:exprtk::parser
stop	app/exprtk.h	/^      inline void stop()$/;"	f	class:exprtk::timer
stop_time_	app/exprtk.h	/^         LARGE_INTEGER stop_time_;$/;"	m	class:exprtk::timer
stop_time_	app/exprtk.h	/^         struct timeval stop_time_;$/;"	m	class:exprtk::timer	typeref:struct:exprtk::timer::timeval
store	app/exprtk.h	/^         inline void store()$/;"	f	class:exprtk::lexer::generator
store_current_token_	app/exprtk.h	/^         token_t     store_current_token_;$/;"	m	class:exprtk::lexer::parser_helper
store_token	app/exprtk.h	/^         inline void store_token()$/;"	f	class:exprtk::lexer::parser_helper
store_token_itr_	app/exprtk.h	/^         token_list_itr_t   store_token_itr_;$/;"	m	class:exprtk::lexer::generator
store_type	app/exprtk.h	/^      enum store_type$/;"	g	struct:exprtk::type_store
str	app/exprtk.h	/^         std::string str() const$/;"	f	class:exprtk::details::exprtk_final
str0_base_ptr_	app/exprtk.h	/^         str_base_ptr        str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_base_ptr_	app/exprtk.h	/^         str_base_ptr     str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_base_ptr_	app/exprtk.h	/^         str_base_ptr    str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_base_ptr_	app/exprtk.h	/^         str_base_ptr str0_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_node_ptr_	app/exprtk.h	/^         strvar_node_ptr str0_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	app/exprtk.h	/^         irange_ptr          str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	app/exprtk.h	/^         irange_ptr   str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	app/exprtk.h	/^         range_ptr        str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_range_ptr_	app/exprtk.h	/^         range_ptr    str0_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str0_rng_node_ptr_	app/exprtk.h	/^         str_rng_node_ptr str0_rng_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	app/exprtk.h	/^         str_base_ptr        str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	app/exprtk.h	/^         str_base_ptr     str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	app/exprtk.h	/^         str_base_ptr    str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_base_ptr_	app/exprtk.h	/^         str_base_ptr str1_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_node_ptr_	app/exprtk.h	/^         strvar_node_ptr str1_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	app/exprtk.h	/^         irange_ptr          str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	app/exprtk.h	/^         irange_ptr   str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	app/exprtk.h	/^         range_ptr        str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	app/exprtk.h	/^         range_ptr       str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str1_range_ptr_	app/exprtk.h	/^         range_ptr    str1_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_base_ptr	app/exprtk.h	/^         typedef string_base_node <T>* str_base_ptr;$/;"	t	class:exprtk::details::exprtk_final
str_base_ptr	app/exprtk.h	/^         typedef string_base_node<T>* str_base_ptr;$/;"	t	class:exprtk::details::exprtk_final
str_base_ptr_	app/exprtk.h	/^         str_base_ptr          str_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_base_ptr_	app/exprtk.h	/^         str_base_ptr        str_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_base_ptr_	app/exprtk.h	/^         str_base_ptr str_base_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_function_t	app/exprtk.h	/^         typedef string_function_node<T,StringFunction> str_function_t;$/;"	t	class:exprtk::details::exprtk_final
str_node	app/exprtk.h	/^         strbase_ptr_t str_node;$/;"	m	struct:exprtk::details::range_data_type
str_node	app/exprtk.h	/^         stringvar_node_ptr str_node;$/;"	m	struct:exprtk::parser::scope_element
str_range_ptr_	app/exprtk.h	/^         irange_ptr            str_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_range_ptr_	app/exprtk.h	/^         irange_ptr          str_range_ptr_;$/;"	m	class:exprtk::details::exprtk_final
str_rng_node_ptr	app/exprtk.h	/^         typedef string_range_node<T>* str_rng_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
str_sogens_node	app/exprtk.h	/^         str_sogens_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
str_vararg_node	app/exprtk.h	/^         explicit str_vararg_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
str_xoxr_node	app/exprtk.h	/^         explicit str_xoxr_node(SType0 p0, SType1 p1, RangePack rp1)$/;"	f	class:exprtk::details::exprtk_final
str_xrox_node	app/exprtk.h	/^         explicit str_xrox_node(SType0 p0, SType1 p1, RangePack rp0)$/;"	f	class:exprtk::details::exprtk_final
str_xroxr_node	app/exprtk.h	/^         explicit str_xroxr_node(SType0 p0, SType1 p1, RangePack rp0, RangePack rp1)$/;"	f	class:exprtk::details::exprtk_final
strbase_ptr_t	app/exprtk.h	/^         typedef string_base_node<T>* strbase_ptr_t;$/;"	t	struct:exprtk::details::range_data_type
stream_ptr	app/exprtk.h	/^         void*       stream_ptr;$/;"	m	struct:exprtk::rtl::io::file::details::file_descriptor
strength_reduction_enabled	app/exprtk.h	/^         bool strength_reduction_enabled () const { return enable_strength_reduction_; }$/;"	f	class:exprtk::parser::settings_store
strength_reduction_enabled	app/exprtk.h	/^         inline bool strength_reduction_enabled() const$/;"	f	class:exprtk::parser::expression_generator
strength_reduction_enabled_	app/exprtk.h	/^         bool                     strength_reduction_enabled_;$/;"	m	class:exprtk::parser::expression_generator
stride_	app/exprtk.h	/^         const std::size_t stride_;$/;"	m	class:exprtk::lexer::token_inserter
stride_	app/exprtk.h	/^         const std::size_t stride_;$/;"	m	class:exprtk::lexer::token_joiner
stride_	app/exprtk.h	/^         const std::size_t stride_;$/;"	m	class:exprtk::lexer::token_scanner
string_base_node	app/exprtk.h	/^      class string_base_node$/;"	c	namespace:exprtk::details
string_concat_node	app/exprtk.h	/^         string_concat_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
string_concat_node_t	app/exprtk.h	/^      typedef details::string_concat_node<T>              string_concat_node_t;$/;"	t	class:exprtk::parser
string_function_call	app/exprtk.h	/^         inline expression_node_ptr string_function_call(igeneric_function_t* gf,$/;"	f	class:exprtk::parser::expression_generator
string_function_node	app/exprtk.h	/^         string_function_node(StringFunction* func,$/;"	f	class:exprtk::details::string_function_node
string_function_node	app/exprtk.h	/^      class string_function_node : public generic_function_node<T,StringFunction>,$/;"	c	namespace:exprtk::details
string_function_store	app/exprtk.h	/^            type_store<generic_function_t, generic_function_t> string_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
string_literal_node	app/exprtk.h	/^         explicit string_literal_node(const std::string& v)$/;"	f	class:exprtk::details::exprtk_final
string_literal_node_t	app/exprtk.h	/^      typedef details::string_literal_node<T>             string_literal_node_t;$/;"	t	class:exprtk::parser
string_opr_switch_statements	app/exprtk.h	35979;"	d
string_range_node	app/exprtk.h	/^         explicit string_range_node(std::string& v, const range_t& rp)$/;"	f	class:exprtk::details::exprtk_final
string_range_node_t	app/exprtk.h	/^      typedef details::string_range_node<T>               string_range_node_t;$/;"	t	class:exprtk::parser
string_size_node	app/exprtk.h	/^         explicit string_size_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
string_t	app/exprtk.h	/^         typedef typename generic_type::string_view string_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
string_t	app/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::getline
string_t	app/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::open
string_t	app/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::read
string_t	app/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::io::file::write
string_t	app/exprtk.h	/^      typedef typename generic_type::string_view    string_t;$/;"	t	class:exprtk::rtl::vecops::sort
string_to_real	app/exprtk.h	/^      inline bool string_to_real(Iterator& itr_external, const Iterator end, T& t, numeric::details::real_type_tag)$/;"	f	namespace:exprtk::details
string_to_real	app/exprtk.h	/^      inline bool string_to_real(const std::string& s, T& t)$/;"	f	namespace:exprtk::details
string_to_single_value	utils/ParaReader.h	/^  T string_to_single_value (const string &str)$/;"	f	class:CppUtils::ParaReader
string_to_single_value	utils/oldParaReader.h	/^  T string_to_single_value (const string &str)$/;"	f	class:ParaReader
string_to_type_converter_impl_ref	app/exprtk.h	/^      inline bool string_to_type_converter_impl_ref(Iterator& itr, const Iterator end, T& result)$/;"	f	namespace:exprtk::details
string_varnode_	app/exprtk.h	/^      stringvar_node_t* string_varnode_;$/;"	m	class:exprtk::stringvar_base
string_view	app/exprtk.h	/^      typedef type_view<char> string_view;$/;"	t	struct:exprtk::type_store
stringvar_base	app/exprtk.h	/^      stringvar_base(const std::string& name, stringvar_node_t* svn)$/;"	f	class:exprtk::stringvar_base
stringvar_base	app/exprtk.h	/^   class stringvar_base$/;"	c	namespace:exprtk
stringvar_count	app/exprtk.h	/^      inline std::size_t stringvar_count() const$/;"	f	class:exprtk::symbol_table
stringvar_node	app/exprtk.h	/^         explicit stringvar_node()$/;"	f	class:exprtk::details::exprtk_final
stringvar_node	app/exprtk.h	/^         explicit stringvar_node(std::string& v)$/;"	f	class:exprtk::details::exprtk_final
stringvar_node_ptr	app/exprtk.h	/^         typedef stringvar_node_t*         stringvar_node_ptr;$/;"	t	struct:exprtk::parser::scope_element
stringvar_node_t	app/exprtk.h	/^         typedef typename details::stringvar_node<T> stringvar_node_t;$/;"	t	struct:exprtk::symbol_table::type_store
stringvar_node_t	app/exprtk.h	/^      typedef details::stringvar_node<T>                  stringvar_node_t;$/;"	t	class:exprtk::parser
stringvar_node_t	app/exprtk.h	/^      typedef typename details::stringvar_node<T> stringvar_node_t;$/;"	t	class:exprtk::stringvar_base
stringvar_ptr	app/exprtk.h	/^         typedef typename symbol_table_t::stringvar_ptr stringvar_ptr;$/;"	t	struct:exprtk::parser::symtab_store
stringvar_ptr	app/exprtk.h	/^      typedef stringvar_t*                        stringvar_ptr;$/;"	t	class:exprtk::symbol_table
stringvar_ref	app/exprtk.h	/^      inline std::string& stringvar_ref(const std::string& symbol_name)$/;"	f	class:exprtk::symbol_table
stringvar_size_node	app/exprtk.h	/^         explicit stringvar_size_node()$/;"	f	class:exprtk::details::exprtk_final
stringvar_size_node	app/exprtk.h	/^         explicit stringvar_size_node(std::string& v)$/;"	f	class:exprtk::details::exprtk_final
stringvar_store	app/exprtk.h	/^            type_store<stringvar_t       , std::string       > stringvar_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
stringvar_t	app/exprtk.h	/^      typedef typename details::stringvar_node<T> stringvar_t;$/;"	t	class:exprtk::symbol_table
strvar_node_ptr	app/exprtk.h	/^         typedef stringvar_node   <T>* strvar_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
strvar_node_ptr	app/exprtk.h	/^         typedef stringvar_node  <T>* strvar_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
sub_op	app/exprtk.h	/^      struct sub_op : public opr_base<T>$/;"	s	namespace:exprtk::details
sub_vertex	algorithm/Edge.h	/^  Vertex* sub_vertex() const { return sub_vertex_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
sub_vertex	algorithm/Edge.h	/^  void sub_vertex(Vertex* v) { sub_vertex_ = v; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
substr	app/exprtk.h	/^         inline std::string substr(const std::size_t& begin, const std::size_t& end)$/;"	f	class:exprtk::lexer::generator
sumk	app/exprtk.h	/^      sumk()$/;"	f	class:exprtk::rtl::vecops::sumk
sumk	app/exprtk.h	/^   class sumk : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::vecops
swap_generic_node	app/exprtk.h	/^         swap_generic_node(expression_ptr var0, expression_ptr var1)$/;"	f	class:exprtk::details::exprtk_final
swap_genstrings_node	app/exprtk.h	/^         swap_genstrings_node(expression_ptr branch0,$/;"	f	class:exprtk::details::exprtk_final
swap_node	app/exprtk.h	/^         swap_node(variable_node_ptr var0, variable_node_ptr var1)$/;"	f	class:exprtk::details::exprtk_final
swap_string_node	app/exprtk.h	/^         swap_string_node(expression_ptr branch0, expression_ptr branch1)$/;"	f	class:exprtk::details::exprtk_final
swap_vecvec_node	app/exprtk.h	/^         swap_vecvec_node(expression_ptr branch0,$/;"	f	class:exprtk::details::exprtk_final
switch_impl_1	app/exprtk.h	/^            struct switch_impl_1$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_2	app/exprtk.h	/^            struct switch_impl_2$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_3	app/exprtk.h	/^            struct switch_impl_3$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_4	app/exprtk.h	/^            struct switch_impl_4$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_5	app/exprtk.h	/^            struct switch_impl_5$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_6	app/exprtk.h	/^            struct switch_impl_6$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_impl_7	app/exprtk.h	/^            struct switch_impl_7$/;"	s	struct:exprtk::parser::expression_generator::switch_nodes
switch_n_node	app/exprtk.h	/^         explicit switch_n_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
switch_node	app/exprtk.h	/^         explicit switch_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::switch_node
switch_node	app/exprtk.h	/^      class switch_node : public expression_node<T>$/;"	c	namespace:exprtk::details
switch_node_t	app/exprtk.h	/^      typedef details::switch_node<T>                     switch_node_t;$/;"	t	class:exprtk::parser
switch_nodes	app/exprtk.h	/^         struct switch_nodes$/;"	s	class:exprtk::parser::expression_generator
switch_statement	app/exprtk.h	/^         inline expression_node_ptr switch_statement(Sequence<expression_node_ptr,Allocator>& arg_list, const bool default_statement_present)$/;"	f	class:exprtk::parser::expression_generator
symbol_exists	app/exprtk.h	/^         inline bool symbol_exists(const std::string& symbol) const$/;"	f	struct:exprtk::parser::symtab_store
symbol_exists	app/exprtk.h	/^         inline bool symbol_exists(const std::string& symbol_name) const$/;"	f	struct:exprtk::symbol_table::type_store
symbol_exists	app/exprtk.h	/^      inline bool symbol_exists(const std::string& symbol_name, const bool check_reserved_symb = true) const$/;"	f	class:exprtk::symbol_table
symbol_list_t	app/exprtk.h	/^         typedef std::vector<symbol_t> symbol_list_t;$/;"	t	class:exprtk::parser::dependent_entity_collector
symbol_name_list_	app/exprtk.h	/^         symbol_list_t symbol_name_list_;$/;"	m	class:exprtk::parser::dependent_entity_collector
symbol_replacer	app/exprtk.h	/^         class symbol_replacer : public lexer::token_modifier$/;"	c	namespace:exprtk::lexer::helper
symbol_replacer_	app/exprtk.h	/^      lexer::helper::symbol_replacer            symbol_replacer_;$/;"	m	class:exprtk::parser
symbol_t	app/exprtk.h	/^         typedef std::pair<std::string,symbol_type> symbol_t;$/;"	t	class:exprtk::parser::dependent_entity_collector
symbol_t	app/exprtk.h	/^         typedef typename parser_t::dependent_entity_collector::symbol_t symbol_t;$/;"	t	struct:exprtk::details::collector_helper
symbol_table	app/exprtk.h	/^      inline const symbol_table_t& symbol_table() const$/;"	f	class:exprtk::function_compositor
symbol_table	app/exprtk.h	/^      inline symbol_table_t& symbol_table()$/;"	f	class:exprtk::function_compositor
symbol_table	app/exprtk.h	/^      symbol_table()$/;"	f	class:exprtk::symbol_table
symbol_table	app/exprtk.h	/^      symbol_table(const symbol_table<T>& st)$/;"	f	class:exprtk::symbol_table
symbol_table	app/exprtk.h	/^   class symbol_table$/;"	c	namespace:exprtk
symbol_table	app/size_function.cpp	/^static exprtk::symbol_table<double> symbol_table;$/;"	v	file:
symbol_table_	app/exprtk.h	/^      symbol_table_t symbol_table_;$/;"	m	class:exprtk::function_compositor
symbol_table_list_	app/exprtk.h	/^      symtab_list_t  symbol_table_list_;$/;"	m	class:exprtk::expression
symbol_table_list_t	app/exprtk.h	/^      typedef typename expression<T>::symtab_list_t       symbol_table_list_t;$/;"	t	class:exprtk::parser
symbol_table_t	app/exprtk.h	/^         typedef exprtk::symbol_table<T> symbol_table_t;$/;"	t	struct:exprtk::details::collector_helper
symbol_table_t	app/exprtk.h	/^      typedef exprtk::symbol_table<T>           symbol_table_t;$/;"	t	class:exprtk::function_compositor
symbol_table_t	app/exprtk.h	/^      typedef symbol_table<T>                             symbol_table_t;$/;"	t	class:exprtk::parser
symbol_table_t	app/exprtk.h	/^      typedef symbol_table<T>         symbol_table_t;$/;"	t	struct:exprtk::type_defs
symbol_type	app/exprtk.h	/^      enum symbol_type$/;"	g	class:exprtk::parser
symbol_used	app/exprtk.h	/^      inline bool symbol_used(const std::string& symbol) const$/;"	f	class:exprtk::function_compositor
symbols	app/exprtk.h	/^         inline std::size_t symbols(Sequence<symbol_t,Allocator>& symbols_list)$/;"	f	class:exprtk::parser::dependent_entity_collector
symtab_list_	app/exprtk.h	/^         symbol_table_list_t symtab_list_;$/;"	m	struct:exprtk::parser::symtab_store
symtab_list_t	app/exprtk.h	/^      typedef std::vector<symbol_table<T> > symtab_list_t;$/;"	t	class:exprtk::expression
symtab_store	app/exprtk.h	/^      struct symtab_store$/;"	s	class:exprtk::parser
symtab_store_	app/exprtk.h	/^      symtab_store symtab_store_;$/;"	m	class:exprtk::parser
synthesis_error_	app/exprtk.h	/^      std::string synthesis_error_;$/;"	m	class:exprtk::parser
synthesis_node_type_define	app/exprtk.h	14752;"	d
synthesis_node_type_define	app/exprtk.h	14767;"	d
synthesis_node_type_define	app/exprtk.h	14774;"	d
synthesis_node_type_define	app/exprtk.h	14789;"	d
synthesis_node_type_define	app/exprtk.h	14796;"	d
synthesis_node_type_define	app/exprtk.h	14818;"	d
synthesize_assignment_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_assignment_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_assignment_operation_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_assignment_operation_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_binary_ext_expression	app/exprtk.h	/^         struct synthesize_binary_ext_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_boc_expression	app/exprtk.h	/^         struct synthesize_boc_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_bov_expression	app/exprtk.h	/^         struct synthesize_bov_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_cob_expression	app/exprtk.h	/^         struct synthesize_cob_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_coboc_expression	app/exprtk.h	/^         struct synthesize_coboc_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_cocob_expression	app/exprtk.h	/^         struct synthesize_cocob_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_cocov_expression0	app/exprtk.h	/^         struct synthesize_cocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_cocov_expression1	app/exprtk.h	/^         struct synthesize_cocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_cov_expression	app/exprtk.h	/^         struct synthesize_cov_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_covoc_expression0	app/exprtk.h	/^         struct synthesize_covoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covoc_expression1	app/exprtk.h	/^         struct synthesize_covoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression0	app/exprtk.h	/^         struct synthesize_covocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression1	app/exprtk.h	/^         struct synthesize_covocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression2	app/exprtk.h	/^         struct synthesize_covocov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression3	app/exprtk.h	/^         struct synthesize_covocov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_covocov_expression4	app/exprtk.h	/^         struct synthesize_covocov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_covov_expression0	app/exprtk.h	/^         struct synthesize_covov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covov_expression1	app/exprtk.h	/^         struct synthesize_covov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression0	app/exprtk.h	/^         struct synthesize_covovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression1	app/exprtk.h	/^         struct synthesize_covovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression2	app/exprtk.h	/^         struct synthesize_covovoc_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression3	app/exprtk.h	/^         struct synthesize_covovoc_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovoc_expression4	app/exprtk.h	/^         struct synthesize_covovoc_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression0	app/exprtk.h	/^         struct synthesize_covovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression1	app/exprtk.h	/^         struct synthesize_covovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression2	app/exprtk.h	/^         struct synthesize_covovov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression3	app/exprtk.h	/^         struct synthesize_covovov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_covovov_expression4	app/exprtk.h	/^         struct synthesize_covovov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_csocs_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csocs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csocsr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csocsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csos_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csos_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csosr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csrocs_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csrocs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csrocsr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csrocsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csros_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csros_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_csrosr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_csrosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_expression	app/exprtk.h	/^         inline bool synthesize_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_expression(F* f, expression_node_ptr (&branch)[N])$/;"	f	class:exprtk::parser::expression_generator
synthesize_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_expression(const details::operator_type& operation, expression_node_ptr (&branch)[N])$/;"	f	class:exprtk::parser::expression_generator
synthesize_functor_t	app/exprtk.h	/^         typedef expression_node_ptr (*synthesize_functor_t)(expression_generator<T>&, const details::operator_type& operation, expression_node_ptr (&branch)[2]);$/;"	t	class:exprtk::parser::expression_generator
synthesize_map_	app/exprtk.h	/^         synthesize_map_t         synthesize_map_;$/;"	m	class:exprtk::parser::expression_generator
synthesize_map_t	app/exprtk.h	/^         typedef std::map<std::string,synthesize_functor_t> synthesize_map_t;$/;"	t	class:exprtk::parser::expression_generator
synthesize_null_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_null_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sf3ext_expression	app/exprtk.h	/^         struct synthesize_sf3ext_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_sf4ext_expression	app/exprtk.h	/^         struct synthesize_sf4ext_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_shortcircuit_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_shortcircuit_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_shortcircuit_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_shortcircuit_expression(const details::operator_type&, expression_node_ptr (&)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_socs_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_socs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_socsr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_socsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sos_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_sos_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sos_expression_impl	app/exprtk.h	/^         inline expression_node_ptr synthesize_sos_expression_impl(const details::operator_type& opr, T0 s0, T1 s1)$/;"	f	class:exprtk::parser::expression_generator
synthesize_sosr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_sosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_srocs_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_srocs_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_srocsr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_srocsr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_sros_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_sros_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_srosr_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_srosr_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_str_xoxr_expression_impl	app/exprtk.h	/^         inline expression_node_ptr synthesize_str_xoxr_expression_impl(const details::operator_type& opr,$/;"	f	class:exprtk::parser::expression_generator
synthesize_str_xrox_expression_impl	app/exprtk.h	/^         inline expression_node_ptr synthesize_str_xrox_expression_impl(const details::operator_type& opr,$/;"	f	class:exprtk::parser::expression_generator
synthesize_str_xroxr_expression_impl	app/exprtk.h	/^         inline expression_node_ptr synthesize_str_xroxr_expression_impl(const details::operator_type& opr,$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type& opr, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type&, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_string_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_string_expression(const details::operator_type&, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
synthesize_strogen_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_strogen_expression(const details::operator_type& opr, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_unary_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_unary_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_uv_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_uv_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_uvec_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_uvec_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_uvouv_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_uvouv_expression(const details::operator_type& operation, expression_node_ptr (&branch)[2])$/;"	f	class:exprtk::parser::expression_generator
synthesize_vecarithmetic_operation_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_vecarithmetic_operation_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_veceqineqlogic_operation_expression	app/exprtk.h	/^         inline expression_node_ptr synthesize_veceqineqlogic_operation_expression(const details::operator_type& operation,$/;"	f	class:exprtk::parser::expression_generator
synthesize_vob_expression	app/exprtk.h	/^         struct synthesize_vob_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_voc_expression	app/exprtk.h	/^         struct synthesize_voc_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococ_expression0	app/exprtk.h	/^         struct synthesize_vococ_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococ_expression1	app/exprtk.h	/^         struct synthesize_vococ_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression0	app/exprtk.h	/^         struct synthesize_vococov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression1	app/exprtk.h	/^         struct synthesize_vococov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression2	app/exprtk.h	/^         struct synthesize_vococov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression3	app/exprtk.h	/^         struct synthesize_vococov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vococov_expression4	app/exprtk.h	/^         struct synthesize_vococov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocov_expression0	app/exprtk.h	/^         struct synthesize_vocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocov_expression1	app/exprtk.h	/^         struct synthesize_vocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression0	app/exprtk.h	/^         struct synthesize_vocovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression1	app/exprtk.h	/^         struct synthesize_vocovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression2	app/exprtk.h	/^         struct synthesize_vocovoc_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression3	app/exprtk.h	/^         struct synthesize_vocovoc_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovoc_expression4	app/exprtk.h	/^         struct synthesize_vocovoc_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression0	app/exprtk.h	/^         struct synthesize_vocovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression1	app/exprtk.h	/^         struct synthesize_vocovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression2	app/exprtk.h	/^         struct synthesize_vocovov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression3	app/exprtk.h	/^         struct synthesize_vocovov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vocovov_expression4	app/exprtk.h	/^         struct synthesize_vocovov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vov_expression	app/exprtk.h	/^         struct synthesize_vov_expression$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovoc_expression0	app/exprtk.h	/^         struct synthesize_vovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovoc_expression1	app/exprtk.h	/^         struct synthesize_vovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression0	app/exprtk.h	/^         struct synthesize_vovocov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression1	app/exprtk.h	/^         struct synthesize_vovocov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression2	app/exprtk.h	/^         struct synthesize_vovocov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression3	app/exprtk.h	/^         struct synthesize_vovocov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovocov_expression4	app/exprtk.h	/^         struct synthesize_vovocov_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovov_expression0	app/exprtk.h	/^         struct synthesize_vovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovov_expression1	app/exprtk.h	/^         struct synthesize_vovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression0	app/exprtk.h	/^         struct synthesize_vovovoc_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression1	app/exprtk.h	/^         struct synthesize_vovovoc_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression2	app/exprtk.h	/^         struct synthesize_vovovoc_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression3	app/exprtk.h	/^         struct synthesize_vovovoc_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovoc_expression4	app/exprtk.h	/^         struct synthesize_vovovoc_expression4$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression0	app/exprtk.h	/^         struct synthesize_vovovov_expression0$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression1	app/exprtk.h	/^         struct synthesize_vovovov_expression1$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression2	app/exprtk.h	/^         struct synthesize_vovovov_expression2$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression3	app/exprtk.h	/^         struct synthesize_vovovov_expression3$/;"	s	class:exprtk::parser::expression_generator
synthesize_vovovov_expression4	app/exprtk.h	/^         struct synthesize_vovovov_expression4$/;"	s	class:exprtk::parser::expression_generator
t0	app/exprtk.h	/^         inline T0 t0() const$/;"	f	class:exprtk::details::exprtk_final
t0_	app/exprtk.h	/^         T0 t0_;$/;"	m	class:exprtk::details::exprtk_final
t1	app/exprtk.h	/^         inline T1 t1() const$/;"	f	class:exprtk::details::exprtk_final
t1_	app/exprtk.h	/^         T1 t1_;$/;"	m	class:exprtk::details::exprtk_final
t2	app/exprtk.h	/^         inline T2 t2() const$/;"	f	class:exprtk::details::exprtk_final
t2_	app/exprtk.h	/^         T2 t2_;$/;"	m	class:exprtk::details::exprtk_final
t3	app/exprtk.h	/^         inline T3 t3() const$/;"	f	class:exprtk::details::exprtk_final
t3_	app/exprtk.h	/^         T3 t3_;$/;"	m	class:exprtk::details::exprtk_final
tan_impl	app/exprtk.h	/^            template <typename T> inline T   tan_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
tan_impl	app/exprtk.h	/^            template <typename T> inline T   tan_impl(const T v, real_type_tag) { return std::tan  (v); }$/;"	f	namespace:exprtk::details::numeric::details
tang_	tests/container_test.cpp	/^  Vec2d       tang_;$/;"	m	class:ContainerTests::Edge	file:
tangent	algorithm/Edge.h	/^  const Vec2d& tangent() const { return tang_;}$/;"	f	class:TQMesh::TQAlgorithm::Edge
tangent	tests/container_test.cpp	/^  const Vec2d& tangent() const { return tang_;}$/;"	f	class:ContainerTests::Edge
tanh_impl	app/exprtk.h	/^            template <typename T> inline T  tanh_impl(const T  , int_type_tag) { return std::numeric_limits<T>::quiet_NaN(); }$/;"	f	namespace:exprtk::details::numeric::details
tanh_impl	app/exprtk.h	/^            template <typename T> inline T  tanh_impl(const T v, real_type_tag) { return std::tanh (v); }$/;"	f	namespace:exprtk::details::numeric::details
temp_	app/exprtk.h	/^         vector_holder_ptr temp_;$/;"	m	class:exprtk::details::exprtk_final
temp_vec_node_	app/exprtk.h	/^         vector_node_ptr   temp_vec_node_;$/;"	m	class:exprtk::details::exprtk_final
test	app/exprtk.h	/^            static inline bool test(const PtrType, const void*)$/;"	f	struct:exprtk::symbol_table::type_store::ptr_match
test	app/exprtk.h	/^            static inline bool test(const variable_node_t* p, const void* ptr)$/;"	f	struct:exprtk::symbol_table::type_store::ptr_match
tfunc_t	app/exprtk.h	/^         typedef T (*tfunc_t)(Type t0, Type t1, Type t2);$/;"	t	struct:exprtk::details::functor_t
tfunc_t	app/exprtk.h	/^         typedef typename functor_t::tfunc_t    tfunc_t;$/;"	t	class:exprtk::details::exprtk_final
third_derivative	app/exprtk.h	/^   inline T third_derivative(const expression<T>& e,$/;"	f	namespace:exprtk
tie_array	app/exprtk.h	/^         struct tie_array$/;"	s	struct:exprtk::symbol_table::type_store
tie_stddeq	app/exprtk.h	/^         struct tie_stddeq$/;"	s	struct:exprtk::symbol_table::type_store
tie_stdvec	app/exprtk.h	/^         struct tie_stdvec$/;"	s	struct:exprtk::symbol_table::type_store
tie_vecview	app/exprtk.h	/^         struct tie_vecview$/;"	s	struct:exprtk::symbol_table::type_store
time	app/exprtk.h	/^      inline double time() const$/;"	f	class:exprtk::timer
timer	app/exprtk.h	/^      timer()$/;"	f	class:exprtk::timer
timer	app/exprtk.h	/^   class timer$/;"	c	namespace:exprtk
times	utils/Timer.h	/^  const Timevector& times() const { return tv_; }$/;"	f	class:TQMesh::TQUtils::Timer
tm_const_itr_t	app/exprtk.h	/^         typedef typename type_map_t::const_iterator tm_const_itr_t;$/;"	t	struct:exprtk::symbol_table::type_store
tm_itr_t	app/exprtk.h	/^         typedef typename type_map_t::iterator tm_itr_t;$/;"	t	struct:exprtk::symbol_table::type_store
tmp_vs_t	app/exprtk.h	/^         typedef std::vector<T>                 tmp_vs_t;$/;"	t	class:exprtk::details::generic_function_node
to_int	app/exprtk.h	/^         inline bool to_int(IntType& i) const$/;"	f	struct:exprtk::type_store::scalar_view
to_int32	app/exprtk.h	/^         inline int to_int32(const T v)$/;"	f	namespace:exprtk::details::numeric
to_int32_impl	app/exprtk.h	/^            inline int to_int32_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
to_int64	app/exprtk.h	/^         inline _int64_t to_int64(const T v)$/;"	f	namespace:exprtk::details::numeric
to_int64_impl	app/exprtk.h	/^            inline _int64_t to_int64_impl(const T v, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
to_str	app/exprtk.h	/^         inline std::string to_str(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
to_str	app/exprtk.h	/^         static inline std::string to_str(token_type t)$/;"	f	struct:exprtk::lexer::token
to_str	app/exprtk.h	/^      inline std::string to_str(const operator_type opr)$/;"	f	namespace:exprtk::details
to_str	app/exprtk.h	/^      inline std::string to_str(error_mode mode)$/;"	f	namespace:exprtk::parser_error
to_str	app/exprtk.h	/^      inline std::string to_str(int i)$/;"	f	namespace:exprtk::details
to_str	app/exprtk.h	/^      inline std::string to_str(std::size_t i)$/;"	f	namespace:exprtk::details
to_str	app/exprtk.h	/^   inline std::string to_str(const StringView& view)$/;"	f	namespace:exprtk
to_uint	app/exprtk.h	/^         inline bool to_uint(UIntType& u) const$/;"	f	struct:exprtk::type_store::scalar_view
token	app/exprtk.h	/^         lexer::token token;$/;"	m	struct:exprtk::parser_error::type
token	app/exprtk.h	/^         token()$/;"	f	struct:exprtk::lexer::token
token	app/exprtk.h	/^      struct token$/;"	s	namespace:exprtk::lexer
token_advance_mode	app/exprtk.h	/^         enum token_advance_mode$/;"	g	class:exprtk::lexer::parser_helper
token_inserter	app/exprtk.h	/^         explicit token_inserter(const std::size_t& stride)$/;"	f	class:exprtk::lexer::token_inserter
token_inserter	app/exprtk.h	/^      class token_inserter : public helper_interface$/;"	c	namespace:exprtk::lexer
token_inserter_empty_body	app/exprtk.h	3154;"	d
token_inserter_empty_body	app/exprtk.h	3174;"	d
token_inserter_list	app/exprtk.h	/^            std::vector<lexer::token_inserter*> token_inserter_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_is	app/exprtk.h	/^         inline bool token_is(const token_t::token_type& ttype, const token_advance_mode mode = e_advance)$/;"	f	class:exprtk::lexer::parser_helper
token_is	app/exprtk.h	/^         inline bool token_is(const token_t::token_type& ttype,$/;"	f	class:exprtk::lexer::parser_helper
token_itr_	app/exprtk.h	/^         token_list_itr_t   token_itr_;$/;"	m	class:exprtk::lexer::generator
token_joiner	app/exprtk.h	/^         explicit token_joiner(const std::size_t& stride)$/;"	f	class:exprtk::lexer::token_joiner
token_joiner	app/exprtk.h	/^      class token_joiner : public helper_interface$/;"	c	namespace:exprtk::lexer
token_joiner_list	app/exprtk.h	/^            std::vector<lexer::token_joiner*>   token_joiner_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_list_	app/exprtk.h	/^         token_list_t       token_list_;$/;"	m	class:exprtk::lexer::generator
token_list_itr_t	app/exprtk.h	/^         typedef token_list_t::iterator token_list_itr_t;$/;"	t	class:exprtk::lexer::generator
token_list_t	app/exprtk.h	/^         typedef std::vector<token_t> token_list_t;$/;"	t	class:exprtk::lexer::generator
token_modifier	app/exprtk.h	/^      class token_modifier : public helper_interface$/;"	c	namespace:exprtk::lexer
token_modifier_list	app/exprtk.h	/^            std::vector<lexer::token_modifier*> token_modifier_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_pair_t	app/exprtk.h	/^            typedef std::pair<lexer::token::token_type,lexer::token::token_type> token_pair_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator
token_scanner	app/exprtk.h	/^         explicit token_scanner(const std::size_t& stride)$/;"	f	class:exprtk::lexer::token_scanner
token_scanner	app/exprtk.h	/^      class token_scanner : public helper_interface$/;"	c	namespace:exprtk::lexer
token_scanner_list	app/exprtk.h	/^            std::vector<lexer::token_scanner*>  token_scanner_list;$/;"	m	struct:exprtk::lexer::helper::helper_assembly
token_t	app/exprtk.h	/^            typedef lexer::token::token_type token_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator_3tokens
token_t	app/exprtk.h	/^         typedef token     token_t;$/;"	t	class:exprtk::lexer::parser_helper
token_t	app/exprtk.h	/^         typedef token token_t;$/;"	t	class:exprtk::lexer::generator
token_t	app/exprtk.h	/^      typedef lexer::token                                token_t;$/;"	t	class:exprtk::parser
token_triplet_t	app/exprtk.h	/^            typedef std::pair<token_t,std::pair<token_t,token_t> > token_triplet_t;$/;"	t	class:exprtk::lexer::helper::sequence_validator_3tokens
token_type	app/exprtk.h	/^         enum token_type$/;"	g	struct:exprtk::lexer::token
tri_quad_intersection	utils/geometry.h	/^static inline bool tri_quad_intersection(const Vec2<T>& p1,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
tri_tri_intersection	utils/geometry.h	/^static inline bool tri_tri_intersection(const Vec2<T>& p1,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
triangles	algorithm/Mesh.h	/^  Triangles& triangles() { return tris_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
triangles	algorithm/Mesh.h	/^  const Triangles& triangles() const { return tris_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
triangulate	algorithm/Mesh.h	/^  bool triangulate()$/;"	f	class:TQMesh::TQAlgorithm::Mesh
trinary_functor_t	app/exprtk.h	/^         typedef typename functor_t::tfunc_t    trinary_functor_t;$/;"	t	struct:exprtk::details::opr_base
trinary_functor_t	app/exprtk.h	/^         typedef typename functor_t::tfunc_t trinary_functor_t;$/;"	t	struct:exprtk::details::sf_base
trinary_functor_t	app/exprtk.h	/^      typedef typename functor_t::tfunc_t    trinary_functor_t;$/;"	t	class:exprtk::parser
trinary_node	app/exprtk.h	/^         trinary_node(const operator_type& opr,$/;"	f	class:exprtk::details::trinary_node
trinary_node	app/exprtk.h	/^      class trinary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
trinary_node_t	app/exprtk.h	/^      typedef details::trinary_node<T>                    trinary_node_t;$/;"	t	class:exprtk::parser
trinary_op_map_t	app/exprtk.h	/^      typedef std::map<operator_t, trinary_functor_t> trinary_op_map_t;$/;"	t	class:exprtk::parser
tris_	algorithm/Mesh.h	/^  Triangles  tris_;$/;"	m	class:TQMesh::TQAlgorithm::Mesh
trunc_impl	app/exprtk.h	/^            template <typename T> inline T trunc_impl(const T v, int_type_tag) { return v;             }$/;"	f	namespace:exprtk::details::numeric::details
trunc_impl	app/exprtk.h	/^            template <typename T> inline T trunc_impl(const T v, real_type_tag) { return T(static_cast<long long>(v));    }$/;"	f	namespace:exprtk::details::numeric::details
ts_	app/exprtk.h	/^         type_store_t& ts_;$/;"	m	struct:exprtk::type_store::type_view
ts_list_t	app/exprtk.h	/^      typedef std::vector<type_store_t> ts_list_t;$/;"	t	class:exprtk::results_context
tv_	utils/Timer.h	/^  Timevector tv_;$/;"	m	class:TQMesh::TQUtils::Timer
type	app/exprtk.h	/^               typedef unknown_type_tag type;$/;"	t	struct:exprtk::details::numeric::details::number_type
type	app/exprtk.h	/^            data_type   type;$/;"	m	struct:exprtk::expression::control_block::data_pack
type	app/exprtk.h	/^         element_type type;$/;"	m	struct:exprtk::parser::scope_element
type	app/exprtk.h	/^         inline virtual node_type type() const$/;"	f	class:exprtk::details::expression_node
type	app/exprtk.h	/^         operator_type type;$/;"	m	struct:exprtk::details::base_operation_t
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_add; }$/;"	f	struct:exprtk::details::add_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_and; }$/;"	f	struct:exprtk::details::and_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_div; }$/;"	f	struct:exprtk::details::div_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_eq; }$/;"	f	struct:exprtk::details::eq_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_eq; }$/;"	f	struct:exprtk::details::equal_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_gt; }$/;"	f	struct:exprtk::details::gt_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_gte; }$/;"	f	struct:exprtk::details::gte_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_ilike; }$/;"	f	struct:exprtk::details::ilike_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_in; }$/;"	f	struct:exprtk::details::in_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_inranges; }$/;"	f	struct:exprtk::details::inrange_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_like; }$/;"	f	struct:exprtk::details::like_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_lt; }$/;"	f	struct:exprtk::details::lt_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_lte; }$/;"	f	struct:exprtk::details::lte_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_mod; }$/;"	f	struct:exprtk::details::mod_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_mul; }$/;"	f	struct:exprtk::details::mul_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nand; }$/;"	f	struct:exprtk::details::nand_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_ne; }$/;"	f	struct:exprtk::details::ne_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }$/;"	f	struct:exprtk::details::nor_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }$/;"	f	struct:exprtk::details::xnor_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }$/;"	f	struct:exprtk::details::xor_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_or; }$/;"	f	struct:exprtk::details::or_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_pow; }$/;"	f	struct:exprtk::details::pow_op
type	app/exprtk.h	/^         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_sub; }$/;"	f	struct:exprtk::details::sub_op
type	app/exprtk.h	/^         token_type type;$/;"	m	struct:exprtk::lexer::token
type	app/exprtk.h	/^         type()$/;"	f	struct:exprtk::parser_error::type
type	app/exprtk.h	/^         typedef const T&                       type;$/;"	t	struct:exprtk::function_compositor::base_func
type	app/exprtk.h	/^         typedef vec_data_store<T> type;$/;"	t	class:exprtk::details::vec_data_store
type	app/exprtk.h	/^      store_type  type;$/;"	m	struct:exprtk::type_store
type	app/exprtk.h	/^      struct type$/;"	s	namespace:exprtk::parser_error
type	app/exprtk.h	/^      typedef T type;$/;"	t	class:exprtk::igeneric_function
type	app/exprtk.h	/^      typedef const T& type;$/;"	t	class:exprtk::function_compositor
type0	app/exprtk.h	/^         typedef details::T0oT1<T, T0, T1> type0;$/;"	t	struct:exprtk::details::T0oT1_define
type0	app/exprtk.h	/^         typedef details::T0oT1oT2<T, T0, T1, T2, typename T0oT1oT2process<T>::mode0> type0;$/;"	t	struct:exprtk::details::T0oT1oT2_define
type0	app/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode0> type0;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type1	app/exprtk.h	/^         typedef details::T0oT1oT2<T, T0, T1, T2, typename T0oT1oT2process<T>::mode1> type1;$/;"	t	struct:exprtk::details::T0oT1oT2_define
type1	app/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode1> type1;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type2	app/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode2> type2;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type3	app/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode3> type3;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type4	app/exprtk.h	/^         typedef details::T0oT1oT2oT3<T, T0, T1, T2, T3, typename T0oT1oT20T3process<T>::mode4> type4;$/;"	t	struct:exprtk::details::T0oT1oT2oT3_define
type_check_enabled	app/exprtk.h	/^         bool type_check_enabled;$/;"	m	struct:exprtk::parser::parser_state
type_defs	app/exprtk.h	/^   struct type_defs$/;"	s	namespace:exprtk
type_id	app/exprtk.h	/^         std::string type_id() const$/;"	f	class:exprtk::details::exprtk_final
type_map_t	app/exprtk.h	/^         typedef std::map<std::string,type_pair_t,details::ilesscompare> type_map_t;$/;"	t	struct:exprtk::symbol_table::type_store
type_pair_t	app/exprtk.h	/^         typedef std::pair<bool,type_ptr> type_pair_t;$/;"	t	struct:exprtk::symbol_table::type_store
type_ptr	app/exprtk.h	/^         typedef type_t* type_ptr;$/;"	t	struct:exprtk::symbol_table::type_store
type_ref	app/exprtk.h	/^         inline RawType& type_ref(const std::string& symbol_name)$/;"	f	struct:exprtk::symbol_table::type_store
type_size	app/exprtk.h	/^         std::size_t   type_size;$/;"	m	struct:exprtk::details::range_data_type
type_store	app/exprtk.h	/^         type_store()$/;"	f	struct:exprtk::symbol_table::type_store
type_store	app/exprtk.h	/^      struct type_store$/;"	s	class:exprtk::symbol_table
type_store	app/exprtk.h	/^      type_store()$/;"	f	struct:exprtk::type_store
type_store	app/exprtk.h	/^   struct type_store$/;"	s	namespace:exprtk
type_store_t	app/exprtk.h	/^         typedef type_store<T>       type_store_t;$/;"	t	class:exprtk::details::generic_function_node
type_store_t	app/exprtk.h	/^         typedef type_store<T> type_store_t;$/;"	t	struct:exprtk::type_store::scalar_view
type_store_t	app/exprtk.h	/^         typedef type_store<T> type_store_t;$/;"	t	struct:exprtk::type_store::type_view
type_store_t	app/exprtk.h	/^      typedef type_store<T> type_store_t;$/;"	t	class:exprtk::results_context
type_t	app/exprtk.h	/^         typedef Type type_t;$/;"	t	struct:exprtk::symbol_table::type_store
type_view	app/exprtk.h	/^         explicit type_view(const type_store_t& ts)$/;"	f	struct:exprtk::type_store::type_view
type_view	app/exprtk.h	/^         explicit type_view(type_store_t& ts)$/;"	f	struct:exprtk::type_store::type_view
type_view	app/exprtk.h	/^      struct type_view$/;"	s	struct:exprtk::type_store
typestore_list_	app/exprtk.h	/^         mutable typestore_list_t typestore_list_;$/;"	m	class:exprtk::details::generic_function_node
typestore_list_t	app/exprtk.h	/^         typedef std::vector<type_store_t>      typestore_list_t;$/;"	t	class:exprtk::details::generic_function_node
u0	app/exprtk.h	/^         inline ufunc_t u0()$/;"	f	class:exprtk::details::exprtk_final
u0_	app/exprtk.h	/^         const ufunc_t u0_;$/;"	m	class:exprtk::details::exprtk_final
u1	app/exprtk.h	/^         inline ufunc_t u1()$/;"	f	class:exprtk::details::exprtk_final
u1_	app/exprtk.h	/^         const ufunc_t u1_;$/;"	m	class:exprtk::details::exprtk_final
uchar_cptr	app/exprtk.h	/^      typedef uchar_t const*         uchar_cptr;$/;"	t	namespace:exprtk::details
uchar_ptr	app/exprtk.h	/^      typedef uchar_t*               uchar_ptr;$/;"	t	namespace:exprtk::details
uchar_t	app/exprtk.h	/^      typedef unsigned char          uchar_t;$/;"	t	namespace:exprtk::details
ufunc_t	app/exprtk.h	/^         typedef T (*ufunc_t)(Type t0);$/;"	t	struct:exprtk::details::functor_t
ufunc_t	app/exprtk.h	/^         typedef typename functor_t::ufunc_t    ufunc_t;$/;"	t	class:exprtk::details::exprtk_final
unary_branch_node	app/exprtk.h	/^         explicit unary_branch_node(expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
unary_functor_t	app/exprtk.h	/^         typedef typename functor_t::ufunc_t    unary_functor_t;$/;"	t	struct:exprtk::details::opr_base
unary_functor_t	app/exprtk.h	/^         typedef typename functor_t::ufunc_t unary_functor_t;$/;"	t	struct:exprtk::details::sf_base
unary_functor_t	app/exprtk.h	/^      typedef typename functor_t::ufunc_t    unary_functor_t;$/;"	t	class:exprtk::parser
unary_node	app/exprtk.h	/^         unary_node(const operator_type& opr, expression_ptr branch)$/;"	f	class:exprtk::details::unary_node
unary_node	app/exprtk.h	/^      class unary_node : public expression_node<T>$/;"	c	namespace:exprtk::details
unary_node_t	app/exprtk.h	/^      typedef details::unary_node<T>                      unary_node_t;$/;"	t	class:exprtk::parser
unary_op_map_	app/exprtk.h	/^         unary_op_map_t*          unary_op_map_;$/;"	m	class:exprtk::parser::expression_generator
unary_op_map_	app/exprtk.h	/^      unary_op_map_t unary_op_map_;$/;"	m	class:exprtk::parser
unary_op_map_t	app/exprtk.h	/^      typedef std::map<operator_t, unary_functor_t  > unary_op_map_t;$/;"	t	class:exprtk::parser
unary_opr_switch_statements	app/exprtk.h	28793;"	d
unary_opr_switch_statements	app/exprtk.h	35975;"	d
unary_optimisable	app/exprtk.h	/^         inline bool unary_optimisable(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
unary_variable_node	app/exprtk.h	/^         explicit unary_variable_node(const T& var)$/;"	f	class:exprtk::details::exprtk_final
unary_vector_node	app/exprtk.h	/^         unary_vector_node(const operator_type& opr, expression_ptr branch0)$/;"	f	class:exprtk::details::exprtk_final
unfix_vertices	algorithm/Smoother.h	/^  void unfix_vertices(Mesh& mesh) $/;"	f	class:TQMesh::TQAlgorithm::Smoother
unit_vector	utils/Vec2.h	/^inline Vec2<T> unit_vector(const Vec2<T>& u)$/;"	f	namespace:TQMesh::TQUtils
unknown_symbol_resolver	app/exprtk.h	/^         unknown_symbol_resolver(const usr_mode m = e_usrmode_default)$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
unknown_symbol_resolver	app/exprtk.h	/^      struct unknown_symbol_resolver$/;"	s	class:exprtk::parser
unknown_symbol_resolver_	app/exprtk.h	/^      unknown_symbol_resolver* unknown_symbol_resolver_;$/;"	m	class:exprtk::parser
unknown_type_tag	app/exprtk.h	/^            struct unknown_type_tag { unknown_type_tag() {} };$/;"	f	struct:exprtk::details::numeric::details::unknown_type_tag
unknown_type_tag	app/exprtk.h	/^            struct unknown_type_tag { unknown_type_tag() {} };$/;"	s	namespace:exprtk::details::numeric::details
update	app/exprtk.h	/^         inline void update(const T& v0)$/;"	f	struct:exprtk::function_compositor::base_func
update	app/exprtk.h	/^         inline void update(const T& v0, const T& v1)$/;"	f	struct:exprtk::function_compositor::base_func
update	app/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2)$/;"	f	struct:exprtk::function_compositor::base_func
update	app/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2, const T& v3)$/;"	f	struct:exprtk::function_compositor::base_func
update	app/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2, const T& v3, const T& v4)$/;"	f	struct:exprtk::function_compositor::base_func
update	app/exprtk.h	/^         inline void update(const T& v0, const T& v1, const T& v2, const T& v3, const T& v4, const T& v5)$/;"	f	struct:exprtk::function_compositor::base_func
update	utils/ProgressBar.h	/^  void update(int prog) $/;"	f	class:TQMesh::TQUtils::ProgressBar
update_error	app/exprtk.h	/^      inline bool update_error(type& error, const std::string& expression)$/;"	f	namespace:exprtk::parser_error
update_front	algorithm/Mesh.h	/^  void update_front( Edge& base, Vertex& v_new, Triangle& t_new )$/;"	f	class:TQMesh::TQAlgorithm::Mesh
upper_bound	app/exprtk.h	/^            int upper_bound;$/;"	m	struct:exprtk::details::loop_unroll::details
upright	utils/QTree.h	/^  const Vec2<V>& upright() const { return upright_; }$/;"	f	class:TQMesh::TQUtils::QTree
usr_mode	app/exprtk.h	/^         enum usr_mode$/;"	g	struct:exprtk::parser::unknown_symbol_resolver
usr_symbol_type	app/exprtk.h	/^         enum usr_symbol_type$/;"	g	struct:exprtk::parser::unknown_symbol_resolver
usr_t	app/exprtk.h	/^         typedef typename parser_t::unknown_symbol_resolver usr_t;$/;"	t	struct:exprtk::details::collector_helper
uv_base_node	app/exprtk.h	/^      class uv_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
uvouv_node	app/exprtk.h	/^         explicit uvouv_node(const T& var0,const T& var1,$/;"	f	class:exprtk::details::exprtk_final
uvouv_optimisable	app/exprtk.h	/^         inline bool uvouv_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
v	app/exprtk.h	/^         varref_t v;$/;"	m	struct:exprtk::function_compositor::base_func
v0	app/exprtk.h	/^         inline const T& v0()$/;"	f	class:exprtk::details::exprtk_final
v0_	app/exprtk.h	/^         const T& v0_;$/;"	m	class:exprtk::details::exprtk_final
v1	algorithm/Edge.h	/^  Vertex& v1() { return *v1_; };$/;"	f	class:TQMesh::TQAlgorithm::Edge
v1	algorithm/Edge.h	/^  const Vertex& v1() const { return *v1_; };$/;"	f	class:TQMesh::TQAlgorithm::Edge
v1	algorithm/Quad.h	/^  Vertex& v1() { return *v_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v1	algorithm/Quad.h	/^  const Vertex& v1() const { return *v_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v1	algorithm/Triangle.h	/^  Vertex& v1() { return *v_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
v1	algorithm/Triangle.h	/^  const Vertex& v1() const { return *v_[0]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
v1	app/exprtk.h	/^         inline const T& v1()$/;"	f	class:exprtk::details::exprtk_final
v1	tests/container_test.cpp	/^  Vertex& v1() { return *v1_; };$/;"	f	class:ContainerTests::Edge
v1	tests/container_test.cpp	/^  const Vertex& v1() const { return *v1_; };$/;"	f	class:ContainerTests::Edge
v1_	app/exprtk.h	/^         const T& v1_;$/;"	m	class:exprtk::details::exprtk_final
v1_	tests/container_test.cpp	/^  Vertex*     v1_;$/;"	m	class:ContainerTests::Edge	file:
v2	algorithm/Edge.h	/^  Vertex& v2() { return *v2_; };$/;"	f	class:TQMesh::TQAlgorithm::Edge
v2	algorithm/Edge.h	/^  const Vertex& v2() const { return *v2_; };$/;"	f	class:TQMesh::TQAlgorithm::Edge
v2	algorithm/Quad.h	/^  Vertex& v2() { return *v_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v2	algorithm/Quad.h	/^  const Vertex& v2() const { return *v_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v2	algorithm/Triangle.h	/^  Vertex& v2() { return *v_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
v2	algorithm/Triangle.h	/^  const Vertex& v2() const { return *v_[1]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
v2	tests/container_test.cpp	/^  Vertex& v2() { return *v2_; };$/;"	f	class:ContainerTests::Edge
v2	tests/container_test.cpp	/^  const Vertex& v2() const { return *v2_; };$/;"	f	class:ContainerTests::Edge
v2_	app/exprtk.h	/^         const T& v2_;$/;"	m	class:exprtk::details::exprtk_final
v2_	tests/container_test.cpp	/^  Vertex*     v2_;$/;"	m	class:ContainerTests::Edge	file:
v3	algorithm/Quad.h	/^  Vertex& v3() { return *v_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v3	algorithm/Quad.h	/^  const Vertex& v3() const { return *v_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v3	algorithm/Triangle.h	/^  Vertex& v3() { return *v_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
v3	algorithm/Triangle.h	/^  const Vertex& v3() const { return *v_[2]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
v3_	app/exprtk.h	/^         const T& v3_;$/;"	m	class:exprtk::details::exprtk_final
v4	algorithm/Quad.h	/^  Vertex& v4() { return *v_[3]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v4	algorithm/Quad.h	/^  const Vertex& v4() const { return *v_[3]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
v_	app/exprtk.h	/^         T& v_;$/;"	m	struct:exprtk::type_store::scalar_view
v_	app/exprtk.h	/^         branch_t                    v_;$/;"	m	class:exprtk::details::exprtk_final
v_	app/exprtk.h	/^         const T& v_;$/;"	m	class:exprtk::details::exprtk_final
v_	app/exprtk.h	/^         std::deque<std::string> v_;$/;"	m	struct:exprtk::function_compositor::function
v_	app/exprtk.h	/^         std::size_t& v_;$/;"	m	struct:exprtk::parser::scoped_inc_dec
valid	app/exprtk.h	/^         inline bool valid() const$/;"	f	struct:exprtk::parser::symtab_store
valid	app/exprtk.h	/^      bool valid() const$/;"	f	class:exprtk::stringvar_base
valid	app/exprtk.h	/^      inline bool valid() const$/;"	f	class:exprtk::symbol_table
valid	app/exprtk.h	/^      inline bool valid(const std::string& name,$/;"	f	class:exprtk::function_compositor
valid_base_operation	app/exprtk.h	/^      inline bool valid_base_operation(const std::string& symbol) const$/;"	f	class:exprtk::parser
valid_exponent	app/exprtk.h	/^      inline bool valid_exponent(const int exponent, numeric::details::real_type_tag)$/;"	f	namespace:exprtk::details
valid_function	app/exprtk.h	/^      inline bool valid_function(const std::string& symbol) const$/;"	f	class:exprtk::symbol_table
valid_function_name	app/exprtk.h	/^         inline bool valid_function_name(const std::string& symbol) const$/;"	f	struct:exprtk::parser::symtab_store
valid_operator	app/exprtk.h	/^         inline bool valid_operator(const details::operator_type& operation, binary_functor_t& bop)$/;"	f	class:exprtk::parser::expression_generator
valid_operator	app/exprtk.h	/^         inline bool valid_operator(const details::operator_type& operation, unary_functor_t& uop)$/;"	f	class:exprtk::parser::expression_generator
valid_string_operation	app/exprtk.h	/^         inline bool valid_string_operation(const details::operator_type& operation) const$/;"	f	class:exprtk::parser::expression_generator
valid_string_operation	app/exprtk.h	/^         inline bool valid_string_operation(const details::operator_type&) const$/;"	f	class:exprtk::parser::expression_generator
valid_symbol	app/exprtk.h	/^         inline bool valid_symbol(const std::string& symbol) const$/;"	f	struct:exprtk::parser::symtab_store
valid_symbol	app/exprtk.h	/^      inline bool valid_symbol(const std::string& symbol, const bool check_reserved_symb = true) const$/;"	f	class:exprtk::symbol_table
valid_vararg_operation	app/exprtk.h	/^      inline bool valid_vararg_operation(const std::string& symbol) const$/;"	f	class:exprtk::parser
value	app/exprtk.h	/^         T value;$/;"	m	class:exprtk::details::break_exception
value	app/exprtk.h	/^         inline virtual T value() const$/;"	f	class:exprtk::details::expression_node
value	app/exprtk.h	/^         inline virtual T value(expression_t& e)$/;"	f	struct:exprtk::function_compositor::base_func
value	app/exprtk.h	/^         std::string value;$/;"	m	struct:exprtk::lexer::token
value	app/exprtk.h	/^      inline T value() const$/;"	f	class:exprtk::expression
value	app/exprtk.h	/^      inline T value(const T& t)$/;"	f	namespace:exprtk::details
value	app/exprtk.h	/^      inline T value(const T* t)$/;"	f	namespace:exprtk::details
value	app/exprtk.h	/^      inline T value(details::expression_node<T>* n)$/;"	f	namespace:exprtk::details
value	app/exprtk.h	/^      inline T value(std::pair<details::expression_node<T>*,bool> n)$/;"	f	namespace:exprtk::details
value	utils/oldParaReader.h	/^  T& value() { return value_; }$/;"	f	class:ScalarParameter
value	utils/oldParaReader.h	/^  T& value(size_t i) { return values_[i]; }$/;"	f	class:ListParameter
value	utils/oldParaReader.h	/^  const T& value() const { return value_; }$/;"	f	class:ScalarParameter
value	utils/oldParaReader.h	/^  const T& value(size_t i) const { return values_[i]; }$/;"	f	class:ListParameter
value	utils/oldParaReader.h	/^  void value(T val) { value_ = val; };$/;"	f	class:ScalarParameter
value_	app/exprtk.h	/^         T* value_;$/;"	m	class:exprtk::details::exprtk_final
value_	app/exprtk.h	/^         const T value_;$/;"	m	class:exprtk::details::exprtk_final
value_	app/exprtk.h	/^         const std::string value_;$/;"	m	class:exprtk::details::exprtk_final
value_	app/exprtk.h	/^         mutable std::string value_;$/;"	m	class:exprtk::details::exprtk_final
value_	app/exprtk.h	/^         std::string* value_;$/;"	m	class:exprtk::details::exprtk_final
value_	utils/oldParaReader.h	/^  T value_;$/;"	m	class:ScalarParameter
value_at	app/exprtk.h	/^            value_ptr value_at(const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::array_vector_impl
value_at	app/exprtk.h	/^            value_ptr value_at(const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::sequence_vector_impl
value_at	app/exprtk.h	/^            value_ptr value_at(const std::size_t& index) const$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
value_list_	app/exprtk.h	/^         mutable std::vector<T> value_list_;$/;"	m	class:exprtk::details::exprtk_final
value_ptr	app/exprtk.h	/^         typedef value_type* value_ptr;$/;"	t	class:exprtk::details::vector_holder
value_t	app/exprtk.h	/^         typedef T value_t;$/;"	t	struct:exprtk::type_store::scalar_view
value_t	app/exprtk.h	/^         typedef ViewType      value_t;$/;"	t	struct:exprtk::type_store::type_view
value_type	app/exprtk.h	/^         typedef T value_type;$/;"	t	class:exprtk::details::expression_node
value_type	app/exprtk.h	/^         typedef T value_type;$/;"	t	class:exprtk::details::exprtk_final
value_type	app/exprtk.h	/^         typedef Type value_type;$/;"	t	class:exprtk::details::vector_holder
values	utils/oldParaReader.h	/^  void values(std::vector<T> v) { values_ = std::move(v); }$/;"	f	class:ListParameter
values_	utils/ParaReader.h	/^    , values_(n,T{})$/;"	f	class:CppUtils::Parameter
values_	utils/ParaReader.h	/^  std::vector<T> values_;$/;"	m	class:CppUtils::Parameter
values_	utils/oldParaReader.h	/^  std::vector<T> values_;$/;"	m	class:ListParameter
var	app/exprtk.h	/^         inline function& var(const std::string& v)$/;"	f	struct:exprtk::function_compositor::function
var0_	app/exprtk.h	/^         ivariable_ptr var0_;$/;"	m	class:exprtk::details::exprtk_final
var0_	app/exprtk.h	/^         variable_node_ptr var0_;$/;"	m	class:exprtk::details::exprtk_final
var1_	app/exprtk.h	/^         ivariable_ptr var1_;$/;"	m	class:exprtk::details::exprtk_final
var1_	app/exprtk.h	/^         variable_node_ptr var1_;$/;"	m	class:exprtk::details::exprtk_final
var_node	app/exprtk.h	/^         expression_node_ptr var_node;$/;"	m	struct:exprtk::parser::scope_element
var_node_ptr_	app/exprtk.h	/^         variable_node<T>* var_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
var_range	app/exprtk.h	/^         bool var_range() const$/;"	f	struct:exprtk::details::range_pack
var_t	app/exprtk.h	/^         typedef std::vector<T>                var_t;$/;"	t	struct:exprtk::function_compositor::base_func
vararg_add_op	app/exprtk.h	/^      struct vararg_add_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_avg_op	app/exprtk.h	/^      struct vararg_avg_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_function	app/exprtk.h	/^         inline expression_node_ptr vararg_function(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
vararg_function_call	app/exprtk.h	/^         inline expression_node_ptr vararg_function_call(ivararg_function_t* vaf,$/;"	f	class:exprtk::parser::expression_generator
vararg_function_node	app/exprtk.h	/^         vararg_function_node(VarArgFunction*  func,$/;"	f	class:exprtk::details::exprtk_final
vararg_function_ptr	app/exprtk.h	/^         typedef typename symbol_table_t::vararg_function_ptr  vararg_function_ptr;$/;"	t	struct:exprtk::parser::symtab_store
vararg_function_ptr	app/exprtk.h	/^      typedef vararg_function_t*                  vararg_function_ptr;$/;"	t	class:exprtk::symbol_table
vararg_function_store	app/exprtk.h	/^            type_store<vararg_function_t , vararg_function_t > vararg_function_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
vararg_function_t	app/exprtk.h	/^      typedef ivararg_function <T>                vararg_function_t;$/;"	t	class:exprtk::symbol_table
vararg_mand_op	app/exprtk.h	/^      struct vararg_mand_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_max_op	app/exprtk.h	/^      struct vararg_max_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_min_op	app/exprtk.h	/^      struct vararg_min_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_mor_op	app/exprtk.h	/^      struct vararg_mor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_mul_op	app/exprtk.h	/^      struct vararg_mul_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_multi_op	app/exprtk.h	/^      struct vararg_multi_op : public opr_base<T>$/;"	s	namespace:exprtk::details
vararg_node	app/exprtk.h	/^         explicit vararg_node(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
vararg_varnode	app/exprtk.h	/^         explicit vararg_varnode(const Sequence<expression_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::details::exprtk_final
vardef_disabled	app/exprtk.h	/^         bool vardef_disabled            () const { return disable_vardef_;            }$/;"	f	class:exprtk::parser::settings_store
variable_count	app/exprtk.h	/^      inline std::size_t variable_count() const$/;"	f	class:exprtk::symbol_table
variable_node	app/exprtk.h	/^         explicit variable_node()$/;"	f	class:exprtk::details::exprtk_final
variable_node	app/exprtk.h	/^         explicit variable_node(T& v)$/;"	f	class:exprtk::details::exprtk_final
variable_node_ptr	app/exprtk.h	/^         typedef variable_node<T>*   variable_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
variable_node_ptr	app/exprtk.h	/^         typedef variable_node_t*          variable_node_ptr;$/;"	t	struct:exprtk::parser::scope_element
variable_node_ptr	app/exprtk.h	/^         typedef variable_node_t*   variable_node_ptr;$/;"	t	class:exprtk::parser::scope_element_manager
variable_node_ptr_t	app/exprtk.h	/^         typedef variable_node_t*    variable_node_ptr_t;$/;"	t	class:exprtk::details::generic_function_node
variable_node_t	app/exprtk.h	/^         typedef typename details::variable_node<T>  variable_node_t;$/;"	t	struct:exprtk::symbol_table::type_store
variable_node_t	app/exprtk.h	/^         typedef variable_node<T>    variable_node_t;$/;"	t	class:exprtk::details::generic_function_node
variable_node_t	app/exprtk.h	/^      typedef details::variable_node<T>                   variable_node_t;$/;"	t	class:exprtk::parser
variable_ptr	app/exprtk.h	/^         typedef typename symbol_table_t::variable_ptr variable_ptr;$/;"	t	struct:exprtk::parser::symtab_store
variable_ptr	app/exprtk.h	/^      typedef variable_t*                         variable_ptr;$/;"	t	class:exprtk::symbol_table
variable_ref	app/exprtk.h	/^      inline T& variable_ref(const std::string& symbol_name)$/;"	f	class:exprtk::symbol_table
variable_store	app/exprtk.h	/^            type_store<variable_t        , T                 > variable_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
variable_t	app/exprtk.h	/^      typedef typename details::variable_node<T>  variable_t;$/;"	t	class:exprtk::symbol_table
varnode_optimise_sf3	app/exprtk.h	/^         inline expression_node_ptr varnode_optimise_sf3(const details::operator_type& operation, expression_node_ptr (&branch)[3])$/;"	f	class:exprtk::parser::expression_generator
varnode_optimise_sf4	app/exprtk.h	/^         inline expression_node_ptr varnode_optimise_sf4(const details::operator_type& operation, expression_node_ptr (&branch)[4])$/;"	f	class:exprtk::parser::expression_generator
varnode_optimise_varargfunc	app/exprtk.h	/^         inline expression_node_ptr varnode_optimise_varargfunc(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
varref_t	app/exprtk.h	/^         typedef std::vector<T*>            varref_t;$/;"	t	struct:exprtk::function_compositor::base_func
vds_	app/exprtk.h	/^         vds_t                      vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_	app/exprtk.h	/^         vds_t             vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_	app/exprtk.h	/^         vds_t           vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_	app/exprtk.h	/^         vds_t vds_;$/;"	m	class:exprtk::details::exprtk_final
vds_t	app/exprtk.h	/^         typedef typename details::vec_data_store<Type> vds_t;$/;"	t	class:exprtk::details::vector_holder
vds_t	app/exprtk.h	/^         typedef vec_data_store  <T>  vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	app/exprtk.h	/^         typedef vec_data_store <T>  vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	app/exprtk.h	/^         typedef vec_data_store<T>              vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	app/exprtk.h	/^         typedef vec_data_store<T>   vds_t;$/;"	t	class:exprtk::details::exprtk_final
vds_t	app/exprtk.h	/^         typedef vec_data_store<T> vds_t;$/;"	t	class:exprtk::details::vector_interface
vec0_node_ptr_	app/exprtk.h	/^         vector_node<T>* vec0_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec0_node_ptr_	app/exprtk.h	/^         vector_node_ptr   vec0_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec1_node_ptr_	app/exprtk.h	/^         vector_node<T>* vec1_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec1_node_ptr_	app/exprtk.h	/^         vector_node_ptr   vec1_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec_	app/exprtk.h	/^            const Type* vec_;$/;"	m	class:exprtk::details::vector_holder::array_vector_impl
vec_	app/exprtk.h	/^         std::vector<ptr_t>& vec_;$/;"	m	struct:exprtk::parser::scoped_vec_delete
vec_add_op	app/exprtk.h	/^      struct vec_add_op$/;"	s	namespace:exprtk::details
vec_avg_op	app/exprtk.h	/^      struct vec_avg_op$/;"	s	namespace:exprtk::details
vec_binop_valvec_node	app/exprtk.h	/^         vec_binop_valvec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
vec_binop_vecval_node	app/exprtk.h	/^         vec_binop_vecval_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
vec_binop_vecvec_node	app/exprtk.h	/^         vec_binop_vecvec_node(const operator_type& opr,$/;"	f	class:exprtk::details::exprtk_final
vec_data	app/exprtk.h	/^         T*    vec_data;$/;"	m	union:exprtk::type_store::__anon6
vec_data_store	app/exprtk.h	/^         explicit vec_data_store(const std::size_t& size)$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	app/exprtk.h	/^         vec_data_store()$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	app/exprtk.h	/^         vec_data_store(const std::size_t& size, data_t data, bool dstrct = false)$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	app/exprtk.h	/^         vec_data_store(const type& vds)$/;"	f	class:exprtk::details::vec_data_store
vec_data_store	app/exprtk.h	/^      class vec_data_store$/;"	c	namespace:exprtk::details
vec_holder	app/exprtk.h	/^         inline vector_holder_t& vec_holder()$/;"	f	class:exprtk::details::exprtk_final
vec_holder_	app/exprtk.h	/^         vector_holder_ptr vec_holder_;$/;"	m	class:exprtk::details::exprtk_final
vec_interface_ptr	app/exprtk.h	/^         typedef vector_interface<T>* vec_interface_ptr;$/;"	t	class:exprtk::details::exprtk_final
vec_max_op	app/exprtk.h	/^      struct vec_max_op$/;"	s	namespace:exprtk::details
vec_min_op	app/exprtk.h	/^      struct vec_min_op$/;"	s	namespace:exprtk::details
vec_mul_op	app/exprtk.h	/^      struct vec_mul_op$/;"	s	namespace:exprtk::details
vec_node	app/exprtk.h	/^         vector_holder_ptr   vec_node;$/;"	m	struct:exprtk::parser::scope_element
vec_node_ptr_	app/exprtk.h	/^         vector_elem_node<T>* vec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec_node_ptr_	app/exprtk.h	/^         vector_node<T>* vec_node_ptr_;$/;"	m	class:exprtk::details::exprtk_final
vec_size_	app/exprtk.h	/^         std::size_t     vec_size_;$/;"	m	class:exprtk::details::exprtk_final
vec_size_	app/exprtk.h	/^         std::size_t vec_size_;$/;"	m	class:exprtk::details::exprtk_final
vec_view_	app/exprtk.h	/^            vector_view_t& vec_view_;$/;"	m	class:exprtk::details::vector_holder::vector_view_impl
vecops	app/exprtk.h	/^   namespace rtl { namespace vecops {$/;"	n	namespace:exprtk::rtl
vector_assignment_node	app/exprtk.h	/^         vector_assignment_node(T* vector_base,$/;"	f	class:exprtk::details::exprtk_final
vector_base_	app/exprtk.h	/^         T* vector_base_;$/;"	m	class:exprtk::details::exprtk_final
vector_base_	app/exprtk.h	/^         mutable T* vector_base_;$/;"	m	class:exprtk::details::exprtk_final
vector_count	app/exprtk.h	/^      inline std::size_t vector_count() const$/;"	f	class:exprtk::symbol_table
vector_elem_node	app/exprtk.h	/^         vector_elem_node(expression_ptr index, vector_holder_ptr vec_holder)$/;"	f	class:exprtk::details::exprtk_final
vector_elem_node_t	app/exprtk.h	/^      typedef details::vector_elem_node<T>                vector_elem_node_t;$/;"	t	class:exprtk::parser
vector_element	app/exprtk.h	/^         inline expression_node_ptr vector_element(const std::string& symbol,$/;"	f	class:exprtk::parser::expression_generator
vector_holder	app/exprtk.h	/^         vector_holder(Type* vec, const std::size_t& vec_size)$/;"	f	class:exprtk::details::vector_holder
vector_holder	app/exprtk.h	/^         vector_holder(const vds_t& vds)$/;"	f	class:exprtk::details::vector_holder
vector_holder	app/exprtk.h	/^         vector_holder(exprtk::vector_view<Type>& vec)$/;"	f	class:exprtk::details::vector_holder
vector_holder	app/exprtk.h	/^         vector_holder(std::vector<Type,Allocator>& vec)$/;"	f	class:exprtk::details::vector_holder
vector_holder	app/exprtk.h	/^      class vector_holder$/;"	c	namespace:exprtk::details
vector_holder_	app/exprtk.h	/^         vector_holder_ptr vector_holder_;$/;"	m	class:exprtk::details::exprtk_final
vector_holder_	app/exprtk.h	/^         vector_holder_t* vector_holder_;$/;"	m	class:exprtk::details::exprtk_final
vector_holder_base	app/exprtk.h	/^         class vector_holder_base$/;"	c	class:exprtk::details::vector_holder
vector_holder_base_	app/exprtk.h	/^         mutable vector_holder_base* vector_holder_base_;$/;"	m	class:exprtk::details::vector_holder
vector_holder_ptr	app/exprtk.h	/^         typedef typename symbol_table_t::vector_holder_ptr    vector_holder_ptr;$/;"	t	struct:exprtk::parser::symtab_store
vector_holder_ptr	app/exprtk.h	/^         typedef vector_holder   <T>* vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	app/exprtk.h	/^         typedef vector_holder<T>*   vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	app/exprtk.h	/^         typedef vector_holder_t*               vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	app/exprtk.h	/^         typedef vector_holder_t*          vector_holder_ptr;$/;"	t	struct:exprtk::parser::scope_element
vector_holder_ptr	app/exprtk.h	/^         typedef vector_holder_t*    vector_holder_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_ptr	app/exprtk.h	/^      typedef details::vector_holder<T>*                  vector_holder_ptr;$/;"	t	class:exprtk::parser
vector_holder_ptr	app/exprtk.h	/^      typedef details::vector_holder<T>*    vector_holder_ptr;$/;"	t	class:exprtk::expression
vector_holder_ptr	app/exprtk.h	/^      typedef vector_holder_t* vector_holder_ptr;$/;"	t	class:exprtk::symbol_table
vector_holder_t	app/exprtk.h	/^         typedef details::vector_holder<T> vector_holder_t;$/;"	t	struct:exprtk::parser::scope_element
vector_holder_t	app/exprtk.h	/^         typedef vector_holder<T>               vector_holder_t;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_t	app/exprtk.h	/^         typedef vector_holder<T>    vector_holder_t;$/;"	t	class:exprtk::details::exprtk_final
vector_holder_t	app/exprtk.h	/^      typedef typename details::vector_holder<T>  vector_holder_t;$/;"	t	class:exprtk::symbol_table
vector_interface	app/exprtk.h	/^      class vector_interface$/;"	c	namespace:exprtk::details
vector_node	app/exprtk.h	/^         explicit vector_node(vector_holder_t* vh)$/;"	f	class:exprtk::details::exprtk_final
vector_node	app/exprtk.h	/^         vector_node(const vds_t& vds, vector_holder_t* vh)$/;"	f	class:exprtk::details::exprtk_final
vector_node_ptr	app/exprtk.h	/^         typedef vector_node     <T>* vector_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_node_ptr	app/exprtk.h	/^         typedef vector_node    <T>* vector_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_node_ptr	app/exprtk.h	/^         typedef vector_node<T>*     vector_node_ptr;$/;"	t	class:exprtk::details::exprtk_final
vector_node_ptr	app/exprtk.h	/^         typedef vector_node<T>*   vector_node_ptr;$/;"	t	class:exprtk::details::vector_interface
vector_node_ptr_t	app/exprtk.h	/^         typedef vector_node_t*      vector_node_ptr_t;$/;"	t	class:exprtk::details::generic_function_node
vector_node_t	app/exprtk.h	/^         typedef vector_node<T>      vector_node_t;$/;"	t	class:exprtk::details::generic_function_node
vector_node_t	app/exprtk.h	/^      typedef details::vector_node<T>                     vector_node_t;$/;"	t	class:exprtk::parser
vector_ops	app/exprtk.h	29892;"	d
vector_ops	app/exprtk.h	29946;"	d
vector_size	app/exprtk.h	/^            std::size_t vector_size() const$/;"	f	class:exprtk::details::vector_holder::array_vector_impl
vector_size	app/exprtk.h	/^            std::size_t vector_size() const$/;"	f	class:exprtk::details::vector_holder::sequence_vector_impl
vector_size	app/exprtk.h	/^            std::size_t vector_size() const$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
vector_store	app/exprtk.h	/^            type_store<vector_holder_t   , vector_holder_t   > vector_store;$/;"	m	struct:exprtk::symbol_table::control_block::st_data
vector_t	app/exprtk.h	/^         typedef details::vector_holder<T>           vector_t;$/;"	t	struct:exprtk::symbol_table::type_store
vector_t	app/exprtk.h	/^         typedef typename generic_type::vector_view    vector_t;$/;"	t	struct:exprtk::rtl::vecops::helper::load_vector_range
vector_t	app/exprtk.h	/^         typedef typename generic_type::vector_view vector_t;$/;"	t	struct:exprtk::rtl::io::details::print_impl
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::io::file::read
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::io::file::write
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::all_false
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::all_true
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::any_false
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::any_true
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpby
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpbyz
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpbz
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpy
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::axpyz
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::copy
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::count
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::dot
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::dotk
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::iota
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::nthelement
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::rol
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::ror
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::shift_left
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::shift_right
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::sort
vector_t	app/exprtk.h	/^      typedef typename generic_type::vector_view    vector_t;$/;"	t	class:exprtk::rtl::vecops::sumk
vector_view	app/exprtk.h	/^      typedef type_view<T>    vector_view;$/;"	t	struct:exprtk::type_store
vector_view	app/exprtk.h	/^      vector_view(const vector_view<T>& vv)$/;"	f	class:exprtk::vector_view
vector_view	app/exprtk.h	/^      vector_view(data_ptr_t data, const std::size_t& size)$/;"	f	class:exprtk::vector_view
vector_view	app/exprtk.h	/^   class vector_view$/;"	c	namespace:exprtk
vector_view_impl	app/exprtk.h	/^            vector_view_impl(vector_view_t& vec_view)$/;"	f	class:exprtk::details::vector_holder::vector_view_impl
vector_view_impl	app/exprtk.h	/^         class vector_view_impl : public vector_holder_base$/;"	c	class:exprtk::details::vector_holder
vector_view_t	app/exprtk.h	/^            typedef exprtk::vector_view<Type> vector_view_t;$/;"	t	class:exprtk::details::vector_holder::vector_view_impl
vectorize_func	app/exprtk.h	/^         inline expression_node_ptr vectorize_func(const details::operator_type& operation, Sequence<expression_node_ptr,Allocator>& arg_list)$/;"	f	class:exprtk::parser::expression_generator
vectorize_node	app/exprtk.h	/^         explicit vectorize_node(const expression_ptr v)$/;"	f	class:exprtk::details::exprtk_final
version	app/exprtk.h	/^      static const char* version = "2.718281828459045235360287471352"$/;"	m	namespace:exprtk::information
vertex	algorithm/Quad.h	/^  Vertex& vertex(size_t i) { return *v_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
vertex	algorithm/Quad.h	/^  const Vertex& vertex(size_t i) const { return *v_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
vertex	algorithm/Triangle.h	/^  Vertex& vertex(size_t i) { return *v_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
vertex	algorithm/Triangle.h	/^  const Vertex& vertex(size_t i) const { return *v_[i]; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
vertex_edge_dist_sqr	utils/geometry.h	/^inline double vertex_edge_dist_sqr(const Vec2<T>& p,$/;"	f	namespace:TQMesh::TQUtils::TQGeom
vertices	algorithm/Domain.h	/^  Vertices& vertices() { return verts_; }$/;"	f	class:TQMesh::TQAlgorithm::Domain
vertices	algorithm/Domain.h	/^  const Vertices& vertices() const { return verts_; }$/;"	f	class:TQMesh::TQAlgorithm::Domain
vertices	algorithm/Mesh.h	/^  Vertices& vertices() { return verts_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
vertices	algorithm/Mesh.h	/^  const Vertices& vertices() const { return verts_; }$/;"	f	class:TQMesh::TQAlgorithm::Mesh
vertices	algorithm/Vertex.h	/^  VertexVector& vertices() { return verts_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
vertices	algorithm/Vertex.h	/^  const VertexVector& vertices() const { return verts_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
vertices	app/unused.c	/^  Vertices& vertices = domain.vertices();$/;"	v
verts_	algorithm/Domain.h	/^  Vertices         verts_;$/;"	m	class:TQMesh::TQAlgorithm::Domain
verts_	algorithm/Mesh.h	/^  Vertices   verts_;$/;"	m	class:TQMesh::TQAlgorithm::Mesh
violation	app/exprtk.h	/^         violation_type violation;$/;"	m	struct:exprtk::loop_runtime_check::violation_context
violation_context	app/exprtk.h	/^      struct violation_context$/;"	s	struct:exprtk::loop_runtime_check
violation_type	app/exprtk.h	/^      enum violation_type$/;"	g	struct:exprtk::loop_runtime_check
vob_base_node	app/exprtk.h	/^      class vob_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
vob_node	app/exprtk.h	/^         explicit vob_node(const T& var, const expression_ptr branch)$/;"	f	class:exprtk::details::exprtk_final
vob_optimisable	app/exprtk.h	/^         inline bool vob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
voc_base_node	app/exprtk.h	/^      class voc_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
voc_node	app/exprtk.h	/^         explicit voc_node(const T& var, const T& const_var)$/;"	f	class:exprtk::details::exprtk_final
voc_optimisable	app/exprtk.h	/^         inline bool voc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
voc_t	app/exprtk.h	/^      typedef details::T0oT1_define<T, cref_t , const_t> voc_t;$/;"	t	class:exprtk::parser
vococ_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , const_t, const_t> vococ_t;$/;"	t	class:exprtk::parser
vococov_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , const_t, const_t, cref_t > vococov_t;$/;"	t	class:exprtk::parser
vocov_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , const_t, cref_t > vocov_t;$/;"	t	class:exprtk::parser
vocovoc_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , const_t, cref_t , const_t> vocovoc_t;$/;"	t	class:exprtk::parser
vocovov_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , const_t, cref_t , cref_t > vocovov_t;$/;"	t	class:exprtk::parser
void_t	app/exprtk.h	/^         typedef std::pair<void*,std::size_t>   void_t;$/;"	t	class:exprtk::details::generic_function_node
vov_base_node	app/exprtk.h	/^      class vov_base_node : public expression_node<T>$/;"	c	namespace:exprtk::details
vov_node	app/exprtk.h	/^         explicit vov_node(const T& var0, const T& var1)$/;"	f	class:exprtk::details::exprtk_final
vov_optimisable	app/exprtk.h	/^         inline bool vov_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const$/;"	f	class:exprtk::parser::expression_generator
vov_t	app/exprtk.h	/^      typedef details::T0oT1_define<T, cref_t , cref_t > vov_t;$/;"	t	class:exprtk::parser
vovoc_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , cref_t , const_t> vovoc_t;$/;"	t	class:exprtk::parser
vovocov_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , cref_t , const_t, cref_t > vovocov_t;$/;"	t	class:exprtk::parser
vovov_t	app/exprtk.h	/^      typedef details::T0oT1oT2_define<T, cref_t , cref_t , cref_t > vovov_t;$/;"	t	class:exprtk::parser
vovovoc_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , cref_t , cref_t , const_t> vovovoc_t;$/;"	t	class:exprtk::parser
vovovov_t	app/exprtk.h	/^      typedef details::T0oT1oT2oT3_define<T, cref_t , cref_t , cref_t , cref_t > vovovov_t;$/;"	t	class:exprtk::parser
vtype	app/exprtk.h	/^         typedef const Type& vtype;$/;"	t	class:exprtk::parser::expression_generator
w	app/exprtk.h	/^      write  <T> w;$/;"	m	struct:exprtk::rtl::io::file::package
waste	utils/Container.h	/^  List& waste() { return waste_; }$/;"	f	class:TQMesh::TQUtils::Container
waste	utils/Container.h	/^  const List& waste() const { return waste_; }$/;"	f	class:TQMesh::TQUtils::Container
waste_	utils/Container.h	/^  List            waste_;$/;"	m	class:TQMesh::TQUtils::Container
wc_imatch	app/exprtk.h	/^      inline bool wc_imatch(const std::string& wild_card,$/;"	f	namespace:exprtk::details
wc_match	app/exprtk.h	/^      inline bool wc_match(const std::string& wild_card,$/;"	f	namespace:exprtk::details
what	utils/ParaReader.h	/^    string& what() { return error_message; }$/;"	f	class:CppUtils::ParaReader::Invalid
what	utils/oldParaReader.h	/^    string& what() { return error_message; }$/;"	f	class:ParaReader::Invalid
while_loop	app/exprtk.h	/^         inline expression_node_ptr while_loop(expression_node_ptr& condition,$/;"	f	class:exprtk::parser::expression_generator
while_loop_bc_node	app/exprtk.h	/^         while_loop_bc_node(expression_ptr condition,$/;"	f	class:exprtk::details::while_loop_bc_node
while_loop_bc_node	app/exprtk.h	/^      class while_loop_bc_node : public while_loop_node<T>$/;"	c	namespace:exprtk::details
while_loop_bc_node_t	app/exprtk.h	/^      typedef details::while_loop_bc_node<T>              while_loop_bc_node_t;$/;"	t	class:exprtk::parser
while_loop_bc_rtc_node	app/exprtk.h	/^         while_loop_bc_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
while_loop_bc_rtc_node_t	app/exprtk.h	/^      typedef details::while_loop_bc_rtc_node<T>          while_loop_bc_rtc_node_t;$/;"	t	class:exprtk::parser
while_loop_node	app/exprtk.h	/^         while_loop_node(expression_ptr condition,$/;"	f	class:exprtk::details::while_loop_node
while_loop_node	app/exprtk.h	/^      class while_loop_node : public expression_node<T>$/;"	c	namespace:exprtk::details
while_loop_node_t	app/exprtk.h	/^      typedef details::while_loop_node<T>                 while_loop_node_t;$/;"	t	class:exprtk::parser
while_loop_rtc_node	app/exprtk.h	/^         while_loop_rtc_node(expression_ptr condition,$/;"	f	class:exprtk::details::exprtk_final
while_loop_rtc_node_t	app/exprtk.h	/^      typedef details::while_loop_rtc_node<T>             while_loop_rtc_node_t;$/;"	t	class:exprtk::parser
width_	utils/ProgressBar.h	/^  int   width_;$/;"	m	class:TQMesh::TQUtils::ProgressBar
write	app/exprtk.h	/^         bool write(const View& view, const std::size_t amount, const std::size_t offset = 0)$/;"	f	struct:exprtk::rtl::io::file::details::file_descriptor
write	app/exprtk.h	/^      write()$/;"	f	class:exprtk::rtl::io::file::write
write	app/exprtk.h	/^   class write : public exprtk::igeneric_function<T>$/;"	c	namespace:exprtk::rtl::io::file
x	utils/Vec2.h	/^  T& x = e[0];$/;"	m	class:TQMesh::TQUtils::Vec2
x_size_function	app/size_function.cpp	/^static double x_size_function, y_size_function;$/;"	v	file:
xnor_impl	app/exprtk.h	/^            inline T xnor_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xnor_impl	app/exprtk.h	/^            inline T xnor_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xnor_op	app/exprtk.h	/^      struct xnor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
xnor_opr	app/exprtk.h	/^         inline T xnor_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
xor_impl	app/exprtk.h	/^            inline T xor_impl(const T v0, const T v1, int_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xor_impl	app/exprtk.h	/^            inline T xor_impl(const T v0, const T v1, real_type_tag)$/;"	f	namespace:exprtk::details::numeric::details
xor_op	app/exprtk.h	/^      struct xor_op : public opr_base<T>$/;"	s	namespace:exprtk::details
xor_opr	app/exprtk.h	/^         inline T xor_opr(const T v0, const T v1)$/;"	f	namespace:exprtk::details::numeric
xy	algorithm/Edge.h	/^  const Vec2d& xy() const { return xy_; }$/;"	f	class:TQMesh::TQAlgorithm::Edge
xy	algorithm/Quad.h	/^  const Vec2d& xy() const { return xy_; }$/;"	f	class:TQMesh::TQAlgorithm::Quad
xy	algorithm/Triangle.h	/^  const Vec2d& xy() const { return xy_; }$/;"	f	class:TQMesh::TQAlgorithm::Triangle
xy	algorithm/Vertex.h	/^  const Vec2d xy() const { return xy_; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
xy	algorithm/Vertex.h	/^  void xy(const Vec2d& c) { xy_ = c; }$/;"	f	class:TQMesh::TQAlgorithm::Vertex
xy	tests/container_test.cpp	/^  const Vec2d xy() const { return xy_; }$/;"	f	class:ContainerTests::Edge
xy	tests/container_test.cpp	/^  const Vec2d xy() const { return xy_; }$/;"	f	class:ContainerTests::Vertex
xy	tests/qtree_test.cpp	/^  const Vec2<T> xy() const { return xy_; }$/;"	f	class:QTreeTests::VertexType
xy_	algorithm/Vertex.h	/^  Vec2d               xy_;$/;"	m	class:TQMesh::TQAlgorithm::Vertex
xy_	tests/container_test.cpp	/^  Vec2d         xy_;$/;"	m	class:ContainerTests::Vertex	file:
xy_	tests/container_test.cpp	/^  Vec2d       xy_;$/;"	m	class:ContainerTests::Edge	file:
xy_	tests/qtree_test.cpp	/^  Vec2<T>                   xy_;$/;"	m	class:QTreeTests::VertexType	file:
y	utils/Vec2.h	/^  T& y = e[1];$/;"	m	class:TQMesh::TQUtils::Vec2
y_size_function	app/size_function.cpp	/^static double x_size_function, y_size_function;$/;"	v	file:
zero_return_disabled	app/exprtk.h	/^         bool zero_return_disabled       () const { return disable_zero_return_;       }$/;"	f	class:exprtk::parser::settings_store
~Edge	tests/container_test.cpp	/^  ~Edge() {}$/;"	f	class:ContainerTests::Edge
~QTree	utils/QTree.h	/^  ~QTree() $/;"	f	class:TQMesh::TQUtils::QTree
~T0oT1oT2_base_node	app/exprtk.h	/^         virtual ~T0oT1oT2_base_node() {}$/;"	f	class:exprtk::details::T0oT1oT2_base_node
~T0oT1oT2oT3_base_node	app/exprtk.h	/^         virtual ~T0oT1oT2oT3_base_node() {}$/;"	f	class:exprtk::details::T0oT1oT2oT3_base_node
~base_func	app/exprtk.h	/^         virtual ~base_func() {}$/;"	f	struct:exprtk::function_compositor::base_func
~boc_base_node	app/exprtk.h	/^         virtual ~boc_base_node() {}$/;"	f	class:exprtk::details::boc_base_node
~bov_base_node	app/exprtk.h	/^         virtual ~bov_base_node() {}$/;"	f	class:exprtk::details::bov_base_node
~cob_base_node	app/exprtk.h	/^         virtual ~cob_base_node() {}$/;"	f	class:exprtk::details::cob_base_node
~conditional_vector_node	app/exprtk.h	/^        ~conditional_vector_node()$/;"	f	class:exprtk::details::exprtk_final
~const_string_range_node	app/exprtk.h	/^        ~const_string_range_node()$/;"	f	class:exprtk::details::exprtk_final
~control_block	app/exprtk.h	/^           ~control_block()$/;"	f	struct:exprtk::details::vec_data_store::control_block
~control_block	app/exprtk.h	/^        ~control_block()$/;"	f	struct:exprtk::expression::control_block
~control_block	app/exprtk.h	/^        ~control_block()$/;"	f	struct:exprtk::symbol_table::control_block
~cov_base_node	app/exprtk.h	/^         virtual ~cov_base_node() {}$/;"	f	class:exprtk::details::cov_base_node
~expression	app/exprtk.h	/^     ~expression()$/;"	f	class:exprtk::expression
~expression_node	app/exprtk.h	/^         virtual ~expression_node() {}$/;"	f	class:exprtk::details::expression_node
~function_compositor	app/exprtk.h	/^     ~function_compositor()$/;"	f	class:exprtk::function_compositor
~generic_function_node	app/exprtk.h	/^         virtual ~generic_function_node() {}$/;"	f	class:exprtk::details::generic_function_node
~generic_string_range_node	app/exprtk.h	/^        ~generic_string_range_node()$/;"	f	class:exprtk::details::exprtk_final
~helper_interface	app/exprtk.h	/^         virtual ~helper_interface()             {              }$/;"	f	class:exprtk::lexer::helper_interface
~ifunction	app/exprtk.h	/^      virtual ~ifunction() {}$/;"	f	class:exprtk::ifunction
~igeneric_function	app/exprtk.h	/^      virtual ~igeneric_function() {}$/;"	f	class:exprtk::igeneric_function
~ivararg_function	app/exprtk.h	/^      virtual ~ivararg_function() {}$/;"	f	class:exprtk::ivararg_function
~ivariable	app/exprtk.h	/^         virtual ~ivariable() {}$/;"	f	class:exprtk::details::ivariable
~loop_runtime_check	app/exprtk.h	/^      virtual ~loop_runtime_check() {}$/;"	f	struct:exprtk::loop_runtime_check
~node_collector_interface	app/exprtk.h	/^         virtual ~node_collector_interface() {}$/;"	f	struct:exprtk::details::node_collector_interface
~node_depth_base	app/exprtk.h	/^         virtual ~node_depth_base() {}$/;"	f	struct:exprtk::details::node_depth_base
~null_igenfunc	app/exprtk.h	/^         virtual ~null_igenfunc() {}$/;"	f	class:exprtk::details::null_igenfunc
~parser	app/exprtk.h	/^     ~parser()$/;"	f	class:exprtk::parser
~polynomial	app/exprtk.h	/^      virtual ~polynomial() {}$/;"	f	class:exprtk::polynomial
~range_interface	app/exprtk.h	/^         virtual ~range_interface() {}$/;"	f	class:exprtk::details::range_interface
~scope_handler	app/exprtk.h	/^        ~scope_handler()$/;"	f	class:exprtk::parser::scope_handler
~scoped_bft	app/exprtk.h	/^        ~scoped_bft()$/;"	f	struct:exprtk::function_compositor::scoped_bft
~scoped_bool_negator	app/exprtk.h	/^        ~scoped_bool_negator()$/;"	f	struct:exprtk::parser::scoped_bool_negator
~scoped_bool_or_restorer	app/exprtk.h	/^        ~scoped_bool_or_restorer()$/;"	f	struct:exprtk::parser::scoped_bool_or_restorer
~scoped_delete	app/exprtk.h	/^        ~scoped_delete()$/;"	f	struct:exprtk::parser::scoped_delete
~scoped_deq_delete	app/exprtk.h	/^        ~scoped_deq_delete()$/;"	f	struct:exprtk::parser::scoped_deq_delete
~scoped_expression_delete	app/exprtk.h	/^        ~scoped_expression_delete()$/;"	f	struct:exprtk::parser::scoped_expression_delete
~scoped_inc_dec	app/exprtk.h	/^        ~scoped_inc_dec()$/;"	f	struct:exprtk::parser::scoped_inc_dec
~scoped_vec_delete	app/exprtk.h	/^        ~scoped_vec_delete()$/;"	f	struct:exprtk::parser::scoped_vec_delete
~sf3ext_type_node	app/exprtk.h	/^         virtual ~sf3ext_type_node() {}$/;"	f	class:exprtk::details::sf3ext_type_node
~sos_base_node	app/exprtk.h	/^         virtual ~sos_base_node() {}$/;"	f	class:exprtk::details::sos_base_node
~sosos_base_node	app/exprtk.h	/^         virtual ~sosos_base_node() {}$/;"	f	class:exprtk::details::sosos_base_node
~st_data	app/exprtk.h	/^           ~st_data()$/;"	f	struct:exprtk::symbol_table::control_block::st_data
~stack_limit_handler	app/exprtk.h	/^        ~stack_limit_handler()$/;"	f	class:exprtk::parser::stack_limit_handler
~str_xoxr_node	app/exprtk.h	/^        ~str_xoxr_node()$/;"	f	class:exprtk::details::exprtk_final
~str_xrox_node	app/exprtk.h	/^        ~str_xrox_node()$/;"	f	class:exprtk::details::exprtk_final
~str_xroxr_node	app/exprtk.h	/^        ~str_xroxr_node()$/;"	f	class:exprtk::details::exprtk_final
~string_base_node	app/exprtk.h	/^         virtual ~string_base_node() {}$/;"	f	class:exprtk::details::string_base_node
~string_range_node	app/exprtk.h	/^         virtual ~string_range_node()$/;"	f	class:exprtk::details::exprtk_final
~symbol_table	app/exprtk.h	/^     ~symbol_table()$/;"	f	class:exprtk::symbol_table
~token_scanner	app/exprtk.h	/^         virtual ~token_scanner() {}$/;"	f	class:exprtk::lexer::token_scanner
~unary_vector_node	app/exprtk.h	/^        ~unary_vector_node()$/;"	f	class:exprtk::details::exprtk_final
~unknown_symbol_resolver	app/exprtk.h	/^         virtual ~unknown_symbol_resolver() {}$/;"	f	struct:exprtk::parser::unknown_symbol_resolver
~uv_base_node	app/exprtk.h	/^         virtual ~uv_base_node() {}$/;"	f	class:exprtk::details::uv_base_node
~vec_binop_valvec_node	app/exprtk.h	/^        ~vec_binop_valvec_node()$/;"	f	class:exprtk::details::exprtk_final
~vec_binop_vecval_node	app/exprtk.h	/^        ~vec_binop_vecval_node()$/;"	f	class:exprtk::details::exprtk_final
~vec_binop_vecvec_node	app/exprtk.h	/^        ~vec_binop_vecvec_node()$/;"	f	class:exprtk::details::exprtk_final
~vec_data_store	app/exprtk.h	/^        ~vec_data_store()$/;"	f	class:exprtk::details::vec_data_store
~vector_holder_base	app/exprtk.h	/^            virtual ~vector_holder_base() {}$/;"	f	class:exprtk::details::vector_holder::vector_holder_base
~vector_interface	app/exprtk.h	/^         virtual ~vector_interface() {}$/;"	f	class:exprtk::details::vector_interface
~vob_base_node	app/exprtk.h	/^         virtual ~vob_base_node() {}$/;"	f	class:exprtk::details::vob_base_node
~voc_base_node	app/exprtk.h	/^         virtual ~voc_base_node() {}$/;"	f	class:exprtk::details::voc_base_node
~vov_base_node	app/exprtk.h	/^         virtual ~vov_base_node() {}$/;"	f	class:exprtk::details::vov_base_node
